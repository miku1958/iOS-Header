//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <coreroutine/RTVisitPipelineModule-Protocol.h>

@class NSArray, NSString, RTLocation, RTVisitCluster, RTVisitDecoder, RTVisitHyperParameter;
@protocol RTVisitModelController;

@interface RTVisitPipelineModuleTrajectorySequenceCluster : NSObject <RTVisitPipelineModule>
{
    double _sumOfNorthing;
    double _sumOfEasting;
    double _sumOfSquaredNorthing;
    double _sumOfSquaredEasting;
    RTLocation *_referenceLocation;
    id<RTVisitModelController> _trajectorySequenceClassifier;
    RTVisitHyperParameter *_hyperParameter;
    RTVisitDecoder *_decoder;
    RTVisitCluster *_workingVisitCluster;
    unsigned long long _numOfLocations;
    NSArray *_residualLocations;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) RTVisitDecoder *decoder; // @synthesize decoder=_decoder;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) RTVisitHyperParameter *hyperParameter; // @synthesize hyperParameter=_hyperParameter;
@property (readonly, nonatomic) unsigned long long numOfLocations; // @synthesize numOfLocations=_numOfLocations;
@property (readonly, nonatomic) NSArray *residualLocations; // @synthesize residualLocations=_residualLocations;
@property (readonly) Class superclass;
@property (readonly, nonatomic) id<RTVisitModelController> trajectorySequenceClassifier; // @synthesize trajectorySequenceClassifier=_trajectorySequenceClassifier;
@property (readonly, nonatomic) RTVisitCluster *workingVisitCluster; // @synthesize workingVisitCluster=_workingVisitCluster;

+ (double)normalizeFeature:(double)arg1 min:(double)arg2 max:(double)arg3;
- (void).cxx_destruct;
- (void)clearWorkingVisitCluster;
- (BOOL)computeFeatureVector:(float *)arg1 cumSumNumLocations:(unsigned long long)arg2 cumSumNorthings:(double *)arg3 cumSumEastings:(double *)arg4 cumSumSquaredNorthings:(double *)arg5 cumSumSquaredEastings:(double *)arg6 sequenceLength:(unsigned long long)arg7;
- (float *)computeFeatureVectorFromLocalFramesNumOfLocations:(unsigned long long)arg1 northings:(const double *)arg2 eastings:(const double *)arg3 sequenceLength:(unsigned long long)arg4;
- (float *)computeFeatureVectorFromLocations:(id)arg1 start:(unsigned long long)arg2 end:(unsigned long long)arg3;
- (double)computeRadiusFromCumSumNorthings:(const double *)arg1 cumSumEastings:(const double *)arg2 cumSumSquaredNorthings:(const double *)arg3 cumSumSuaredEastings:(const double *)arg4 firstLocationIndex:(unsigned long long)arg5 lastLocationIndex:(unsigned long long)arg6;
- (id)createVisitWithLocations:(id)arg1 entryDate:(id)arg2 exitDate:(id)arg3;
- (id)init;
- (id)initWithVisitTrajectorySequenceClassifier:(id)arg1 hyperParameter:(id)arg2;
- (unsigned long long)numLocationsFrom:(unsigned long long)arg1;
- (id)performBatchInferenceWithFeatureVector:(const float *)arg1 featureVectorLength:(unsigned long long)arg2 start:(unsigned long long)arg3 firstTimeStepDate:(id)arg4;
- (id)process:(id)arg1;
- (unsigned long long)sequenceIndexFromDate:(id)arg1 firstTimeStepDate:(id)arg2;
- (unsigned long long)sequenceLengthFrom:(unsigned long long)arg1;
- (unsigned long long)startLocationIndex:(unsigned long long)arg1;

@end

