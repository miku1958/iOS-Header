//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class CLLocation, NSDate, NSMapTable, NSNumber, RTLocationAwarenessManagerConfig, RTLocationAwarenessMetrics, RTLocationManager, RTMetricManager, RTMotionActivityManager;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface RTLocationAwarenessManager : NSObject
{
    RTLocationAwarenessMetrics *_metrics;
    RTMetricManager *_metricManager;
    CLLocation *_lastLocationAnyPositive;
    CLLocation *_lastLocationLessThan200m;
    CLLocation *_lastLocationLessThan55m;
    CLLocation *_lastLocationLessThan20m;
    CLLocation *_lastLocationLessThan10m;
    NSObject<OS_dispatch_queue> *_queue;
    RTLocationAwarenessManagerConfig *_config;
    struct NSMapTable *_requesterToHeartbeatBucket;
    struct NSMapTable *_heartbeatBucketToRequesters;
    RTLocationManager *_locationManager;
    NSObject<OS_dispatch_source> *_heartbeatTimer;
    NSObject<OS_dispatch_source> *_restTimer;
    NSDate *_activeOnset;
    NSNumber *_minHeartbeatBucket;
    CLLocation *_lastValidLocation;
    RTMotionActivityManager *_motionActivityManager;
    NSDate *_stationaryStartTimestamp;
}

@property (copy, nonatomic) NSDate *activeOnset; // @synthesize activeOnset=_activeOnset;
@property (readonly, nonatomic) RTLocationAwarenessManagerConfig *config; // @synthesize config=_config;
@property (strong, nonatomic) NSMapTable *heartbeatBucketToRequesters; // @synthesize heartbeatBucketToRequesters=_heartbeatBucketToRequesters;
@property (strong, nonatomic) NSObject<OS_dispatch_source> *heartbeatTimer; // @synthesize heartbeatTimer=_heartbeatTimer;
@property (strong, nonatomic) CLLocation *lastLocationAnyPositive; // @synthesize lastLocationAnyPositive=_lastLocationAnyPositive;
@property (strong, nonatomic) CLLocation *lastLocationLessThan10m; // @synthesize lastLocationLessThan10m=_lastLocationLessThan10m;
@property (strong, nonatomic) CLLocation *lastLocationLessThan200m; // @synthesize lastLocationLessThan200m=_lastLocationLessThan200m;
@property (strong, nonatomic) CLLocation *lastLocationLessThan20m; // @synthesize lastLocationLessThan20m=_lastLocationLessThan20m;
@property (strong, nonatomic) CLLocation *lastLocationLessThan55m; // @synthesize lastLocationLessThan55m=_lastLocationLessThan55m;
@property (strong, nonatomic) CLLocation *lastValidLocation; // @synthesize lastValidLocation=_lastValidLocation;
@property (strong, nonatomic) RTLocationManager *locationManager; // @synthesize locationManager=_locationManager;
@property (strong, nonatomic) RTMetricManager *metricManager; // @synthesize metricManager=_metricManager;
@property (strong, nonatomic) RTLocationAwarenessMetrics *metrics; // @synthesize metrics=_metrics;
@property (strong, nonatomic) NSNumber *minHeartbeatBucket; // @synthesize minHeartbeatBucket=_minHeartbeatBucket;
@property (strong, nonatomic) RTMotionActivityManager *motionActivityManager; // @synthesize motionActivityManager=_motionActivityManager;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property (strong, nonatomic) NSMapTable *requesterToHeartbeatBucket; // @synthesize requesterToHeartbeatBucket=_requesterToHeartbeatBucket;
@property (strong, nonatomic) NSObject<OS_dispatch_source> *restTimer; // @synthesize restTimer=_restTimer;
@property (copy, nonatomic) NSDate *stationaryStartTimestamp; // @synthesize stationaryStartTimestamp=_stationaryStartTimestamp;

+ (id)createDefaultDispatchTimerWithQueue:(id)arg1;
+ (void)invalidateDispatchTimer:(id)arg1;
+ (long long)localHourFromTimestamp:(id)arg1;
+ (void)pauseDispatchTimer:(id)arg1;
+ (id)sharedInstance;
- (void).cxx_destruct;
- (void)_shutdown;
- (BOOL)addLocationHeartbeatRequester:(id)arg1 withInterval:(double)arg2 error:(id *)arg3;
- (void)adjustHeartbeatTimer;
- (void)considerRequestingForLocation;
- (void)considerSubmittingCurrentMetrics;
- (id)defaultQueue;
- (id)heartbeatBucketForInterval:(double)arg1;
- (void)incrementHeartbeatActiveRequestCountForTimestamp:(id)arg1;
- (void)incrementHeartbeatTimerFiringCountForTimestamp:(id)arg1;
- (void)incrementHeartbeatValidLocationCountForTimestamp:(id)arg1;
- (id)init;
- (id)initWithLocationManager:(id)arg1;
- (id)initWithQueue:(id)arg1 locationManager:(id)arg2;
- (id)initWithQueue:(id)arg1 locationManager:(id)arg2 config:(id)arg3;
- (id)initWithQueue:(id)arg1 locationManager:(id)arg2 config:(id)arg3 metricManager:(id)arg4;
- (id)initWithQueue:(id)arg1 locationManager:(id)arg2 config:(id)arg3 metricManager:(id)arg4 motionActivityManager:(id)arg5;
- (double)intervalForHeartbeatBucket:(id)arg1;
- (double)metricAge;
- (double)nextFiringDelayWithHeartbeatInterval:(double)arg1 starvingDuration:(double)arg2;
- (void)onHeartbeat;
- (void)onLeechedLocationNotification:(id)arg1;
- (void)onMotionActivityManagerNotificationActivityNotification:(id)arg1;
- (void)onNoOpLocationNotification:(id)arg1;
- (void)onRest;
- (void)removeLocationHeartbeatRequester:(id)arg1;
- (void)resetOneShotDispatchTimer:(id)arg1 withStart:(unsigned long long)arg2 eventHandler:(CDUnknownBlockType)arg3;
- (void)shutdown;
- (double)starvingDurationTillNow;
- (void)updateLocationAwarenessHistogramsWithLocations:(id)arg1;
- (void)updateMinHeartbeatBucket;
- (id)updateWithLocation:(id)arg1 oneIntervalHistogram:(id)arg2 lastLocation:(id)arg3;
- (BOOL)validInterval:(double)arg1;
- (BOOL)validLocation:(id)arg1;

@end

