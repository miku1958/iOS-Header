//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <coreroutine/RTDaemonClientRegistrarScenarioTriggerProtocol-Protocol.h>
#import <coreroutine/RTDaemonClientRegistrarVehicleEventProtocol-Protocol.h>
#import <coreroutine/RTDaemonProtocol-Protocol.h>

@class NSMutableDictionary, NSSet, NSString, NSXPCConnection, RTAccountManager, RTAssetManager, RTAuthorizationManager, RTDaemonClientRegistrarScenarioTrigger, RTDaemonClientRegistrarVehicleEvent, RTDeviceLocationPredictor, RTDiagnostics, RTEventAgentManager, RTEventModelProvider, RTFingerprintManager, RTLearnedLocationManager, RTLocationManager, RTLocationStore, RTMapServiceManager, RTMetricManager, RTPlaceInferenceManager, RTPurgeManager, RTScenarioTriggerManager, RTVehicleLocationProvider, RTVisitManager, RTWiFiManager;
@protocol OS_dispatch_queue, RTClientListenerProtocol;

@interface RTDaemonClient : NSObject <RTDaemonClientRegistrarVehicleEventProtocol, RTDaemonClientRegistrarScenarioTriggerProtocol, RTDaemonProtocol>
{
    BOOL _enabled;
    BOOL _supported;
    BOOL _monitorVisits;
    BOOL _leechVisits;
    BOOL _leechLowConfidenceVisits;
    int _processIdentifier;
    NSXPCConnection *_xpcConnection;
    NSString *_restorationIdentifier;
    id<RTClientListenerProtocol> _clientManagerDelegate;
    NSMutableDictionary *_restorationData;
    NSObject<OS_dispatch_queue> *_queue;
    RTDaemonClientRegistrarVehicleEvent *_vehicleEventRegistrar;
    RTDaemonClientRegistrarScenarioTrigger *_scenarioTriggerRegistrar;
    RTAccountManager *_accountManager;
    RTAssetManager *_assetManager;
    RTAuthorizationManager *_authorizationManager;
    RTDeviceLocationPredictor *_deviceLocationPredictor;
    RTDiagnostics *_diagnostics;
    RTEventAgentManager *_eventAgentManager;
    RTEventModelProvider *_eventModelProvider;
    RTFingerprintManager *_fingerprintManager;
    RTLearnedLocationManager *_learnedLocationManager;
    RTLocationManager *_locationManager;
    RTLocationStore *_locationStore;
    RTMapServiceManager *_mapServiceManager;
    RTMetricManager *_metricManager;
    RTPlaceInferenceManager *_placeInferenceManager;
    RTPurgeManager *_purgeManager;
    RTScenarioTriggerManager *_scenarioTriggerManager;
    RTVehicleLocationProvider *_vehicleLocationProvider;
    RTVisitManager *_visitManager;
    RTWiFiManager *_wifiManager;
    NSSet *_clientsAuthorizedForRestrictedSPIs;
    NSSet *_systemExecutablesAuthorizedForRestrictedSPIs;
    NSString *_executablePath;
    NSString *_signingIdentifier;
    NSString *_bundleIdentifier;
}

@property (strong, nonatomic) RTAccountManager *accountManager; // @synthesize accountManager=_accountManager;
@property (strong, nonatomic) RTAssetManager *assetManager; // @synthesize assetManager=_assetManager;
@property (strong, nonatomic) RTAuthorizationManager *authorizationManager; // @synthesize authorizationManager=_authorizationManager;
@property (copy, nonatomic) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property (weak, nonatomic) id<RTClientListenerProtocol> clientManagerDelegate; // @synthesize clientManagerDelegate=_clientManagerDelegate;
@property (strong, nonatomic) NSSet *clientsAuthorizedForRestrictedSPIs; // @synthesize clientsAuthorizedForRestrictedSPIs=_clientsAuthorizedForRestrictedSPIs;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (strong, nonatomic) RTDeviceLocationPredictor *deviceLocationPredictor; // @synthesize deviceLocationPredictor=_deviceLocationPredictor;
@property (strong, nonatomic) RTDiagnostics *diagnostics; // @synthesize diagnostics=_diagnostics;
@property BOOL enabled; // @synthesize enabled=_enabled;
@property (strong, nonatomic) RTEventAgentManager *eventAgentManager; // @synthesize eventAgentManager=_eventAgentManager;
@property (strong, nonatomic) RTEventModelProvider *eventModelProvider; // @synthesize eventModelProvider=_eventModelProvider;
@property (copy, nonatomic) NSString *executablePath; // @synthesize executablePath=_executablePath;
@property (strong, nonatomic) RTFingerprintManager *fingerprintManager; // @synthesize fingerprintManager=_fingerprintManager;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) RTLearnedLocationManager *learnedLocationManager; // @synthesize learnedLocationManager=_learnedLocationManager;
@property (nonatomic) BOOL leechLowConfidenceVisits; // @synthesize leechLowConfidenceVisits=_leechLowConfidenceVisits;
@property (nonatomic) BOOL leechVisits; // @synthesize leechVisits=_leechVisits;
@property (strong, nonatomic) RTLocationManager *locationManager; // @synthesize locationManager=_locationManager;
@property (strong, nonatomic) RTLocationStore *locationStore; // @synthesize locationStore=_locationStore;
@property (strong, nonatomic) RTMapServiceManager *mapServiceManager; // @synthesize mapServiceManager=_mapServiceManager;
@property (strong, nonatomic) RTMetricManager *metricManager; // @synthesize metricManager=_metricManager;
@property (nonatomic) BOOL monitorVisits; // @synthesize monitorVisits=_monitorVisits;
@property (strong, nonatomic) RTPlaceInferenceManager *placeInferenceManager; // @synthesize placeInferenceManager=_placeInferenceManager;
@property (nonatomic) int processIdentifier; // @synthesize processIdentifier=_processIdentifier;
@property (strong, nonatomic) RTPurgeManager *purgeManager; // @synthesize purgeManager=_purgeManager;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property (strong, nonatomic) NSMutableDictionary *restorationData; // @synthesize restorationData=_restorationData;
@property (copy, nonatomic) NSString *restorationIdentifier; // @synthesize restorationIdentifier=_restorationIdentifier;
@property (strong, nonatomic) RTScenarioTriggerManager *scenarioTriggerManager; // @synthesize scenarioTriggerManager=_scenarioTriggerManager;
@property (strong, nonatomic) RTDaemonClientRegistrarScenarioTrigger *scenarioTriggerRegistrar; // @synthesize scenarioTriggerRegistrar=_scenarioTriggerRegistrar;
@property (copy, nonatomic) NSString *signingIdentifier; // @synthesize signingIdentifier=_signingIdentifier;
@property (readonly) Class superclass;
@property (nonatomic) BOOL supported; // @synthesize supported=_supported;
@property (strong, nonatomic) NSSet *systemExecutablesAuthorizedForRestrictedSPIs; // @synthesize systemExecutablesAuthorizedForRestrictedSPIs=_systemExecutablesAuthorizedForRestrictedSPIs;
@property (strong, nonatomic) RTDaemonClientRegistrarVehicleEvent *vehicleEventRegistrar; // @synthesize vehicleEventRegistrar=_vehicleEventRegistrar;
@property (strong, nonatomic) RTVehicleLocationProvider *vehicleLocationProvider; // @synthesize vehicleLocationProvider=_vehicleLocationProvider;
@property (strong, nonatomic) RTVisitManager *visitManager; // @synthesize visitManager=_visitManager;
@property (strong, nonatomic) RTWiFiManager *wifiManager; // @synthesize wifiManager=_wifiManager;
@property (strong, nonatomic) NSXPCConnection *xpcConnection; // @synthesize xpcConnection=_xpcConnection;

- (void).cxx_destruct;
- (void)_onVisitManagerNotification:(id)arg1;
- (id)_preflightClientConnection:(id)arg1 withEntitlements:(id)arg2;
- (void)_startMonitoringVehicleEvents;
- (BOOL)_verifyClientUsingRestrictedSPIs:(id *)arg1;
- (void)addLocationOfInterestOfType:(long long)arg1 mapItemStorage:(id)arg2 customLabel:(id)arg3 reply:(CDUnknownBlockType)arg4;
- (void)clearAllVehicleEventsWithReply:(CDUnknownBlockType)arg1;
- (void)clearRoutineWithReply:(CDUnknownBlockType)arg1;
- (void)engageInVehicleEventWithIdentifier:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)extendLifetimeOfVisitsWithIdentifiers:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)fetchAllLocationsOfInterestForSettingsWithReply:(CDUnknownBlockType)arg1;
- (void)fetchAutomaticVehicleEventDetectionSupportedWithReply:(CDUnknownBlockType)arg1;
- (void)fetchCloudSyncAuthorizationStateWithReply:(CDUnknownBlockType)arg1;
- (void)fetchCurrentPredictedLocationsOfInterestLookingBack:(double)arg1 lookingAhead:(double)arg2 reply:(CDUnknownBlockType)arg3;
- (void)fetchLastVehicleEventsWithReply:(CDUnknownBlockType)arg1;
- (void)fetchLocationOfInterestAtLocation:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)fetchLocationOfInterestWithIdentifier:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)fetchLocationsOfInterestAssociatedToIdentifier:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)fetchLocationsOfInterestOfType:(long long)arg1 reply:(CDUnknownBlockType)arg2;
- (void)fetchLocationsOfInterestVisitedBetweenStartDate:(id)arg1 endDate:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)fetchLocationsOfInterestWithinDistance:(double)arg1 ofLocation:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)fetchMonitoredScenarioTriggerTypesWithReply:(CDUnknownBlockType)arg1;
- (void)fetchNextPredictedLocationsOfInterestFromLocation:(id)arg1 startDate:(id)arg2 timeInterval:(double)arg3 reply:(CDUnknownBlockType)arg4;
- (void)fetchPathToDiagnosticFilesWithReply:(CDUnknownBlockType)arg1;
- (void)fetchPlaceInferencesWithOptions:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)fetchPredictedExitDatesFromLocation:(id)arg1 onDate:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)fetchPredictedLocationsOfInterestAssociatedToTitle:(id)arg1 location:(id)arg2 calendarIdentifier:(id)arg3 reply:(CDUnknownBlockType)arg4;
- (void)fetchPredictedLocationsOfInterestBetweenStartDate:(id)arg1 endDate:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)fetchPredictedLocationsOfInterestOnDate:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)fetchRoutineEnabledWithReply:(CDUnknownBlockType)arg1;
- (void)fetchRoutineModeFromLocation:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)fetchStoredLocationsWithContext:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)fetchStoredVisitsWithOptions:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)fetchTransitionsBetweenStartDate:(id)arg1 endDate:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (BOOL)hasEntitlement:(id)arg1;
- (BOOL)hasReasonToOutliveClientConnection;
- (id)init;
- (id)initWithQueue:(id)arg1 restorationData:(id)arg2 accountManager:(id)arg3 assetManager:(id)arg4 authorizationManager:(id)arg5 deviceLocationPredictor:(id)arg6 diagnostics:(id)arg7 eventAgentManager:(id)arg8 eventModelProvider:(id)arg9 fingerprintManager:(id)arg10 learnedLocationManager:(id)arg11 locationManager:(id)arg12 locationStore:(id)arg13 mapServiceManager:(id)arg14 metricManager:(id)arg15 placeInferenceManager:(id)arg16 purgeManager:(id)arg17 scenarioTriggerManager:(id)arg18 vehicleLocationProvider:(id)arg19 visitManager:(id)arg20 wifiManager:(id)arg21;
- (void)launchClient;
- (void)onRoutineEnabled:(id)arg1;
- (void)onVisitManagerNotification:(id)arg1;
- (void)performBluePOIQueryLookingBack:(double)arg1 lookingAhead:(double)arg2 reply:(CDUnknownBlockType)arg3;
- (void)removeLocationOfInterestWithIdentifier:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)removeVisitWithIdentifier:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)restore;
- (void)scenarioTriggerRegistrar:(id)arg1 didReceiveScenarioTriggers:(id)arg2 error:(id)arg3;
- (void)setRoutineEnabled:(BOOL)arg1 reply:(CDUnknownBlockType)arg2;
- (void)shutdown;
- (void)startLeechingLowConfidenceVisitsWithReply:(CDUnknownBlockType)arg1;
- (void)startLeechingVisitsWithReply:(CDUnknownBlockType)arg1;
- (void)startMonitoringScenarioTriggerOfType:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;
- (void)startMonitoringVehicleEventsWithReply:(CDUnknownBlockType)arg1;
- (void)startMonitoringVisitsWithReply:(CDUnknownBlockType)arg1;
- (void)stopLeechingLowConfidenceVisitsWithReply:(CDUnknownBlockType)arg1;
- (void)stopLeechingVisitsWithReply:(CDUnknownBlockType)arg1;
- (void)stopMonitoringScenarioTriggerOfType:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;
- (void)stopMonitoringVehicleEventsWithReply:(CDUnknownBlockType)arg1;
- (void)stopMonitoringVisitsWithReply:(CDUnknownBlockType)arg1;
- (void)updateCloudSyncProvisionedForAccount:(BOOL)arg1 reply:(CDUnknownBlockType)arg2;
- (void)updateLocationOfInterestWithIdentifier:(id)arg1 customLabel:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)updateLocationOfInterestWithIdentifier:(id)arg1 mapItemStorage:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)updateLocationOfInterestWithIdentifier:(id)arg1 type:(long long)arg2 customLabel:(id)arg3 reply:(CDUnknownBlockType)arg4;
- (void)updateLocationOfInterestWithIdentifier:(id)arg1 type:(long long)arg2 mapItemStorage:(id)arg3 customLabel:(id)arg4 reply:(CDUnknownBlockType)arg5;
- (void)updateLocationOfInterestWithIdentifier:(id)arg1 type:(long long)arg2 reply:(CDUnknownBlockType)arg3;
- (void)updateVehicleEventWithIdentifier:(id)arg1 geoMapItem:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)updateVehicleEventWithIdentifier:(id)arg1 location:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)updateVehicleEventWithIdentifier:(id)arg1 notes:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)updateVehicleEventWithIdentifier:(id)arg1 photo:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)userInteractionWithPredictedLocationOfInterest:(id)arg1 interaction:(unsigned long long)arg2 feedback:(id)arg3 geoMapItem:(id)arg4 reply:(CDUnknownBlockType)arg5;
- (void)vehicleEventAtLocation:(id)arg1 notes:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)vehicleEventRegistrar:(id)arg1 didReceiveVehicleEvents:(id)arg2 error:(id)arg3;

@end

