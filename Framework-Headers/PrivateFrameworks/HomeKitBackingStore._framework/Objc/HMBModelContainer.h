//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <HMFoundation/HMFObject.h>

#import <HomeKitBackingStore/NSCopying-Protocol.h>
#import <HomeKitBackingStore/NSMutableCopying-Protocol.h>

@class HMBLocalZone, HMFUnfairLock, HMFVersion, NSMapTable;
@protocol HMBMirrorProtocol;

@interface HMBModelContainer : HMFObject <NSMutableCopying, NSCopying>
{
    HMFVersion *_legacyDataVersion;
    HMFVersion *_dataVersion;
    HMFUnfairLock *_propertyLock;
    NSMapTable *_queryFieldsCache;
    HMBLocalZone *_localZone;
    id<HMBMirrorProtocol> _mirror;
    NSMapTable *_classToNameTransform;
    NSMapTable *_nameToClassTransform;
    NSMapTable *_objectPropertyHashLookup;
    NSMapTable *_classReadOnlyVersionCache;
    NSMapTable *_classUnavailableVersionCache;
}

@property (strong, nonatomic) NSMapTable *classReadOnlyVersionCache; // @synthesize classReadOnlyVersionCache=_classReadOnlyVersionCache;
@property (copy, nonatomic) NSMapTable *classToNameTransform; // @synthesize classToNameTransform=_classToNameTransform;
@property (strong, nonatomic) NSMapTable *classUnavailableVersionCache; // @synthesize classUnavailableVersionCache=_classUnavailableVersionCache;
@property (readonly, copy, nonatomic) HMFVersion *dataVersion; // @synthesize dataVersion=_dataVersion;
@property (readonly, copy, nonatomic) HMFVersion *legacyDataVersion; // @synthesize legacyDataVersion=_legacyDataVersion;
@property (readonly, weak, nonatomic) HMBLocalZone *localZone; // @synthesize localZone=_localZone;
@property (readonly, weak, nonatomic) id<HMBMirrorProtocol> mirror; // @synthesize mirror=_mirror;
@property (copy, nonatomic) NSMapTable *nameToClassTransform; // @synthesize nameToClassTransform=_nameToClassTransform;
@property (strong, nonatomic) NSMapTable *objectPropertyHashLookup; // @synthesize objectPropertyHashLookup=_objectPropertyHashLookup;
@property (readonly, nonatomic) HMFUnfairLock *propertyLock; // @synthesize propertyLock=_propertyLock;
@property (readonly, nonatomic) NSMapTable *queryFieldsCache; // @synthesize queryFieldsCache=_queryFieldsCache;

+ (id)allowedTypes;
+ (id)decodeAsNSDictionary:(id)arg1 error:(id *)arg2;
+ (id)decodeAsOPACK:(id)arg1 error:(id *)arg2;
+ (id)encodeAsNSDictionary:(id)arg1 error:(id *)arg2;
+ (id)encodeAsOPACK:(id)arg1 error:(id *)arg2;
+ (id)internalAllowedTypes;
- (void).cxx_destruct;
- (unsigned long long)bestModelEncodingForStorageLocation:(unsigned long long)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)dataFromModel:(id)arg1 encoding:(unsigned long long)arg2 storageLocation:(unsigned long long)arg3 updatedModelIDs:(id)arg4 error:(id *)arg5;
- (id)init;
- (id)initWithDataVersion:(id)arg1 legacyDataVersion:(id)arg2;
- (Class)modelClassForTypeName:(id)arg1;
- (id)modelFromData:(id)arg1 encoding:(unsigned long long)arg2 storageLocation:(unsigned long long)arg3 error:(id *)arg4;
- (id)modelFromData:(id)arg1 encoding:(unsigned long long)arg2 storageLocation:(unsigned long long)arg3 type:(id)arg4 error:(id *)arg5;
- (id)modelFromDictionary:(id)arg1 storageLocation:(unsigned long long)arg2 typeName:(id)arg3 error:(id *)arg4;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)readOnlyVersionsForModelClass:(Class)arg1;
- (id)schemaHashForModel:(id)arg1;
- (id)typeNameForModelClass:(Class)arg1;
- (id)unavailableVersionsForModelClass:(Class)arg1;
- (void)updateLocalZone:(id)arg1;
- (void)updateMirror:(id)arg1;

@end

