//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <HMFoundation/HMFObject.h>

#import <HomeKitBackingStore/APSConnectionDelegate-Protocol.h>
#import <HomeKitBackingStore/HMFLogging-Protocol.h>

@class APSConnection, CKContainer, CKContainerID, CKDatabase, HMBCloudDatabaseConfiguration, HMBCloudDatabaseStateModel, HMBLocalDatabase, HMBLocalZone, HMFUnfairLock, NAFuture, NSMutableDictionary, NSSet, NSString;
@protocol HMBCloudDatabaseDelegate;

@interface HMBCloudDatabase : HMFObject <APSConnectionDelegate, HMFLogging>
{
    id<HMBCloudDatabaseDelegate> _delegate;
    HMBCloudDatabaseConfiguration *_configuration;
    HMBLocalDatabase *_localDatabase;
    HMBLocalZone *_stateZone;
    HMFUnfairLock *_propertyLock;
    HMBCloudDatabaseStateModel *_privateDatabaseState;
    HMBCloudDatabaseStateModel *_sharedDatabaseState;
    HMBCloudDatabaseStateModel *_publicDatabaseState;
    NSMutableDictionary *_zoneStateByZoneID;
    CKContainer *_container;
    CKDatabase *_sharedDatabase;
    CKDatabase *_privateDatabase;
    CKDatabase *_publicDatabase;
    APSConnection *_apsConnection;
    NAFuture *_initialCloudSyncFuture;
    NAFuture *_manateeAvailabilityFuture;
}

@property (strong, nonatomic) APSConnection *apsConnection; // @synthesize apsConnection=_apsConnection;
@property (readonly, copy, nonatomic) HMBCloudDatabaseConfiguration *configuration; // @synthesize configuration=_configuration;
@property (readonly, nonatomic) CKContainer *container; // @synthesize container=_container;
@property (readonly, nonatomic) CKContainerID *containerID;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<HMBCloudDatabaseDelegate> delegate; // @synthesize delegate=_delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) NAFuture *initialCloudSyncFuture; // @synthesize initialCloudSyncFuture=_initialCloudSyncFuture;
@property (readonly, nonatomic) HMBLocalDatabase *localDatabase; // @synthesize localDatabase=_localDatabase;
@property (strong, nonatomic) NAFuture *manateeAvailabilityFuture; // @synthesize manateeAvailabilityFuture=_manateeAvailabilityFuture;
@property (readonly, nonatomic) CKDatabase *privateDatabase; // @synthesize privateDatabase=_privateDatabase;
@property (strong, nonatomic) HMBCloudDatabaseStateModel *privateDatabaseState; // @synthesize privateDatabaseState=_privateDatabaseState;
@property (readonly, nonatomic) NSSet *privateZoneIDs;
@property (readonly, nonatomic) HMFUnfairLock *propertyLock; // @synthesize propertyLock=_propertyLock;
@property (readonly, nonatomic) CKDatabase *publicDatabase; // @synthesize publicDatabase=_publicDatabase;
@property (strong, nonatomic) HMBCloudDatabaseStateModel *publicDatabaseState; // @synthesize publicDatabaseState=_publicDatabaseState;
@property (readonly, nonatomic) NSSet *publicZoneIDs;
@property (readonly, nonatomic) CKDatabase *sharedDatabase; // @synthesize sharedDatabase=_sharedDatabase;
@property (strong, nonatomic) HMBCloudDatabaseStateModel *sharedDatabaseState; // @synthesize sharedDatabaseState=_sharedDatabaseState;
@property (readonly, nonatomic) NSSet *sharedZoneIDs;
@property (readonly, nonatomic) HMBLocalZone *stateZone; // @synthesize stateZone=_stateZone;
@property (readonly) Class superclass;
@property (readonly, nonatomic) NSMutableDictionary *zoneStateByZoneID; // @synthesize zoneStateByZoneID=_zoneStateByZoneID;

+ (id)extantDatabases;
+ (id)extantDatabasesLock;
+ (id)logCategory;
- (void).cxx_destruct;
- (id)_zonesWithScope:(long long)arg1;
- (id)acceptInvitation:(id)arg1;
- (id)acceptInvitations:(id)arg1;
- (void)addContainerOperation:(id)arg1;
- (void)addDatabaseOperation:(id)arg1 forScope:(long long)arg2;
- (id)attributeDescriptions;
- (void)connection:(id)arg1 didReceiveIncomingMessage:(id)arg2;
- (void)connection:(id)arg1 didReceivePublicToken:(id)arg2;
- (void)connection:(id)arg1 didReceiveToken:(id)arg2 forTopic:(id)arg3 identifier:(id)arg4;
- (id)createPrivateZoneWithID:(id)arg1;
- (id)databaseStateForDatabaseScope:(long long)arg1;
- (id)declineInvitation:(id)arg1;
- (id)fetchParticipants:(id)arg1;
- (id)fetchShareMetadataForInvitations:(id)arg1;
- (id)fetchSubscriptionsOn:(id)arg1;
- (id)fetchUserRecordOn:(id)arg1;
- (id)fetchZones:(BOOL)arg1;
- (id)fetchZonesOn:(id)arg1;
- (void)handleAccountChangedNotification:(id)arg1;
- (void)handleCreatedZoneIDs:(id)arg1;
- (void)handleRemovedZoneIDs:(id)arg1 userInitiated:(BOOL)arg2;
- (void)handleUpdatedZonesIDs:(id)arg1;
- (id)initWithLocalDatabase:(id)arg1 configuration:(id)arg2;
- (id)initWithLocalDatabase:(id)arg1 stateZone:(id)arg2 container:(id)arg3 configuration:(id)arg4 databaseStateModelsByScope:(id)arg5 zoneStateModels:(id)arg6;
- (id)logIdentifier;
- (id)openExistingPrivateZoneWithID:(id)arg1 shouldRebuildOnManateeKeyLoss:(BOOL)arg2 delegate:(id)arg3 error:(id *)arg4;
- (id)openExistingSharedZoneWithID:(id)arg1 delegate:(id)arg2 error:(id *)arg3;
- (id)openOrCreatePrivateZoneWithID:(id)arg1 shouldRebuildOnManateeKeyLoss:(BOOL)arg2 delegate:(id)arg3 error:(id *)arg4;
- (id)operationConfigurationWithProcessingOptions:(id)arg1;
- (id)performAdministrativeFetchForAllDatabases:(BOOL)arg1;
- (id)performAdministrativeFetchForDatabaseScope:(long long)arg1 withForce:(BOOL)arg2;
- (id)performCloudPullForScope:(long long)arg1;
- (id)performInitialCloudSync;
- (id)pushSubscriptionsForDatabase:(id)arg1 subscriptionsToSave:(id)arg2 subscriptionIDsToRemove:(id)arg3;
- (id)registerPrivateSubscriptionForExternalRecordType:(id)arg1;
- (id)registerSharedSubscriptionForExternalRecordType:(id)arg1;
- (id)registerSubscription:(id)arg1 forZoneWithID:(id)arg2;
- (id)registerSubscriptionForExternalRecordType:(id)arg1 databaseState:(id)arg2;
- (void)removeStateForZoneID:(id)arg1;
- (id)removeZoneWithID:(id)arg1 removeState:(BOOL)arg2;
- (BOOL)retryCloudKitOperationAfterError:(id)arg1 retryBlock:(CDUnknownBlockType)arg2;
- (id)serverChangeTokenForZoneWithID:(id)arg1;
- (id)shutdown;
- (id)subscriptionIDForCloudID:(id)arg1 recordType:(id)arg2;
- (id)subscriptionIDForZoneID:(id)arg1 recordType:(id)arg2;
- (id)subscriptionsForZoneWithID:(id)arg1;
- (id)unregisterPrivateSubscriptionForExternalRecordType:(id)arg1;
- (id)unregisterSharedSubscriptionForExternalRecordType:(id)arg1;
- (id)unregisterSubscription:(id)arg1 forZoneWithID:(id)arg2;
- (id)unregisterSubscriptionForExternalRecordType:(id)arg1 databaseState:(id)arg2;
- (void)updateRebuildStatus:(id)arg1 forZoneWithID:(id)arg2;
- (void)updateServerChangeToken:(id)arg1 forDatabaseWithScope:(long long)arg2;
- (void)updateServerChangeToken:(id)arg1 forZoneWithID:(id)arg2;
- (id)waitForManateeAvailability;
- (id)waitForManateeAvailabilityAndRecheckIfAlreadyAvailable;
- (id)waitForManateeAvailabilityAndRecheckIfAlreadyAvailable:(BOOL)arg1;

@end

