//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <ReminderKit/REMChangeTrackingProvider-Protocol.h>

@class REMStoreContainerToken, _REMInProgressSaveRequestsContainer;
@protocol REMDaemonController;

@interface REMStore : NSObject <REMChangeTrackingProvider>
{
    BOOL _assertOnMainThreadFetches;
    struct os_unfair_lock_s _lock;
    REMStoreContainerToken *_storeContainerToken;
    _REMInProgressSaveRequestsContainer *_l_inProgressSaveRequestsContainer;
    id<REMDaemonController> _daemonController;
    unsigned long long _mode;
    REMStore *_nonUserInteractiveStore;
}

@property (nonatomic) BOOL assertOnMainThreadFetches; // @synthesize assertOnMainThreadFetches=_assertOnMainThreadFetches;
@property (strong, nonatomic) id<REMDaemonController> daemonController; // @synthesize daemonController=_daemonController;
@property (readonly, nonatomic) _REMInProgressSaveRequestsContainer *l_inProgressSaveRequestsContainer; // @synthesize l_inProgressSaveRequestsContainer=_l_inProgressSaveRequestsContainer;
@property (readonly, nonatomic) struct os_unfair_lock_s lock; // @synthesize lock=_lock;
@property (nonatomic) unsigned long long mode; // @synthesize mode=_mode;
@property (strong, nonatomic) REMStore *nonUserInteractiveStore; // @synthesize nonUserInteractiveStore=_nonUserInteractiveStore;
@property (readonly, nonatomic) REMStoreContainerToken *storeContainerToken; // @synthesize storeContainerToken=_storeContainerToken;

+ (BOOL)_shouldNotifyReminddOfInteractionWithPeople;
+ (id)createIsolatedStoreContainerWithError:(id *)arg1;
+ (BOOL)dataaccessDaemonStopSyncingReminders;
+ (BOOL)destroyIsolatedStoreContainerWithToken:(id)arg1 error:(id *)arg2;
+ (void)initialize;
+ (BOOL)isEventKitSyncEnabledForReminderKit;
+ (BOOL)notificationsEnabled;
+ (void)notifyOfInteractionWithPeople:(id)arg1;
+ (void)notifyOfUserInterestInSiriSuggestedReminder:(id)arg1;
+ (BOOL)siriShouldRouteIntentsToNewRemindersApp;
+ (id)storeDidChangeNotificationName;
- (void).cxx_destruct;
- (void)_enumerateAllListsIncludingGroups:(BOOL)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)_incrementStoreGeneration;
- (BOOL)_isUserInteractiveStore;
- (void)_respondToCalDAVSharedList:(id)arg1 withResponse:(long long)arg2 queue:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_saveAccountChangeItems:(id)arg1 listChangeItems:(id)arg2 reminderChangeItems:(id)arg3 author:(id)arg4 replicaManagerProvider:(id)arg5 synchronously:(BOOL)arg6 performer:(id)arg7 completion:(CDUnknownBlockType)arg8;
- (void)_triggerSyncWithReason:(id)arg1 forcingCloudKitReload:(BOOL)arg2 discretionary:(BOOL)arg3 completion:(CDUnknownBlockType)arg4;
- (id)_withInProgressSaveRequestContainer:(CDUnknownBlockType)arg1;
- (id)_xpcSyncStorePerformerWithReason:(id)arg1 errorHandler:(CDUnknownBlockType)arg2;
- (void)acceptCalDAVSharedList:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)acceptShareWithMetadata:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)compressedDistributedEvaluationDataWithOptions:(id)arg1 error:(id *)arg2;
- (unsigned long long)countForFetchRequest:(id)arg1 error:(id *)arg2;
- (id)createShareForListWithID:(id)arg1 error:(id *)arg2;
- (id)debugDescription;
- (void)deleteAccountWithAccountID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)description;
- (void)enumerateAllGroupsAndListsWithBlock:(CDUnknownBlockType)arg1;
- (void)enumerateAllListsWithBlock:(CDUnknownBlockType)arg1;
- (void)enumerateAllRemindersWithBlock:(CDUnknownBlockType)arg1;
- (BOOL)everConnectedToCar;
- (id)executeFetchRequest:(id)arg1 error:(id *)arg2;
- (id)fetchAccountWithExternalIdentifier:(id)arg1 error:(id *)arg2;
- (id)fetchAccountWithObjectID:(id)arg1 error:(id *)arg2;
- (id)fetchAccountsForDumpingWithError:(id *)arg1;
- (id)fetchAccountsIncludingInactive:(BOOL)arg1 error:(id *)arg2;
- (id)fetchAccountsWithError:(id *)arg1;
- (id)fetchAccountsWithExternalIdentifiers:(id)arg1 error:(id *)arg2;
- (id)fetchAccountsWithObjectIDs:(id)arg1 error:(id *)arg2;
- (id)fetchAllListsWithExternalIdentifier:(id)arg1 error:(id *)arg2;
- (id)fetchAllRemindersWithExternalIdentifier:(id)arg1 error:(id *)arg2;
- (id)fetchCompletedRemindersForEventKitBridgingWithCompletionDateFrom:(id)arg1 to:(id)arg2 withListIDs:(id)arg3 error:(id *)arg4;
- (id)fetchDefaultAccountWithError:(id *)arg1;
- (id)fetchDefaultListWithError:(id *)arg1;
- (id)fetchEligibleDefaultListsWithError:(id *)arg1;
- (id)fetchIncompleteRemindersForEventKitBridgingWithDueDateFrom:(id)arg1 to:(id)arg2 withListIDs:(id)arg3 error:(id *)arg4;
- (id)fetchListIncludingMarkedForDeleteWithObjectID:(id)arg1 error:(id *)arg2;
- (id)fetchListIncludingSpecialContainerWithObjectID:(id)arg1 error:(id *)arg2;
- (id)fetchListWithObjectID:(id)arg1 error:(id *)arg2;
- (id)fetchListsForEventKitBridgingWithError:(id *)arg1;
- (id)fetchListsIncludingSpecialContainersInAccount:(id)arg1 error:(id *)arg2;
- (id)fetchListsWithObjectIDs:(id)arg1 error:(id *)arg2;
- (id)fetchReminderIncludingMarkedForDeleteWithObjectID:(id)arg1 error:(id *)arg2;
- (id)fetchReminderWithDACalendarItemUniqueIdentifier:(id)arg1 inList:(id)arg2 error:(id *)arg3;
- (id)fetchReminderWithExternalIdentifier:(id)arg1 inList:(id)arg2 error:(id *)arg3;
- (id)fetchReminderWithObjectID:(id)arg1 error:(id *)arg2;
- (id)fetchRemindersForEventKitBridgingWithListIDs:(id)arg1 error:(id *)arg2;
- (id)fetchRemindersMatchingTitle:(id)arg1 dueAfter:(id)arg2 dueBefore:(id)arg3 isCompleted:(id)arg4 hasLocation:(id)arg5 location:(id)arg6 error:(id *)arg7;
- (id)fetchRemindersWithDACalendarItemUniqueIdentifiers:(id)arg1 inList:(id)arg2 error:(id *)arg3;
- (id)fetchRemindersWithExternalIdentifiers:(id)arg1 inList:(id)arg2 error:(id *)arg3;
- (id)fetchRemindersWithObjectIDs:(id)arg1 error:(id *)arg2;
- (id)fetchRemindersWithParentReminderIDs:(id)arg1 error:(id *)arg2;
- (id)fetchReplicaManagerForAccountID:(id)arg1 error:(id *)arg2;
- (id)fetchReplicaManagersForAccountID:(id)arg1 bundleID:(id)arg2 error:(id *)arg3;
- (id)fetchResultByExecutingFetchRequest:(id)arg1 error:(id *)arg2;
- (id)fetchShareForListWithID:(id)arg1 error:(id *)arg2;
- (id)fetchSiriFoundInAppsListWithError:(id *)arg1;
- (id)init;
- (id)initUserInteractive:(BOOL)arg1;
- (id)initWithDaemonController:(id)arg1;
- (id)initWithDaemonController:(id)arg1 storeContainerToken:(id)arg2;
- (id)initWithStoreContainerToken:(id)arg1;
- (void)invalidate;
- (void)notifyOfInteractionWithPeople:(id)arg1 force:(BOOL)arg2 completion:(CDUnknownBlockType)arg3;
- (void)notifyOfUserInterestInSiriSuggestedReminder:(id)arg1;
- (void)nukeDatabase;
- (id)optimisticallyMaterializeReminderChangeItem:(id)arg1;
- (id)provideAnonymousChangeTrackingWithTransactionAuthorKeysToExclude:(id)arg1;
- (id)provideChangeTrackingForAccountID:(id)arg1 clientName:(id)arg2;
- (id)provideChangeTrackingForAccountID:(id)arg1 clientName:(id)arg2 transactionAuthorKeysToExclude:(id)arg3;
- (id)refreshAccount:(id)arg1;
- (id)refreshList:(id)arg1;
- (id)refreshReminder:(id)arg1;
- (void)rejectCalDAVSharedList:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)removeOrphanedAccountsWithCompletion:(CDUnknownBlockType)arg1;
- (id)replicaManagerProviderForCalDAVSync;
- (void)requestToDeleteLocalDataWithCompletion:(CDUnknownBlockType)arg1;
- (void)requestToDeleteSyncDataWithAccountIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)requestToMergeLocalDataIntoSyncDataWithAccountIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)resultFromPerformingInvocation:(id)arg1 error:(id *)arg2;
- (id)resultFromPerformingSwiftInvocation:(id)arg1 parametersData:(id)arg2 storages:(id)arg3 error:(id *)arg4;
- (id)resultsIndexedByObjectIDFromExecutingFetchRequest:(id)arg1 error:(id *)arg2;
- (BOOL)saveSaveRequest:(id)arg1 accountChangeItems:(id)arg2 listChangeItems:(id)arg3 reminderChangeItems:(id)arg4 author:(id)arg5 replicaManagerProvider:(id)arg6 error:(id *)arg7;
- (void)saveSaveRequest:(id)arg1 accountChangeItems:(id)arg2 listChangeItems:(id)arg3 reminderChangeItems:(id)arg4 author:(id)arg5 replicaManagerProvider:(id)arg6 queue:(id)arg7 completion:(CDUnknownBlockType)arg8;
- (void)stopShare:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (unsigned long long)storeGeneration;
- (void)triggerSyncForDataAccessAccountsWithAccountIDs:(id)arg1;
- (void)triggerThrottledSyncWithReason:(id)arg1 discretionary:(BOOL)arg2 WithCompletion:(CDUnknownBlockType)arg3;
- (void)updateAccountWithAccountID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)updateAccountWithAccountID:(id)arg1 restartDA:(BOOL)arg2 completion:(CDUnknownBlockType)arg3;
- (void)updateAccountsAndFetchMigrationState:(BOOL)arg1 completion:(CDUnknownBlockType)arg2;
- (void)updateAccountsAndSync:(BOOL)arg1 completion:(CDUnknownBlockType)arg2;
- (void)updateShare:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;

@end

