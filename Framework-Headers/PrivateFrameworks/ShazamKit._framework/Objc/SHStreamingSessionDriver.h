//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <ShazamKit/SHSessionDriver-Protocol.h>

@class NSString, SHSignature, SHSignatureBuffer, SHSignatureMetrics;
@protocol SHSessionDriverDelegate;

__attribute__((visibility("hidden")))
@interface SHStreamingSessionDriver : NSObject <SHSessionDriver>
{
    BOOL _waiting;
    id<SHSessionDriverDelegate> _sessionDelegate;
    double _currentRequiredLength;
    double _maximumSignatureLength;
    double _minimumSignatureLength;
    SHSignatureBuffer *_signatureBuffer;
    SHSignatureMetrics *_metrics;
}

@property (nonatomic) double currentRequiredLength; // @synthesize currentRequiredLength=_currentRequiredLength;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) SHSignature *matchingSignature;
@property (nonatomic) double maximumSignatureLength; // @synthesize maximumSignatureLength=_maximumSignatureLength;
@property (strong, nonatomic) SHSignatureMetrics *metrics; // @synthesize metrics=_metrics;
@property (nonatomic) double minimumSignatureLength; // @synthesize minimumSignatureLength=_minimumSignatureLength;
@property (weak, nonatomic) id<SHSessionDriverDelegate> sessionDelegate; // @synthesize sessionDelegate=_sessionDelegate;
@property (strong, nonatomic) SHSignatureBuffer *signatureBuffer; // @synthesize signatureBuffer=_signatureBuffer;
@property (readonly) Class superclass;
@property (nonatomic) BOOL waiting; // @synthesize waiting=_waiting;

- (void).cxx_destruct;
- (double)clampTimeInterval:(double)arg1;
- (void)didFinishForMatcher:(id)arg1;
- (void)flow:(id)arg1 time:(id)arg2;
- (id)initWithMinimumSignatureLength:(double)arg1 maximumSignatureLength:(double)arg2;
- (BOOL)isCurrentSignature:(id)arg1;
- (void)match;
- (void)matcher:(id)arg1 didFailForSignature:(id)arg2 matcherResponse:(id)arg3 withError:(id)arg4;
- (void)matcher:(id)arg1 didFindMatchingResponse:(id)arg2;
- (void)matcher:(id)arg1 didNotFindMatchForSignature:(id)arg2 matcherResponse:(id)arg3;
- (void)startResetTimerForIntermission:(double)arg1 requiredSignatureLength:(double)arg2;

@end

