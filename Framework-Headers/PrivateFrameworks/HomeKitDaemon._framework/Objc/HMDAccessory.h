//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <HomeKitDaemon/HAPRelayAccessoryDelegate-Protocol.h>
#import <HomeKitDaemon/HMMessageReceiver-Protocol.h>
#import <HomeKitDaemon/NSSecureCoding-Protocol.h>

@class HMAccessoryCategory, HMDAccessoryManager, HMDApplicationRegistry, HMDHome, HMDRoom, HMMessageDispatcher, NSArray, NSData, NSMutableArray, NSMutableSet, NSString, NSUUID;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface HMDAccessory : NSObject <NSSecureCoding, HMMessageReceiver, HAPRelayAccessoryDelegate>
{
    NSMutableArray *_transportInformationInstances;
    BOOL _reachable;
    BOOL _relayEnabled;
    BOOL _primary;
    BOOL _supportsRelay;
    BOOL _paired;
    BOOL _blocked;
    BOOL _unblockPending;
    BOOL _remoteAccessEnabled;
    NSString *_model;
    NSString *_manufacturer;
    NSString *_firmwareVersion;
    NSString *_relayIdentifier;
    unsigned long long _currentRelayAccessoryState;
    HMDHome *_home;
    NSString *_name;
    NSUUID *_uuid;
    NSString *_uniqueIdentifier;
    NSString *_identifier;
    NSString *_configurationAppIdentifier;
    NSString *_providedName;
    NSObject<OS_dispatch_queue> *_workQueue;
    NSObject<OS_dispatch_source> *_pairingRetryTimer;
    NSMutableArray *_discoveredServices;
    HMMessageDispatcher *_msgDispatcher;
    HMAccessoryCategory *_category;
    HMDRoom *_room;
    HMDAccessory *_bridge;
    NSMutableSet *_identifiersForBridgedAccessories;
    HMDAccessoryManager *_accessoryManager;
    NSData *_publicKey;
    NSString *_pairingUsername;
    HMDApplicationRegistry *_appRegistry;
    NSObject<OS_dispatch_queue> *_propertyQueue;
    unsigned long long _activationAttempts;
    unsigned long long _pairingAttempts;
}

@property (weak, nonatomic) HMDAccessoryManager *accessoryManager; // @synthesize accessoryManager=_accessoryManager;
@property (nonatomic) unsigned long long activationAttempts; // @synthesize activationAttempts=_activationAttempts;
@property (strong, nonatomic) HMDApplicationRegistry *appRegistry; // @synthesize appRegistry=_appRegistry;
@property (nonatomic, getter=isBlocked) BOOL blocked; // @synthesize blocked=_blocked;
@property (weak, nonatomic) HMDAccessory *bridge; // @synthesize bridge=_bridge;
@property (strong, nonatomic) HMAccessoryCategory *category; // @synthesize category=_category;
@property (strong, nonatomic) NSString *configurationAppIdentifier; // @synthesize configurationAppIdentifier=_configurationAppIdentifier;
@property (readonly, copy, nonatomic) NSString *contextID;
@property (readonly, nonatomic) unsigned long long currentRelayAccessoryState; // @synthesize currentRelayAccessoryState=_currentRelayAccessoryState;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (strong, nonatomic) NSMutableArray *discoveredServices; // @synthesize discoveredServices=_discoveredServices;
@property (readonly, copy, nonatomic) NSString *firmwareVersion; // @synthesize firmwareVersion=_firmwareVersion;
@property (readonly) unsigned long long hash;
@property (weak, nonatomic) HMDHome *home; // @synthesize home=_home;
@property (strong, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property (strong, nonatomic) NSMutableSet *identifiersForBridgedAccessories; // @synthesize identifiersForBridgedAccessories=_identifiersForBridgedAccessories;
@property (readonly, copy, nonatomic) NSString *manufacturer; // @synthesize manufacturer=_manufacturer;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *messageReceiveQueue;
@property (readonly, nonatomic) NSUUID *messageTargetUUID;
@property (readonly, copy, nonatomic) NSString *model; // @synthesize model=_model;
@property (strong, nonatomic) HMMessageDispatcher *msgDispatcher; // @synthesize msgDispatcher=_msgDispatcher;
@property (copy, nonatomic, getter=getName) NSString *name; // @synthesize name=_name;
@property (nonatomic, getter=isPaired) BOOL paired; // @synthesize paired=_paired;
@property (nonatomic) unsigned long long pairingAttempts; // @synthesize pairingAttempts=_pairingAttempts;
@property (strong, nonatomic) NSObject<OS_dispatch_source> *pairingRetryTimer; // @synthesize pairingRetryTimer=_pairingRetryTimer;
@property (strong, nonatomic) NSString *pairingUsername; // @synthesize pairingUsername=_pairingUsername;
@property (nonatomic, getter=isPrimary) BOOL primary; // @synthesize primary=_primary;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *propertyQueue; // @synthesize propertyQueue=_propertyQueue;
@property (strong, nonatomic) NSString *providedName; // @synthesize providedName=_providedName;
@property (strong, nonatomic) NSData *publicKey; // @synthesize publicKey=_publicKey;
@property (nonatomic, getter=isReachable) BOOL reachable; // @synthesize reachable=_reachable;
@property (nonatomic, getter=isRelayEnabled) BOOL relayEnabled; // @synthesize relayEnabled=_relayEnabled;
@property (strong, nonatomic) NSString *relayIdentifier; // @synthesize relayIdentifier=_relayIdentifier;
@property (nonatomic, getter=isRemoteAccessEnabled) BOOL remoteAccessEnabled; // @synthesize remoteAccessEnabled=_remoteAccessEnabled;
@property (strong, nonatomic) HMDRoom *room; // @synthesize room=_room;
@property (readonly, copy, nonatomic) NSArray *services;
@property (readonly) Class superclass;
@property (nonatomic) BOOL supportsRelay; // @synthesize supportsRelay=_supportsRelay;
@property (readonly, nonatomic) NSArray *tunneledHAPAccessories;
@property (nonatomic) BOOL unblockPending; // @synthesize unblockPending=_unblockPending;
@property (strong, nonatomic) NSString *uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property (readonly, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *workQueue; // @synthesize workQueue=_workQueue;

+ (BOOL)supportsSecureCoding;
- (void).cxx_destruct;
- (void)_addHAPAccessory:(id)arg1;
- (unsigned long long)_currentRelayAccessoryState;
- (void)_enableNotification:(BOOL)arg1 forCharacteristic:(id)arg2 hapAccessory:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_enableNotification:(BOOL)arg1 matchingHAPAccessory:(id)arg2 unconditionallyDeregister:(BOOL)arg3 ignoreDeviceUnlockRequirement:(BOOL)arg4 clientIdentifier:(id)arg5 forCharacteristics:(id)arg6;
- (void)_handleCharacteristicEnableNotification:(id)arg1;
- (void)_handleCharacteristicRead:(id)arg1;
- (void)_handleCharacteristicWrite:(id)arg1;
- (void)_handleIdentify:(id)arg1;
- (void)_handleMultipleCharacteristicsUpdated:(id)arg1 filterUnmodifiedCharacteristics:(BOOL)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_handleRename:(id)arg1;
- (void)_handleRenameService:(id)arg1;
- (void)_handleUpdateAssociatedServiceType:(id)arg1;
- (void)_handleUpdateAuthorizationData:(id)arg1;
- (void)_handleUpdateRoom:(id)arg1;
- (BOOL)_isPaired;
- (BOOL)_isReachable;
- (void)_notifyCharacteristicNotificationChangedForCharacteristic:(id)arg1 enableNotification:(BOOL)arg2 message:(id)arg3;
- (void)_notifyCharacteristicNotificationChanges:(id)arg1 enableNotification:(BOOL)arg2 message:(id)arg3 clientIdentifier:(id)arg4;
- (void)_notifyConnectivityChangedWithReachabilityState:(BOOL)arg1 remoteAccessChanged:(BOOL)arg2;
- (void)_parseResponseFromRemotePeer:(id)arg1 message:(id)arg2 forCharacteristic:(id)arg3;
- (void)_performOperation:(long long)arg1 linkType:(long long)arg2 operationBlock:(CDUnknownBlockType)arg3 errorBlock:(CDUnknownBlockType)arg4;
- (id)_populateServices:(id *)arg1 hapAccessory:(id)arg2;
- (id)_prepareMessagePayloadForCharacteristicRemoteWrite:(id)arg1;
- (void)_readCharacteristicValues:(id)arg1 hapAccessory:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_readValueForCharacteristic:(id)arg1 hapAccessory:(id)arg2 messageIdentifier:(id)arg3 responseHandler:(CDUnknownBlockType)arg4;
- (void)_reenableNotificationsOnWatch;
- (void)_registerForMessages;
- (id)_relayIdentifier;
- (void)_relayIdentifyAccessorytoResidentForMessage:(id)arg1;
- (void)_relayReadFromCharacteristic:(id)arg1 toResidentForMessage:(id)arg2;
- (void)_relayWriteToCharacteristic:(id)arg1 toResidentForMessage:(id)arg2;
- (void)_remoteAccessEnabled:(BOOL)arg1;
- (void)_removeHAPAccessoryWithServerIdentifier:(id)arg1 linkType:(long long)arg2 completion:(CDUnknownBlockType)arg3 completionQueue:(id)arg4;
- (void)_sendBlockedNotification:(BOOL)arg1 withError:(id)arg2 withIdentifier:(id)arg3 withCompletion:(CDUnknownBlockType)arg4;
- (void)_setCurrentRelayAccessoryState:(unsigned long long)arg1;
- (void)_setFirmwareVersion:(id)arg1;
- (void)_setManufacturer:(id)arg1;
- (void)_setModel:(id)arg1;
- (void)_setPaired:(BOOL)arg1;
- (void)_setReachable:(BOOL)arg1;
- (void)_setRelayEnabled:(BOOL)arg1;
- (void)_setRelayIdentifier:(id)arg1;
- (void)_setSupportsRelay:(BOOL)arg1;
- (BOOL)_supportsRelay;
- (void)_updateCategory:(id)arg1 notifyClients:(BOOL)arg2;
- (void)_updateName:(id)arg1;
- (void)_updateReachability;
- (void)_updateRelayEnabled:(BOOL)arg1 notifyRelayManager:(BOOL)arg2;
- (void)_writeCharacteristicValues:(id)arg1 hapAccessory:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_writeValue:(id)arg1 forCharacteristic:(id)arg2 hapAccessory:(id)arg3 authorizationData:(id)arg4 identifier:(id)arg5 queue:(id)arg6 completionHandler:(CDUnknownBlockType)arg7;
- (void)accessory:(id)arg1 didActivateRelayWithError:(id)arg2;
- (void)accessory:(id)arg1 didPairRelayWithError:(id)arg2;
- (void)accessory:(id)arg1 didUpdateAccessoryAccessToken:(id)arg2;
- (void)accessory:(id)arg1 didUpdateAccessoryIdentifier:(id)arg2;
- (void)accessory:(id)arg1 didUpdateRelayEnabled:(BOOL)arg2;
- (void)accessory:(id)arg1 didUpdateRelayState:(unsigned long long)arg2;
- (void)accessoryDidBecomeReachable:(id)arg1;
- (void)accessoryDidBecomeUnreachable:(id)arg1;
- (void)addBridgedAccessory:(id)arg1;
- (void)addHAPAccessory:(id)arg1;
- (void)addRelayUser:(id)arg1 accessToken:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)addTransportInformationInstance:(id)arg1;
- (void)addTransportInformationInstances:(id)arg1;
- (id)assistantUniqueIdentifier;
- (void)blockWithError:(id)arg1;
- (id)characteristicsPassingTest:(CDUnknownBlockType)arg1;
- (void)configure:(id)arg1 msgDispatcher:(id)arg2 accessoryManager:(id)arg3;
- (void)configureWithAccessory:(id)arg1;
- (void)configureWithAccessory:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)dealloc;
- (id)descriptionNonBlocking;
- (void)didEncounterError:(id)arg1;
- (id)dumpDescription;
- (void)enableNotification:(BOOL)arg1 unconditionallyDeregister:(BOOL)arg2 ignoreDeviceUnlockRequirement:(BOOL)arg3 clientIdentifier:(id)arg4 forCharacteristics:(id)arg5;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateCharacteristicsUsingBlock:(CDUnknownBlockType)arg1;
- (id)findCharacteristic:(id)arg1 forService:(id)arg2;
- (id)findCharacteristicType:(id)arg1 forServiceType:(id)arg2;
- (id)findService:(id)arg1;
- (unsigned long long)getAWDTransportTypeWithLinkType:(long long)arg1;
- (id)getConfiguredName;
- (id)getPrimaryHAPAccessories;
- (void)handleMultipleCharacteristicsUpdated:(id)arg1 filterUnmodifiedCharacteristics:(BOOL)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)hapCharacteristicWriteTuples:(id)arg1 hapAccessory:(id)arg2 hmdResponseTuples:(id *)arg3 mapping:(id *)arg4;
- (BOOL)hasBTLELink;
- (id)hmdCharacteristicFromHapCharacteristic:(id)arg1;
- (id)hmdCharacteristicResponses:(id)arg1 mapping:(id)arg2 overallError:(id)arg3;
- (id)initWithAccessory:(id)arg1 messageDispatcher:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isNotificationEnabledForClientIdentifier:(id)arg1;
- (BOOL)matchesHAPAccessory:(id)arg1;
- (BOOL)matchesHAPAccessoryWithServerIdentifier:(id)arg1 linkType:(long long *)arg2;
- (BOOL)matchesHMDAccessoryTransportInformationWithServerIdentifier:(id)arg1 instanceID:(id)arg2;
- (id)matchingHAPAccessoryServerIdentifierWithLinkType:(long long)arg1;
- (id)matchingHAPAccessoryWithLinkType:(long long)arg1;
- (id)matchingHAPAccessoryWithServerIdentifier:(id)arg1;
- (id)matchingHAPAccessoryWithServerIdentifier:(id)arg1 linkType:(long long)arg2;
- (id)matchingTransportInformation:(id)arg1;
- (id)matchingTransportInformationWithServerIdentifier:(id)arg1;
- (id)matchingTransportInformationWithServerIdentifier:(id)arg1 linkType:(long long)arg2;
- (void)mergeTransportInformationInstances:(id)arg1;
- (void)notifyValue:(id)arg1 previousValue:(id)arg2 error:(id)arg3 identifier:(id)arg4 forCharacteristic:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)performOperation:(long long)arg1 linkType:(long long)arg2 operationBlock:(CDUnknownBlockType)arg3 errorBlock:(CDUnknownBlockType)arg4;
- (id)preferredHAPAccessoryForOperation:(long long)arg1 linkType:(long long *)arg2;
- (void)readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)registerForIdentifyWithMessageDispatcher:(id)arg1;
- (void)registerForMessagesWithNewUUID:(id)arg1;
- (id)relayAccessory;
- (void)remoteAccessEnabled:(BOOL)arg1;
- (void)removeAllTransportInformationInstances;
- (void)removeBridgedAccessory:(id)arg1;
- (void)removeHAPAccessoryWithServerIdentifier:(id)arg1 linkType:(long long)arg2 completion:(CDUnknownBlockType)arg3 completionQueue:(id)arg4;
- (void)removeRelayUser:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)removeTransportInformationInstance:(id)arg1;
- (void)savePublicKeyToKeychain;
- (id)serverIdentifier;
- (void)setPairingUsername:(id)arg1 publicKey:(id)arg2;
- (void)setReachability:(BOOL)arg1 serverIdentifier:(id)arg2 linkType:(long long)arg3;
- (void)startRelayActivationWithActivationClient:(id)arg1;
- (void)startRelayPairingWithPairingClient:(id)arg1;
- (id)transportInformationInstances;
- (void)unblockWithMessageIdentifier:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)unconfigure;
- (void)unconfigureAccessoryWithServerIdentifier:(id)arg1 linkType:(long long)arg2;
- (void)updateCategory:(id)arg1;
- (void)updateName:(id)arg1;
- (void)updateReachability;
- (void)updateRoom:(id)arg1;
- (void)writeCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;

@end

