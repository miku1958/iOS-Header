//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <HMFoundation/HMFObject.h>

#import <HomeKitDaemon/HMFLogging-Protocol.h>

@class HMBLocalZone, HMCameraClipEncryptionManager, NAFuture, NSDate, NSMutableArray, NSObject, NSString, NSUUID;
@protocol HMDCameraClipUploaderDelegate, HMDCameraClipUploaderFactory, OS_dispatch_queue;

@interface HMDCameraClipUploader : HMFObject <HMFLogging>
{
    NSUUID *_clipUUID;
    id<HMDCameraClipUploaderDelegate> _delegate;
    NSDate *_startDate;
    double _targetFragmentDuration;
    HMBLocalZone *_localZone;
    NSObject<OS_dispatch_queue> *_workQueue;
    NSString *_logIdentifier;
    HMCameraClipEncryptionManager *_encryptionManager;
    id<HMDCameraClipUploaderFactory> _factory;
    NSMutableArray *_operations;
    NAFuture *_didCreateClipFuture;
}

@property (readonly, copy) NSUUID *clipUUID; // @synthesize clipUUID=_clipUUID;
@property (readonly, copy) NSString *debugDescription;
@property (weak) id<HMDCameraClipUploaderDelegate> delegate; // @synthesize delegate=_delegate;
@property (readonly, copy) NSString *description;
@property (strong) NAFuture *didCreateClipFuture; // @synthesize didCreateClipFuture=_didCreateClipFuture;
@property (readonly) HMCameraClipEncryptionManager *encryptionManager; // @synthesize encryptionManager=_encryptionManager;
@property (readonly) id<HMDCameraClipUploaderFactory> factory; // @synthesize factory=_factory;
@property (readonly) unsigned long long hash;
@property (readonly) HMBLocalZone *localZone; // @synthesize localZone=_localZone;
@property (readonly) NSString *logIdentifier; // @synthesize logIdentifier=_logIdentifier;
@property (readonly) NSMutableArray *operations; // @synthesize operations=_operations;
@property (readonly, copy) NSDate *startDate; // @synthesize startDate=_startDate;
@property (readonly) Class superclass;
@property (readonly) double targetFragmentDuration; // @synthesize targetFragmentDuration=_targetFragmentDuration;
@property (readonly) NSObject<OS_dispatch_queue> *workQueue; // @synthesize workQueue=_workQueue;

+ (id)logCategory;
- (void).cxx_destruct;
- (id)_addOperation:(id)arg1 finalizeClipOnError:(BOOL)arg2;
- (id)_createClipWithSignificantEvent:(id)arg1 homePresenceByPairingIdentity:(id)arg2;
- (void)_handleFatalOperationFailure;
- (BOOL)_isCancelledError:(id)arg1;
- (void)_operationCompleted:(id)arg1 finalizeOnError:(BOOL)arg2 future:(id)arg3;
- (void)_startNextOperation;
- (id)addNotificationForSignificantEvent:(id)arg1 homePresenceByPairingIdentity:(id)arg2;
- (id)addPosterFrameData:(id)arg1 timeOffsetWithinClip:(double)arg2 width:(unsigned long long)arg3 height:(unsigned long long)arg4;
- (id)addVideoInitData:(id)arg1;
- (id)addVideoSegmentData:(id)arg1 duration:(double)arg2 timeOffsetWithinClip:(double)arg3 clipFinalizedBecauseMaxDurationExceeded:(BOOL)arg4;
- (id)attributeDescriptions;
- (id)finish;
- (BOOL)hasAddedCreateClipOperation;
- (id)initWithClipUUID:(id)arg1 startDate:(id)arg2 targetFragmentDuration:(double)arg3 localZone:(id)arg4 workQueue:(id)arg5 logIdentifier:(id)arg6;
- (id)initWithClipUUID:(id)arg1 startDate:(id)arg2 targetFragmentDuration:(double)arg3 localZone:(id)arg4 workQueue:(id)arg5 logIdentifier:(id)arg6 encryptionManager:(id)arg7 factory:(id)arg8;

@end

