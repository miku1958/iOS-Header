//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <HomeKitDaemon/HMDTrigger.h>

@class NSArray, NSDate, NSDateComponents, NSString, NSTimeZone, NSTimer;

@interface HMDTimerTrigger : HMDTrigger
{
    struct os_unfair_lock_s _lock;
    NSDate *currentFireDate;
    NSDate *_currentFireDate;
    NSDate *_fireDate;
    NSTimeZone *_fireDateTimeZone;
    NSString *_significantEvent;
    NSDateComponents *_significantEventOffset;
    NSDateComponents *_fireRepeatInterval;
    NSArray *_recurrences;
    NSString *_timerID;
    NSTimer *_timer;
}

@property (readonly) NSDate *currentFireDate; // @synthesize currentFireDate=_currentFireDate;
@property (copy, nonatomic) NSDate *fireDate; // @synthesize fireDate=_fireDate;
@property (copy, nonatomic) NSTimeZone *fireDateTimeZone; // @synthesize fireDateTimeZone=_fireDateTimeZone;
@property (copy, nonatomic) NSDateComponents *fireRepeatInterval; // @synthesize fireRepeatInterval=_fireRepeatInterval;
@property (copy, nonatomic) NSArray *recurrences; // @synthesize recurrences=_recurrences;
@property (copy, nonatomic) NSString *significantEvent; // @synthesize significantEvent=_significantEvent;
@property (copy, nonatomic) NSDateComponents *significantEventOffset; // @synthesize significantEventOffset=_significantEventOffset;
@property (strong, nonatomic) NSTimer *timer; // @synthesize timer=_timer;
@property (strong, nonatomic) NSString *timerID; // @synthesize timerID=_timerID;

+ (id)getCalendar:(id)arg1;
+ (id)logCategory;
+ (BOOL)supportsSecureCoding;
+ (id)validateRecurrence:(id)arg1 calendar:(id)arg2 fireDate:(id)arg3;
+ (id)validateRecurrences:(id)arg1;
+ (id)validateSignificantOffset:(id)arg1;
+ (id)validateTriggerModel:(id)arg1 message:(id)arg2 currentFireDate:(id)arg3;
+ (id)validateWholeMinuteDate:(id)arg1 onCalendar:(id)arg2;
- (void).cxx_destruct;
- (void)_activateWithCompletion:(CDUnknownBlockType)arg1;
- (void)_closestDatesForStartDate:(id)arg1 earliestDate:(id)arg2 timeZone:(id)arg3 deliveryRepeatInterval:(id)arg4 returnDateBefore:(id *)arg5 returnDateAfter:(id *)arg6;
- (void)_disableTimerOffReactivationFailure;
- (void)_handleTimerTriggerUpdate:(id)arg1 message:(id)arg2;
- (void)_handleUpdateTimerTriggerPropertiesModel:(id)arg1 message:(id)arg2;
- (void)_handleUpdateTimerTriggerPropertiesRequest:(id)arg1;
- (id)_nextFireDate;
- (id)_nextSignificantEventFireDate;
- (BOOL)_reactivateFireDateTrigger;
- (BOOL)_reactivateSignificantEventTrigger;
- (BOOL)_reactivateTrigger;
- (void)_reactiveTriggerAfterDelay;
- (void)_registerForMessages;
- (id)_serializeForAdd;
- (BOOL)_shouldExecuteActionSet;
- (void)_startTimer:(id)arg1;
- (void)_startTimerWithFireDate:(id)arg1;
- (void)_startTimerWithSignificantEventDate:(id)arg1;
- (void)_stopTimer;
- (void)_timerTriggered;
- (void)_transactionObjectRemoved:(id)arg1 message:(id)arg2;
- (void)_transactionObjectUpdated:(id)arg1 newValues:(id)arg2 message:(id)arg3;
- (id)backingStoreObjects:(long long)arg1;
- (void)completeConfiguration;
- (void)configure:(id)arg1 messageDispatcher:(id)arg2 queue:(id)arg3;
- (void)dealloc;
- (id)description;
- (id)dumpState;
- (id)emptyModelObject;
- (void)encodeWithCoder:(id)arg1;
- (id)getCalendar;
- (id)getFireInterval;
- (id)initWithCoder:(id)arg1;
- (id)initWithModel:(id)arg1 home:(id)arg2 message:(id)arg3;
- (id)initWithName:(id)arg1 uuid:(id)arg2;
- (id)modelObjectWithChangeType:(unsigned long long)arg1;
- (void)nsTimerTriggered:(id)arg1;
- (void)setCurrentFireDate:(id)arg1;
- (BOOL)shouldActivateOnLocalDevice;
- (void)timerFired:(id)arg1;
- (void)timerTriggered;
- (unsigned long long)triggerType;

@end

