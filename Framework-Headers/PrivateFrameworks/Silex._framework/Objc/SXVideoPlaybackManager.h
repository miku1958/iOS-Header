//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <Silex/SXVideoPlaybackController-Protocol.h>
#import <Silex/SXVideoPlaybackObserver-Protocol.h>
#import <Silex/SXVideoSeeking-Protocol.h>
#import <Silex/SXVideoTransitionObserver-Protocol.h>

@class NSString, SXPlaybackCoordinator;
@protocol SXPlaybackCoordinatorProviding, SXVideoPlaybackAdvancing, SXVideoPlaybackPolicy, SXVideoPlaybackStateReporting;

@interface SXVideoPlaybackManager : NSObject <SXVideoPlaybackObserver, SXVideoPlaybackController, SXVideoSeeking, SXVideoTransitionObserver>
{
    id<SXVideoPlaybackPolicy> _playbackPolicy;
    id<SXVideoPlaybackStateReporting> _playbackStateReporter;
    id<SXVideoPlaybackAdvancing> _playbackAdvancer;
    id<SXPlaybackCoordinatorProviding> _playbackCoordinatorProvider;
    SXPlaybackCoordinator *_playbackCoordinator;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) id<SXVideoPlaybackAdvancing> playbackAdvancer; // @synthesize playbackAdvancer=_playbackAdvancer;
@property (weak, nonatomic) SXPlaybackCoordinator *playbackCoordinator; // @synthesize playbackCoordinator=_playbackCoordinator;
@property (readonly, nonatomic) id<SXPlaybackCoordinatorProviding> playbackCoordinatorProvider; // @synthesize playbackCoordinatorProvider=_playbackCoordinatorProvider;
@property (readonly, nonatomic) id<SXVideoPlaybackPolicy> playbackPolicy; // @synthesize playbackPolicy=_playbackPolicy;
@property (readonly, nonatomic) id<SXVideoPlaybackStateReporting> playbackStateReporter; // @synthesize playbackStateReporter=_playbackStateReporter;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)initWithPlaybackPolicy:(id)arg1 playbackAdvancer:(id)arg2 playbackStateReporter:(id)arg3 playbackCoordinatorProvider:(id)arg4;
- (void)managePlaybackStateWithPlaybackCoordinator:(id)arg1;
- (void)pause;
- (void)play;
- (void)playWithoutRequestingPlayback;
- (void)playbackCoordinator:(id)arg1 playbackFailedWithError:(id)arg2;
- (void)playbackCoordinatorFinishedPlayback:(id)arg1;
- (void)playbackCoordinatorPausedPlayback:(id)arg1;
- (void)playbackCoordinatorStartedPlayback:(id)arg1;
- (void)playbackCoordinatorStateChanged:(id)arg1;
- (void)seekToStartWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)willTransitionToVideo:(id)arg1 withTransitionCoordinator:(id)arg2;

@end

