//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <EmailFoundation/EFFuture-Protocol.h>
#import <EmailFoundation/EFPromisePrivate-Protocol.h>

@class NSConditionLock, NSError, NSMutableArray, NSString;
@protocol EFFutureDelegate, EFObserver;

@interface EFFuture : NSObject <EFPromisePrivate, EFFuture>
{
    NSConditionLock *_stateLock;
    id _result;
    NSError *_error;
    NSMutableArray *_completionBlocks;
    id<EFFutureDelegate> _delegate;
}

@property (readonly) CDUnknownBlockType boolErrorCompletionHandlerAdapter;
@property (readonly, getter=isCancelled) BOOL cancelled;
@property (readonly) CDUnknownBlockType completionHandlerAdapter;
@property (readonly, copy) NSString *debugDescription;
@property (weak) id<EFFutureDelegate> delegate; // @synthesize delegate=_delegate;
@property (readonly, copy) NSString *description;
@property (readonly) CDUnknownBlockType errorOnlyCompletionHandlerAdapter;
@property (readonly, getter=isFinished) BOOL finished;
@property (readonly) id<EFObserver> firstResultObserverAdapter;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) id result;
@property (readonly, nonatomic) id resultIfAvailable;
@property (readonly) id<EFObserver> resultsObserverAdapter;
@property (readonly) Class superclass;

+ (void)_always:(id)arg1 withBlock:(CDUnknownBlockType)arg2 scheduler:(id)arg3;
+ (id)_join:(id)arg1 ignoreFailures:(BOOL)arg2;
+ (id)_recover:(id)arg1 withBlock:(CDUnknownBlockType)arg2 scheduler:(id)arg3;
+ (id)_then:(id)arg1 withBlock:(CDUnknownBlockType)arg2 scheduler:(id)arg3;
+ (id)chain:(id)arg1;
+ (id)combine:(id)arg1;
+ (id)futureWithBlock:(CDUnknownBlockType)arg1;
+ (id)futureWithError:(id)arg1;
+ (id)futureWithResult:(id)arg1;
+ (id)join:(id)arg1;
+ (id)lazyFutureWithBlock:(CDUnknownBlockType)arg1;
+ (id)nullFuture;
+ (id)onScheduler:(id)arg1 futureWithBlock:(CDUnknownBlockType)arg2;
+ (id)onScheduler:(id)arg1 lazyFutureWithBlock:(CDUnknownBlockType)arg2;
+ (id)sequence:(id)arg1;
- (void).cxx_destruct;
- (void)_addCompletionBlock:(CDUnknownBlockType)arg1;
- (void)_finishWithFuture:(id)arg1;
- (void)_flushCompletionBlocks;
- (BOOL)_nts_isFinished;
- (void)addFailureBlock:(CDUnknownBlockType)arg1;
- (void)addSuccessBlock:(CDUnknownBlockType)arg1;
- (void)always:(CDUnknownBlockType)arg1;
- (void)cancel;
- (void)didCancel;
- (BOOL)finishWithError:(id)arg1;
- (void)finishWithFuture:(id)arg1;
- (BOOL)finishWithResult:(id)arg1;
- (BOOL)finishWithResult:(id)arg1 error:(id)arg2;
- (id)init;
- (id)map:(CDUnknownBlockType)arg1;
- (void)onScheduler:(id)arg1 addFailureBlock:(CDUnknownBlockType)arg2;
- (void)onScheduler:(id)arg1 addSuccessBlock:(CDUnknownBlockType)arg2;
- (void)onScheduler:(id)arg1 always:(CDUnknownBlockType)arg2;
- (id)onScheduler:(id)arg1 map:(CDUnknownBlockType)arg2;
- (id)onScheduler:(id)arg1 recover:(CDUnknownBlockType)arg2;
- (id)onScheduler:(id)arg1 then:(CDUnknownBlockType)arg2;
- (id)recover:(CDUnknownBlockType)arg1;
- (id)result:(id *)arg1;
- (id)resultBeforeDate:(id)arg1 error:(id *)arg2;
- (id)resultIfAvailable:(id *)arg1;
- (id)resultWithTimeout:(double)arg1 error:(id *)arg2;
- (id)then:(CDUnknownBlockType)arg1;
- (BOOL)tryCancel;

@end

