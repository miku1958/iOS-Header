//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <PhotoLibraryServices/PLManagedObject.h>

#import <PhotoLibraryServices/PLCloudDeletable-Protocol.h>
#import <PhotoLibraryServices/PLSyncablePerson-Protocol.h>

@class NSDictionary, NSSet, NSString, PLDetectedFace, PLDetectedFaceGroup;

@interface PLPerson : PLManagedObject <PLSyncablePerson, PLCloudDeletable>
{
}

@property (strong, nonatomic) PLDetectedFaceGroup *associatedFaceGroup; // @dynamic associatedFaceGroup;
@property (nonatomic) short cloudDeleteState; // @dynamic cloudDeleteState;
@property (readonly) long long cloudDeletionType;
@property (nonatomic) short cloudLocalState;
@property (nonatomic) short cloudLocalState; // @dynamic cloudLocalState;
@property (readonly, copy) NSString *cloudUUIDForDeletion;
@property (nonatomic) int cloudVerifiedType; // @dynamic cloudVerifiedType;
@property (nonatomic) int cloudVerifiedType; // @dynamic cloudVerifiedType;
@property (strong, nonatomic) NSSet *clusterRejectedFaces; // @dynamic clusterRejectedFaces;
@property (strong, nonatomic) NSDictionary *contactMatchingDictionary; // @dynamic contactMatchingDictionary;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *description;
@property (strong, nonatomic) NSSet *detectedFaces; // @dynamic detectedFaces;
@property (strong, nonatomic) NSString *displayName; // @dynamic displayName;
@property (nonatomic) int effectiveVerifiedType;
@property (readonly, nonatomic) int faceCount; // @dynamic faceCount;
@property (strong, nonatomic) NSSet *faceCrops; // @dynamic faceCrops;
@property (strong, nonatomic) NSString *fullName;
@property (strong, nonatomic) NSString *fullName; // @dynamic fullName;
@property (readonly, nonatomic) BOOL graphVerified;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long hash;
@property (nonatomic) BOOL inPersonNamingModel; // @dynamic inPersonNamingModel;
@property (strong, nonatomic) NSSet *invalidMergeCandidates; // @dynamic invalidMergeCandidates;
@property (readonly, nonatomic) BOOL isTombstone;
@property (strong, nonatomic) PLDetectedFace *keyFace; // @dynamic keyFace;
@property (readonly, nonatomic) BOOL keyFaceIsPicked;
@property (nonatomic) short keyFacePickSource; // @dynamic keyFacePickSource;
@property (readonly, strong, nonatomic) id localID;
@property (nonatomic) unsigned int manualOrder; // @dynamic manualOrder;
@property (strong, nonatomic) NSSet *mergeCandidates; // @dynamic mergeCandidates;
@property (strong, nonatomic) NSSet *mergeSourcePersons; // @dynamic mergeSourcePersons;
@property (strong, nonatomic) PLPerson *mergeTargetPerson; // @dynamic mergeTargetPerson;
@property (strong, nonatomic) NSSet *personReferences; // @dynamic personReferences;
@property (strong, nonatomic) NSString *personUUID;
@property (strong, nonatomic) NSString *personUUID; // @dynamic personUUID;
@property (strong, nonatomic) NSString *personUri; // @dynamic personUri;
@property (strong, nonatomic) NSSet *rejectedFaces; // @dynamic rejectedFaces;
@property (strong, nonatomic) NSSet *rejectedFacesNeedingFaceCrops; // @dynamic rejectedFacesNeedingFaceCrops;
@property (readonly) Class superclass;
@property (readonly) Class superclass;
@property (nonatomic) int type; // @dynamic type;
@property (readonly, nonatomic) BOOL userVerified;
@property (nonatomic) int verifiedType; // @dynamic verifiedType;
@property (nonatomic) int verifiedType; // @dynamic verifiedType;

+ (id)_batchFetchPersonUUIDsByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 inManagedObjectContext:(id)arg3 error:(id *)arg4;
+ (id)_predicateForSupportedVerifiedTypesForUpload;
+ (id)_stringFromContact:(id)arg1 preferGivenName:(BOOL)arg2;
+ (id)allPersonsInManagedObjectContext:(id)arg1;
+ (void)batchFetchAssociatedPersonByFaceGroupUUIDWithFaceGroupUUIDs:(id)arg1 predicate:(id)arg2 completion:(CDUnknownBlockType)arg3;
+ (void)batchFetchPersonUUIDsByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 inManagedObjectContext:(id)arg3 completion:(CDUnknownBlockType)arg4;
+ (void)batchFetchPersonsByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 completion:(CDUnknownBlockType)arg3;
+ (long long)cloudDeletionTypeForTombstone:(id)arg1;
+ (id)cloudUUIDKeyForDeletion;
+ (void)createAssociatedPersonForFaceGroup:(id)arg1;
+ (void)createAssociatedPersonForFaceGroup:(id)arg1 inManagedObjectContext:(id)arg2;
+ (id)displayNameFromContact:(id)arg1;
+ (id)entityInManagedObjectContext:(id)arg1;
+ (id)entityName;
+ (void)enumerateAssetUUIDsForSearchIndexingWithPersonUUID:(id)arg1 managedObjectContext:(id)arg2 assetUUIDHandler:(CDUnknownBlockType)arg3;
+ (id)fetchFinalMergeTargetPersonForPersonWithUUID:(id)arg1 context:(id)arg2;
+ (id)fetchPersonCountByAssetUUIDForAssetUUIDs:(id)arg1 predicate:(id)arg2 error:(id *)arg3;
+ (id)fullNameFromContact:(id)arg1;
+ (id)insertIntoManagedObjectContext:(id)arg1 withPersonUUID:(id)arg2 fullName:(id)arg3 verifiedType:(int)arg4;
+ (id)insertIntoPhotoLibrary:(id)arg1 withPersonUUID:(id)arg2 fullName:(id)arg3 verifiedType:(int)arg4;
+ (id)listOfSyncedProperties;
+ (BOOL)person:(id)arg1 isBetterMergeTargetThanPerson:(id)arg2;
+ (id)personWithUUID:(id)arg1 inManagedObjectContext:(id)arg2;
+ (id)personsMatchingPredicate:(id)arg1 fetchLimit:(unsigned long long)arg2 sortDescriptors:(id)arg3 relationshipKeyPathsForPrefetching:(id)arg4 inManagedObjectContext:(id)arg5;
+ (id)personsToPrefetchInManagedObjectContext:(id)arg1;
+ (id)personsToUploadInManagedObjectContext:(id)arg1 limit:(long long)arg2;
+ (id)personsWithPersonUri:(id)arg1 inManagedObjectContext:(id)arg2;
+ (id)personsWithUUIDs:(id)arg1 inManagedObjectContext:(id)arg2;
+ (id)predicateForPersistence;
+ (id)predicateForPersonsNeedingFaceCropGenerationForFaceObjectID:(id)arg1;
+ (id)predicateForVisibleKeyFace;
+ (BOOL)resetAllWithError:(id *)arg1;
+ (void)resetCloudStateInPhotoLibrary:(id)arg1 hardReset:(BOOL)arg2;
- (void)_basicMergePersons:(id)arg1;
- (id)_nameRelatedMetadataKeys;
- (void)_refreshRelationshipForKey:(id)arg1;
- (void)basicMergePersons:(id)arg1;
- (id)cplFullRecord;
- (id)cplPersonChange;
- (id)debugLogDescription;
- (BOOL)dedupeGraphPersons:(id)arg1 error:(id *)arg2;
- (id)faceGroupDescription;
- (id)finalMergeTargetPerson;
- (BOOL)isSyncableChange;
- (BOOL)isValidForPersistence;
- (void)mergePersons:(id)arg1 withOptimalState:(id)arg2;
- (id)momentShare;
- (id)mutableFaceCrops;
- (id)mutableFaces;
- (id)mutableInvalidMergeCandidates;
- (id)mutableMergeCandidates;
- (id)mutableRejectedFaces;
- (id)mutableRejectedFacesNeedingFaceCrops;
- (void)persistMetadataToFileSystem;
- (id)pickKeyFaceOptimalStateForContactDedupeWithPersons:(id)arg1;
- (id)pickOptimalStateForUserInitiatedMergeWithPersons:(id)arg1 nominalTarget:(id)arg2;
- (void)prepareForDeletion;
- (void)prepareForUserInitiatedMergeWithPersons:(id)arg1;
- (void)refereshMergeCandidates;
- (void)refreshFaceCrops;
- (void)refreshFaces;
- (void)refreshInvalidMergeCandidates;
- (void)refreshRejectedFaces;
- (void)rejectFaceIfPossible:(id)arg1 shouldCreateFaceCrop:(BOOL)arg2;
- (void)resetAllFacesToDefault;
- (id)reverseOrderedMergeTargetPersons;
- (void)setCPLSyncedMergeTarget:(id)arg1;
- (void)setKeyFace:(id)arg1 pickSource:(short)arg2;
- (void)setKeyFaceToPicked;
- (BOOL)shouldIndexForSearch;
- (BOOL)supportsCloudUpload;
- (id)syncDescription;
- (void)willSave;

@end

