//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <MTLSimDriver/MTLResourceSPI-Protocol.h>
#import <MTLSimDriver/MTLSerializerResource-Protocol.h>

@class MTLResourceAllocationInfo, MTLSimDevice, MTLSimHeap, NSString;
@protocol MTLDevice, MTLHeap;

__attribute__((visibility("hidden")))
@interface MTLSimResource : NSObject <MTLResourceSPI, MTLSerializerResource>
{
    unsigned long long _purgeableState;
    MTLSimHeap *_heap;
    unsigned long long _heapOffset;
    unsigned int _resourceRef;
    unsigned long long _options;
    unsigned long long _cpuCacheMode;
    unsigned long long _storageMode;
    MTLSimDevice *_device;
    NSString *_label;
    struct os_unfair_lock_s _labelLock;
    unsigned long long _hazardTrackingMode;
    BOOL _isAliasable;
    int responsibleProcess;
    unsigned long long allocatedSize;
    MTLResourceAllocationInfo *cachedAllocationInfo;
    unsigned long long protectionOptions;
    MTLResourceAllocationInfo *sharedAllocationInfo;
}

@property (readonly) unsigned long long allocatedSize; // @synthesize allocatedSize;
@property (readonly) unsigned long long allocationID;
@property (readonly) MTLResourceAllocationInfo *cachedAllocationInfo; // @synthesize cachedAllocationInfo;
@property (readonly) unsigned long long cpuCacheMode; // @synthesize cpuCacheMode=_cpuCacheMode;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) id<MTLDevice> device; // @dynamic device;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long hazardTrackingMode; // @dynamic hazardTrackingMode;
@property (readonly) id<MTLHeap> heap; // @dynamic heap;
@property (readonly) unsigned long long heapOffset;
@property (copy) NSString *label; // @dynamic label;
@property (readonly) unsigned long long protectionOptions; // @synthesize protectionOptions;
@property (readonly) unsigned long long resourceOptions; // @dynamic resourceOptions;
@property (readonly) unsigned int resourceRef; // @synthesize resourceRef=_resourceRef;
@property int responsibleProcess; // @synthesize responsibleProcess;
@property (readonly) MTLResourceAllocationInfo *sharedAllocationInfo; // @synthesize sharedAllocationInfo;
@property (readonly) unsigned long long storageMode; // @synthesize storageMode=_storageMode;
@property (readonly) Class superclass;
@property (readonly) unsigned long long unfilteredResourceOptions; // @dynamic unfilteredResourceOptions;

- (void)dealloc;
- (BOOL)doesAliasAllResources:(const id *)arg1 count:(unsigned long long)arg2;
- (BOOL)doesAliasAnyResources:(const id *)arg1 count:(unsigned long long)arg2;
- (BOOL)doesAliasResource:(id)arg1;
- (BOOL)doesAliasResources:(const id *)arg1 count:(unsigned long long)arg2 all:(BOOL)arg3;
- (id)initWithResourceRef:(unsigned int)arg1 options:(unsigned long long)arg2 device:(id)arg3 heap:(id)arg4;
- (BOOL)isAliasable;
- (BOOL)isComplete;
- (BOOL)isPurgeable;
- (void)makeAliasable;
- (id)retainedLabel;
- (void)setHeapOffset:(unsigned long long)arg1;
- (unsigned long long)setPurgeableState:(unsigned long long)arg1;
- (void)waitUntilComplete;

@end

