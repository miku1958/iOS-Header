//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <StoreBookkeeper/NSSecureCoding-Protocol.h>

@class NSData, NSDictionary;
@protocol OS_dispatch_queue;

__attribute__((visibility("hidden")))
@interface SBKStoreClampsController : NSObject <NSSecureCoding>
{
    NSObject<OS_dispatch_queue> *_queue;
    NSDictionary *_transactionClamps;
    double _accountIdentifierCheckTimestamp;
    double _authenticationNeededTimestamp;
    double _userAcceptedSyncTimestamp;
    double _networkingBlockedUntil;
    double _backOffUntil;
    double _userCancelledSignInBackOffUntil;
    double _nextUserCancelBackOffInterval;
    NSData *_pendingUserDefaultArchivedData;
}

@property double accountIdentifierCheckTimestamp; // @synthesize accountIdentifierCheckTimestamp=_accountIdentifierCheckTimestamp;
@property double authenticationNeededTimestamp; // @synthesize authenticationNeededTimestamp=_authenticationNeededTimestamp;
@property double backOffUntil; // @synthesize backOffUntil=_backOffUntil;
@property double networkingBlockedUntil; // @synthesize networkingBlockedUntil=_networkingBlockedUntil;
@property double nextUserCancelBackOffInterval; // @synthesize nextUserCancelBackOffInterval=_nextUserCancelBackOffInterval;
@property (strong) NSData *pendingUserDefaultArchivedData; // @synthesize pendingUserDefaultArchivedData=_pendingUserDefaultArchivedData;
@property (strong) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property (strong) NSDictionary *transactionClamps; // @synthesize transactionClamps=_transactionClamps;
@property double userAcceptedSyncTimestamp; // @synthesize userAcceptedSyncTimestamp=_userAcceptedSyncTimestamp;
@property double userCancelledSignInBackOffUntil; // @synthesize userCancelledSignInBackOffUntil=_userCancelledSignInBackOffUntil;

+ (id)sharedClampsController;
+ (BOOL)supportsSecureCoding;
- (void).cxx_destruct;
- (BOOL)_canScheduleTransactionBasedOfNetworkingBlocked:(id)arg1 error:(id *)arg2;
- (BOOL)_canScheduleTransactionBasedOnAccountIdentifierCheck:(id)arg1 error:(id *)arg2;
- (BOOL)_canScheduleTransactionBasedOnBackOff:(id)arg1 error:(id *)arg2;
- (BOOL)_canScheduleTransactionBasedOnType:(id)arg1 error:(id *)arg2;
- (BOOL)_canScheduleTransactionBasedOnUserCancelledSignIn:(id)arg1 error:(id *)arg2;
- (id)_keyForTransaction:(id)arg1;
- (double)_rightNow;
- (void)accessTransactionClampsWithBlock:(CDUnknownBlockType)arg1;
- (void)backOffForTimeInterval:(double)arg1;
- (BOOL)canScheduleTransaction:(id)arg1 error:(id *)arg2;
- (void)clearAccountIdentifierCheckTimestamp;
- (void)clearAuthenticationRequest;
- (void)clearBackOff;
- (void)clearNetworkingBlocked;
- (void)clearTimestampForTransaction:(id)arg1;
- (void)clearUserAcceptedSyncTimestamp;
- (void)clearUserCancelledSignIn;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (BOOL)hasAuthenticatedTooRecentlyForTransaction:(id)arg1 error:(id *)arg2;
- (BOOL)hasUserRecentlyAcceptedSync;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (BOOL)isNetworkingBlocked;
- (void)reset;
- (void)saveToUserDefaults;
- (void)setAccountIdentifierCheckTimestamp;
- (void)setAuthenticationRequest;
- (void)setNetworkingBlocked;
- (void)setTimestampForTransaction:(id)arg1;
- (void)setUserAcceptedSyncTimestamp;
- (void)setUserCancelledSignIn;

@end

