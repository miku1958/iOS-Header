//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <ContentKit/WFRepresentation.h>

@class NSData, NSDate, NSString, NSURL, WFFileType;

@interface WFFileRepresentation : WFRepresentation
{
    BOOL _deletesFileOnDeallocation;
    BOOL _securityScopedResource;
    NSString *_filename;
    NSData *_data;
    NSURL *_fileURL;
    WFFileType *_wfType;
    NSString *_wfName;
    NSDate *_creationDate;
    NSDate *_modificationDate;
    NSURL *_originalURL;
}

@property (readonly, nonatomic) NSDate *creationDate; // @synthesize creationDate=_creationDate;
@property (readonly, nonatomic) NSData *data; // @synthesize data=_data;
@property (readonly, nonatomic) BOOL deletesFileOnDeallocation; // @synthesize deletesFileOnDeallocation=_deletesFileOnDeallocation;
@property (readonly, nonatomic) long long fileSize;
@property (readonly, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property (strong, nonatomic) NSString *filename; // @synthesize filename=_filename;
@property (readonly, nonatomic) NSDate *modificationDate; // @synthesize modificationDate=_modificationDate;
@property (readonly, nonatomic) NSURL *originalURL; // @synthesize originalURL=_originalURL;
@property (readonly, nonatomic) long long representationType;
@property (readonly, nonatomic) BOOL securityScopedResource; // @synthesize securityScopedResource=_securityScopedResource;
@property (readonly, nonatomic) NSString *wfName; // @synthesize wfName=_wfName;
@property (readonly, nonatomic) WFFileType *wfType; // @synthesize wfType=_wfType;

+ (void)addDisallowedDirectory:(id)arg1;
+ (id)disallowedDirectoryURLs;
+ (BOOL)fileIsInDisallowedDirectory:(id)arg1;
+ (id)fileWithData:(id)arg1 ofType:(id)arg2 proposedFilename:(id)arg3;
+ (id)fileWithData:(id)arg1 ofType:(id)arg2 proposedFilename:(id)arg3 originalURL:(id)arg4;
+ (id)fileWithURL:(id)arg1 options:(long long)arg2;
+ (id)fileWithURL:(id)arg1 options:(long long)arg2 ofType:(id)arg3;
+ (id)fileWithURL:(id)arg1 options:(long long)arg2 ofType:(id)arg3 proposedFilename:(id)arg4;
+ (id)fileWithURL:(id)arg1 options:(long long)arg2 ofType:(id)arg3 proposedFilename:(id)arg4 originalURL:(id)arg5;
+ (BOOL)isAllowedToRepresentFileURL:(id)arg1;
+ (id)proposedFilenameForFile:(id)arg1 ofType:(id)arg2;
+ (id)proposedFilenameForFile:(id)arg1 ofType:(id)arg2 unsanitizedName:(id *)arg3;
+ (BOOL)sandboxAllowsRepresentingFileURL:(id)arg1;
+ (id)sanitizedFilename:(id)arg1 withExtension:(id)arg2;
+ (id)sanitizedFilename:(id)arg1 withExtension:(id)arg2 unsanitizedName:(id *)arg3;
+ (BOOL)supportsSecureCoding;
+ (id)typeOfData:(id)arg1;
+ (id)typeOfFile:(id)arg1;
- (void).cxx_destruct;
- (id)copyWithName:(id)arg1 addingExtensionIfNecessary:(BOOL)arg2 zone:(struct _NSZone *)arg3;
- (id)copyWithName:(id)arg1 zone:(struct _NSZone *)arg2;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithData:(id)arg1 ofType:(id)arg2 proposedFilename:(id)arg3 originalURL:(id)arg4;
- (id)initWithFileURL:(id)arg1 options:(long long)arg2 ofType:(id)arg3 proposedFilename:(id)arg4 originalURL:(id)arg5;
- (id)inputStream;
- (BOOL)isEncodable;
- (id)mappedData;
- (id)mappedDataWithError:(id *)arg1;
- (BOOL)writeToFileURL:(id)arg1 copy:(BOOL)arg2 overwrite:(BOOL)arg3 error:(id *)arg4;
- (BOOL)writeToFileURL:(id)arg1 overwriting:(BOOL)arg2 error:(id *)arg3;
- (BOOL)writeToTemporaryFileURL:(id)arg1 error:(id *)arg2;

@end

