//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class MRAVEndpoint, MRAVRoutingDiscoverySession, NSArray, NSMutableArray, NSMutableDictionary, NSSet, NSString;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface MRAVReconnaissanceSession : NSObject
{
    double _timeoutTimerTimeout;
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSMutableDictionary *_localMatchingDevicesFound;
    BOOL _useWeakMatching;
    BOOL _returnPartialResults;
    BOOL _waitForCompleteClusters;
    BOOL _searchInProgress;
    BOOL _shouldWaitForUnanimousEndpoints;
    MRAVRoutingDiscoverySession *_discoverySession;
    NSArray *_matchingLogicalDeviceIDs;
    NSSet *_matchingOutputDeviceUIDsSet;
    NSString *_matchingOutputDeviceGroupID;
    id _discoverySessionCallbackToken;
    CDUnknownBlockType _callback;
    NSObject<OS_dispatch_source> *_timeoutTimer;
    NSObject<OS_dispatch_queue> *_callbackSyncQueue;
    NSMutableDictionary *_matchingDevicesFound;
    NSMutableArray *_matchingEndpointsFound;
    MRAVEndpoint *_unanimousEndpoint;
    NSArray *_availableOutputDevices;
    NSArray *_availableEndpoints;
    unsigned long long _updatesReceived;
    NSArray *_lastProcessedOutputDevices;
    NSArray *_lastProcessedEndpoints;
    unsigned long long _expectedLogicalDevices;
}

@property (readonly, nonatomic) MRAVRoutingDiscoverySession *discoverySession;
@property (readonly, nonatomic) unsigned int endpointFeatures;
@property (copy, nonatomic) NSArray *matchingLogicalDeviceIDs; // @synthesize matchingLogicalDeviceIDs=_matchingLogicalDeviceIDs;
@property (readonly, nonatomic) NSString *matchingOutputDeviceGroupID;
@property (readonly, nonatomic) NSArray *matchingOutputDeviceUIDs;
@property (nonatomic) BOOL returnPartialResults; // @synthesize returnPartialResults=_returnPartialResults;
@property (nonatomic) BOOL useWeakMatching; // @synthesize useWeakMatching=_useWeakMatching;
@property (nonatomic) BOOL waitForCompleteClusters; // @synthesize waitForCompleteClusters=_waitForCompleteClusters;

- (void).cxx_destruct;
- (void)beginSearchWithTimeout:(double)arg1 completion:(CDUnknownBlockType)arg2;
- (void)beginSearchWithTimeout:(double)arg1 endpointsCompletion:(CDUnknownBlockType)arg2;
- (void)beginSearchWithTimeout:(double)arg1 mapCompletion:(CDUnknownBlockType)arg2;
- (void)cancelSearch;
- (void)dealloc;
- (id)initWithOutputDeviceUIDs:(id)arg1 outputDeviceGroupID:(id)arg2 features:(unsigned int)arg3;

@end

