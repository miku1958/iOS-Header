//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <VoiceMemos/RCCaptureOutputWriterDelegate-Protocol.h>
#import <VoiceMemos/RCWaveformDataSourceObserver-Protocol.h>

@class NSDate, NSHashTable, NSString, RCAVState, RCAudioSessionRoutingAssertion, RCCaptureInputDevice, RCCaptureInputWaveformDataSource, RCCaptureOutputWriter, SBSSecureAppAssertion;
@protocol OS_dispatch_group;

@interface RCCaptureSession : NSObject <RCCaptureOutputWriterDelegate, RCWaveformDataSourceObserver>
{
    RCCaptureOutputWriter *_captureOutputWriter;
    unsigned long long _backgroundTaskIdentifier;
    NSObject<OS_dispatch_group> *_endCaptureTaskGroup;
    RCAudioSessionRoutingAssertion *_captureRouteAssertion;
    long long _sessionCaptureState;
    NSString *_sessionRouteName;
    NSDate *_captureStartDate;
    BOOL _handledFinishedCapturingAfterCompletionSound;
    BOOL _handlingDidFinishCapturing;
    BOOL _deleteCapturedOutWhenFinished;
    BOOL _destinationShouldBeDeleted;
    BOOL _captureBeginSoundEffectDisabled;
    BOOL _captureEndSoundEffectDisabled;
    NSHashTable *_weakObservers;
    RCCaptureInputDevice *_inputDevice;
    RCCaptureInputWaveformDataSource *_captureWaveformDataSource;
    SBSSecureAppAssertion *_assertion;
}

@property (readonly, nonatomic) RCAVState *AVState;
@property (strong, nonatomic) SBSSecureAppAssertion *assertion; // @synthesize assertion=_assertion;
@property (readonly, nonatomic) double captureDestinationComposedDuration;
@property (readonly, nonatomic) RCCaptureInputWaveformDataSource *captureWaveformDataSource; // @synthesize captureWaveformDataSource=_captureWaveformDataSource;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) RCCaptureInputDevice *inputDevice; // @synthesize inputDevice=_inputDevice;
@property (readonly, nonatomic) BOOL isCaptureSessionFinished;
@property (readonly) double storeDemoTimeLimit;
@property (readonly) Class superclass;

+ (void)playCaptureDidFinishSoundEffectWithCompletionBlock:(CDUnknownBlockType)arg1;
+ (void)playCaptureWillStartSoundEffectWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void).cxx_destruct;
- (void)_applicationWillTerminateNotification:(id)arg1;
- (BOOL)_attachInputToCaptureSession:(id)arg1;
- (void)_beginAVCapturingToDestinationInitiallyPaused:(BOOL)arg1;
- (void)_captureInputDeviceAvailabilityDidChangeNotification:(id)arg1;
- (void)_captureInputDeviceRouteDidChangeNotification:(id)arg1;
- (void)_closeCaptureSession;
- (void)_deleteCaptureDestinationAndPostDidEndNotification:(id)arg1;
- (void)_enumerateCaptureSessionObserversWithBlock:(CDUnknownBlockType)arg1;
- (void)_handleCaptureSessionDidError:(id)arg1;
- (BOOL)_handleFinishWritingByRestartingCaptureForError:(id)arg1 testOnly:(BOOL)arg2;
- (void)_onMainQueueHandleCaptureDidFinishCapturingAfterCompletionSound;
- (BOOL)_openAVCaptureSessionAndWaitUntilRunning;
- (void)_postToObserversWithBlock:(CDUnknownBlockType)arg1;
- (void)_setPostPrepareRequestedState:(long long)arg1;
- (void)_takeSBSecureAppAssertion:(BOOL)arg1;
- (void)addCaptureSessionObserver:(id)arg1;
- (BOOL)canResumeCapturingAtCompositionDestinationTime:(double)arg1;
- (void)captureOutputWriter:(id)arg1 captureSessionDidTerminateWithError:(id)arg2;
- (void)captureOutputWriter:(id)arg1 didFinishWritingToOutputFileAtURL:(id)arg2 error:(id)arg3;
- (void)captureOutputWriter:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer *)arg2;
- (void)captureOutputWriter:(id)arg1 didPauseWritingToOutputFileAtURL:(id)arg2;
- (void)captureOutputWriter:(id)arg1 didResumeWritingToOutputFileAtURL:(id)arg2;
- (void)captureOutputWriter:(id)arg1 didStartWritingToOutputFileAtURL:(id)arg2;
- (void)captureOutputWriter:(id)arg1 willFinishWritingToOutputFileAtURL:(id)arg2 error:(id)arg3;
- (void)dealloc;
- (void)deleteCapturedOutWhenFinished;
- (void)disableCaptureBeginSoundEffect;
- (void)disableCaptureEndSoundEffect;
- (void)finishCapturing;
- (id)init;
- (id)initWithInputDevice:(id)arg1 captureWaveformDataSource:(id)arg2;
- (BOOL)isCaptureActive;
- (BOOL)isCapturePaused;
- (BOOL)isPreparing;
- (void)pauseCapturing;
- (void)prepareToCaptureWithPreparedHandler:(CDUnknownBlockType)arg1;
- (void)removeCaptureSessionObserver:(id)arg1;
- (void)resumeCapturing;
- (void)waveformDataSource:(id)arg1 didLoadWaveformSegment:(id)arg2;
- (void)waveformDataSourceDidFinishLoading:(id)arg1;

@end

