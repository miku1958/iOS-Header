//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSString, PCPersistentTimer, SBFPasscodeLockAssertionManager, SBFPasscodeLockDisableAssertion;
@protocol SBFDeviceLockModel;

@interface SBFDeviceLockController : NSObject
{
    int _lockState;
    BOOL _isBlockedForThermalCondition;
    double _lastLockDate;
    id<SBFDeviceLockModel> _lockoutModel;
    PCPersistentTimer *_deviceLockUnblockTimer;
    BOOL _cachedPasscodeLockedOrBlocked;
    BOOL _hasBeenUnlockedOnceSinceBoot;
    SBFPasscodeLockAssertionManager *_assertionManager;
    SBFPasscodeLockDisableAssertion *_transientPasscodeCheckingAssertion;
    BOOL _okToSendNotifications;
    NSString *_lastIncorrectPasscodeAttempt;
    BOOL _shouldFetchPasscodeLockState;
    BOOL _lastPasscodeLockStateWasLocked;
    struct __CFRunLoopObserver *_runLoopObserver;
    BOOL _deviceHasPasscodeSet;
}

+ (int)_extendedKeybagState;
+ (BOOL)_isInBioUnlockState;
+ (id)_selectDeviceLockModel;
+ (BOOL)_shouldTreatExtendedKeybagStateAsLocked:(int)arg1;
- (void).cxx_destruct;
- (void)_addDeviceLockDisableAssertion:(id)arg1;
- (void)_cachePassword:(id)arg1;
- (void)_clearBlockedState;
- (void)_clearUnblockTimer;
- (void)_enablePasscodeLockImmediately:(BOOL)arg1;
- (void)_invalidateCachedPasscodeLockState;
- (BOOL)_isAssertionValid:(id)arg1;
- (void)_keybagLockStateChangedTo:(int)arg1;
- (void)_lockStateChangedFrom:(int)arg1 to:(int)arg2;
- (void)_noteBlockedReasonsMayHaveChanged;
- (void)_notePasscodeLockedOrBlockedStateMayHaveChanged:(BOOL)arg1;
- (void)_notifyOfFirstUnlock;
- (BOOL)_permanentlyBlocked;
- (void)_removeDeviceLockDisableAssertion:(id)arg1;
- (void)_scheduleUnblockTimer;
- (void)_setLockState:(int)arg1;
- (void)_setupRunLoopObserverIfNecessary;
- (BOOL)_shouldLockDeviceNow;
- (BOOL)_shouldSuppressLockOnInit;
- (BOOL)_shouldVetoPasscodeLock;
- (BOOL)_temporarilyBlocked;
- (void)_unblockTimerFired;
- (void)_uncachePasscodeIfNecessary;
- (BOOL)_unlockWithPasscode:(id)arg1 outError:(id *)arg2;
- (void)_updateDeviceHasPasscodeSetForLockState:(int)arg1;
- (void)_updateDeviceLockedStateLockingImmediatelyIfNecessary:(BOOL)arg1;
- (void)_wipeDevice;
- (BOOL)attemptDeviceUnlockWithPassword:(id)arg1 appRequested:(BOOL)arg2;
- (void)dealloc;
- (id)description;
- (BOOL)deviceHasBeenPasscodeUnlockedOnceSinceBoot;
- (BOOL)deviceHasPasscodeSet;
- (void)deviceLockModelRequestsDeviceWipe:(id)arg1;
- (void)deviceLockStateMayHaveChangedForModel:(id)arg1;
- (void)enablePasscodeLockIfNecessary;
- (void)enablePasscodeLockImmediately;
- (void)enablePasscodeLockImmediatelyIfNecessary;
- (id)init;
- (BOOL)isBlocked;
- (BOOL)isBlockedForThermalCondition;
- (BOOL)isPasscodeLocked;
- (BOOL)isPasscodeLockedCached;
- (BOOL)isPasscodeLockedOrBlocked;
- (BOOL)isPermanentlyBlocked:(double *)arg1;
- (id)lastLockDate;
- (void)notePasscodeEntryBegan;
- (void)notePasscodeEntryCancelled;
- (void)setBlockedForThermalCondition:(BOOL)arg1;
- (void)setupUnblockTimerIfNeeded;
- (void)synchronize;

@end

