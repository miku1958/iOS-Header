//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <MediaPlaybackCore/MFPlaybackStackControllerDelegate-Protocol.h>
#import <MediaPlaybackCore/MPAVQueueControllerDelegate-Protocol.h>
#import <MediaPlaybackCore/MPCAssetLoaderDelegate-Protocol.h>
#import <MediaPlaybackCore/MPCPlaybackEngineImplementation-Protocol.h>

@class AVPictureInPictureController, AVPlayerViewController, MPAVItem, MPCErrorControllerImplementation, MPCExternalPlaybackControllerImplementation, MPCItemBookmarker, MPCLeaseController, MPCMediaFoundationTranslator, MPCPlaybackEngine, MPQueuePlayer, MPVideoView, NSDictionary, NSString;
@protocol MFAssetLoading, MFPlaybackStackController><MFQueueManagement, MPAVQueueController;

@interface _MPCPlaybackEngineMediaFoundationImplementation : NSObject <MFPlaybackStackControllerDelegate, MPAVQueueControllerDelegate, MPCAssetLoaderDelegate, MPCPlaybackEngineImplementation>
{
    BOOL _wantsPictureInPicture;
    BOOL _automaticallyHidesVideoLayersForMusicVideosWhenApplicationBackgrounds;
    BOOL _hasPlayedSuccessfully;
    BOOL _autoPlayWhenLikelyToKeepUp;
    MPCPlaybackEngine *_playbackEngine;
    id<MPAVQueueController> _queueController;
    MPAVItem *_currentItem;
    MPQueuePlayer *_queuePlayer;
    double _currentTime;
    MPVideoView *_videoView;
    long long _state;
    long long _stateBeforeInterruption;
    AVPictureInPictureController *_pictureInPictureController;
    long long _actionAtQueueEnd;
    id<MFPlaybackStackController><MFQueueManagement> _playbackStackController;
    MPCItemBookmarker *_bookmarker;
    MPCMediaFoundationTranslator *_translator;
    MPCErrorControllerImplementation *_errorController;
    MPCExternalPlaybackControllerImplementation *_externalPlaybackController;
    id<MFAssetLoading> _assetLoader;
    MPCLeaseController *_leaseController;
    unsigned long long _stateHandle;
}

@property (readonly, nonatomic) NSDictionary *_stateDictionary;
@property (nonatomic) long long actionAtQueueEnd; // @synthesize actionAtQueueEnd=_actionAtQueueEnd;
@property (strong, nonatomic) id<MFAssetLoading> assetLoader; // @synthesize assetLoader=_assetLoader;
@property (nonatomic) BOOL autoPlayWhenLikelyToKeepUp; // @synthesize autoPlayWhenLikelyToKeepUp=_autoPlayWhenLikelyToKeepUp;
@property (nonatomic) BOOL automaticallyHidesVideoLayersForMusicVideosWhenApplicationBackgrounds; // @synthesize automaticallyHidesVideoLayersForMusicVideosWhenApplicationBackgrounds=_automaticallyHidesVideoLayersForMusicVideosWhenApplicationBackgrounds;
@property (strong, nonatomic) MPCItemBookmarker *bookmarker; // @synthesize bookmarker=_bookmarker;
@property (readonly, nonatomic) MPAVItem *currentItem; // @synthesize currentItem=_currentItem;
@property (nonatomic) double currentTime; // @synthesize currentTime=_currentTime;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (strong, nonatomic) MPCErrorControllerImplementation *errorController; // @synthesize errorController=_errorController;
@property (strong, nonatomic) MPCExternalPlaybackControllerImplementation *externalPlaybackController; // @synthesize externalPlaybackController=_externalPlaybackController;
@property (nonatomic) BOOL hasPlayedSuccessfully; // @synthesize hasPlayedSuccessfully=_hasPlayedSuccessfully;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) MPCLeaseController *leaseController; // @synthesize leaseController=_leaseController;
@property (readonly, nonatomic) AVPictureInPictureController *pictureInPictureController; // @synthesize pictureInPictureController=_pictureInPictureController;
@property (readonly, weak, nonatomic) MPCPlaybackEngine *playbackEngine; // @synthesize playbackEngine=_playbackEngine;
@property (strong, nonatomic) id<MFPlaybackStackController><MFQueueManagement> playbackStackController; // @synthesize playbackStackController=_playbackStackController;
@property (readonly, nonatomic) AVPlayerViewController *playerViewController;
@property (strong, nonatomic) id<MPAVQueueController> queueController; // @synthesize queueController=_queueController;
@property (readonly, nonatomic) MPQueuePlayer *queuePlayer; // @synthesize queuePlayer=_queuePlayer;
@property (readonly, nonatomic) long long state; // @synthesize state=_state;
@property (readonly, nonatomic) long long stateBeforeInterruption; // @synthesize stateBeforeInterruption=_stateBeforeInterruption;
@property (nonatomic) unsigned long long stateHandle; // @synthesize stateHandle=_stateHandle;
@property (readonly) Class superclass;
@property (strong, nonatomic) MPCMediaFoundationTranslator *translator; // @synthesize translator=_translator;
@property (readonly, nonatomic) MPVideoView *videoView; // @synthesize videoView=_videoView;
@property (nonatomic) BOOL wantsPictureInPicture; // @synthesize wantsPictureInPicture=_wantsPictureInPicture;

+ (id)describePlayer:(id)arg1;
- (void).cxx_destruct;
- (id)_MPAVItemForMFPlayerItem:(id)arg1;
- (void)_logTimeJumpForItem:(id)arg1 fromTime:(double)arg2 toTime:(double)arg3 userInitiated:(BOOL)arg4 timeStamp:(id)arg5;
- (void)_resetPlaybackStack;
- (void)_setupPlaybackStackWithPlaybackEngine:(id)arg1 queueController:(id)arg2;
- (void)_updateAudioSessionForItem:(id)arg1;
- (void)assetLoadingDidCompleteForItem:(id)arg1 error:(id)arg2;
- (void)assetLoadingDidStartForItem:(id)arg1;
- (BOOL)becomeActiveWithError:(id *)arg1;
- (void)beginScanningWithDirection:(long long)arg1 identifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)beginUsingVideoLayer;
- (BOOL)changePlaybackIndexBy:(long long)arg1 deltaType:(long long)arg2 ignoreElapsedTime:(BOOL)arg3 force:(BOOL)arg4 error:(id *)arg5;
- (void)currentItemWillChangeFromItem:(id)arg1 toItem:(id)arg2 timeStamp:(id)arg3;
- (void)dealloc;
- (void)didReachEndOfQueueWithReason:(id)arg1;
- (void)endPlayback;
- (void)endPlaybackWithIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)endScanningWithIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)endUsingVideoLayer;
- (void)firstVideoFrameWasRenderedForItem:(id)arg1 timeStamp:(id)arg2;
- (id)initWithPlaybackEngine:(id)arg1;
- (void)interruptionDidBeginWithInterruptor:(id)arg1 timeStamp:(id)arg2;
- (void)interruptionDidFinishForInterruptor:(id)arg1 shouldResume:(BOOL)arg2 timeStamp:(id)arg3;
- (void)itemDidBecomeCurrent:(id)arg1 timeStamp:(id)arg2;
- (void)itemDidFailToLoad:(id)arg1 error:(id)arg2 timeStamp:(id)arg3;
- (void)itemDidFailToPlayToEnd:(id)arg1 error:(id)arg2 timeStamp:(id)arg3;
- (void)itemDidPlayToEnd:(id)arg1 timeStamp:(id)arg2;
- (void)itemDidResignCurrent:(id)arg1 timeStamp:(id)arg2;
- (void)itemIsReadyToPlay:(id)arg1 timeStamp:(id)arg2;
- (void)jumpToTime:(double)arg1 identifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)loadSessionWithQueueController:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)mediaServicesInterruptionDidBeginWithTimeStamp:(id)arg1;
- (void)mediaServicesInterruptionDidEndWithTimeStamp:(id)arg1;
- (void)pause;
- (void)pauseWithFadeout:(float)arg1;
- (void)pauseWithFadeout:(double)arg1 identifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)pauseWithIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)playWithOptions:(unsigned long long)arg1;
- (void)playWithRate:(float)arg1 identifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)playbackBufferStateDidChangeToState:(long long)arg1 forItem:(id)arg2 timeStamp:(id)arg3;
- (void)playbackDidReachQueueEndWithTimeStamp:(id)arg1;
- (void)playbackDidStartForItem:(id)arg1 rate:(float)arg2 timeStamp:(id)arg3;
- (void)playbackDidStopForItem:(id)arg1 timeStamp:(id)arg2;
- (void)playbackIsBlockedOnNonPlayableItem:(id)arg1;
- (void)playbackIsLikelyToKeepUp:(BOOL)arg1 forItem:(id)arg2 timeStamp:(id)arg3;
- (void)playbackRateDidChangeToRate:(float)arg1 forItem:(id)arg2 timeStamp:(id)arg3;
- (void)playbackTimeDidChangeTo:(double)arg1 forItem:(id)arg2 reason:(long long)arg3 timeStamp:(id)arg4;
- (void)playbackWaitingToPlayForItem:(id)arg1 reason:(id)arg2 timeStamp:(id)arg3;
- (void)queueController:(id)arg1 didChangeActionAtQueueEnd:(long long)arg2;
- (void)queueController:(id)arg1 didChangeContentsWithReplacementPlaybackContext:(id)arg2;
- (void)queueController:(id)arg1 didChangeRepeatType:(long long)arg2;
- (void)queueController:(id)arg1 didChangeShuffleType:(long long)arg2;
- (void)queueController:(id)arg1 didIncrementVersionForSegment:(id)arg2;
- (void)queueController:(id)arg1 failedToLoadItem:(id)arg2;
- (void)queueControllerDidChangeContents:(id)arg1;
- (void)reloadWithPlaybackContext:(id)arg1 identifier:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)routeDidChange:(BOOL)arg1 metadata:(id)arg2 timeStamp:(id)arg3;
- (void)screenRecordingDidChange:(BOOL)arg1 timeStamp:(id)arg2;
- (void)setRate:(float)arg1 identifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)skipWithDirection:(long long)arg1 identifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (BOOL)skipWithDirectionShouldJumpToItemStart:(long long)arg1;
- (void)stateDidChangeFromState:(long long)arg1 toState:(long long)arg2 timeStamp:(id)arg3;
- (void)togglePlaybackWithIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)updateAudioSession;
- (void)userActionDidBegin:(id)arg1;
- (void)userActionDidEnd:(id)arg1 error:(id)arg2;

@end

