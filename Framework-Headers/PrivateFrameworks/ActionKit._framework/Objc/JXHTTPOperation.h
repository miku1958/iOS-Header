//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <ActionKit/JXURLConnectionOperation.h>

@class NSArray, NSDate, NSDictionary, NSNumber, NSObject, NSString, NSURL, NSURLAuthenticationChallenge, NSURLCredential;
@protocol JXHTTPOperationDelegate, JXHTTPRequestBody, OS_dispatch_queue;

@interface JXHTTPOperation : JXURLConnectionOperation
{
    BOOL _useCredentialStorage;
    BOOL _trustAllHosts;
    BOOL _updatesNetworkActivityIndicator;
    BOOL _performsBlocksOnMainQueue;
    NSObject<JXHTTPOperationDelegate> *_delegate;
    NSObject<JXHTTPRequestBody> *_requestBody;
    NSString *_uniqueString;
    NSString *_responseDataFilePath;
    id _userObject;
    NSURLAuthenticationChallenge *_authenticationChallenge;
    NSURLCredential *_credential;
    NSArray *_trustedHosts;
    NSString *_username;
    NSString *_password;
    NSNumber *_downloadProgress;
    NSNumber *_uploadProgress;
    NSDate *_startDate;
    NSDate *_finishDate;
    CDUnknownBlockType _willStartBlock;
    CDUnknownBlockType _willNeedNewBodyStreamBlock;
    CDUnknownBlockType _willSendRequestForAuthenticationChallengeBlock;
    CDUnknownBlockType _didStartBlock;
    CDUnknownBlockType _didReceiveResponseBlock;
    CDUnknownBlockType _didReceiveDataBlock;
    CDUnknownBlockType _didSendDataBlock;
    CDUnknownBlockType _didFinishLoadingBlock;
    CDUnknownBlockType _didFailBlock;
    CDUnknownBlockType _willCacheResponseBlock;
    CDUnknownBlockType _willSendRequestRedirectBlock;
    NSObject<OS_dispatch_queue> *_blockQueue;
}

@property (strong) NSURLAuthenticationChallenge *authenticationChallenge; // @synthesize authenticationChallenge=_authenticationChallenge;
@property (strong) NSObject<OS_dispatch_queue> *blockQueue; // @synthesize blockQueue=_blockQueue;
@property (strong) NSURLCredential *credential; // @synthesize credential=_credential;
@property (weak) NSObject<JXHTTPOperationDelegate> *delegate; // @synthesize delegate=_delegate;
@property (copy) CDUnknownBlockType didFailBlock; // @synthesize didFailBlock=_didFailBlock;
@property (copy) CDUnknownBlockType didFinishLoadingBlock; // @synthesize didFinishLoadingBlock=_didFinishLoadingBlock;
@property (copy) CDUnknownBlockType didReceiveDataBlock; // @synthesize didReceiveDataBlock=_didReceiveDataBlock;
@property (copy) CDUnknownBlockType didReceiveResponseBlock; // @synthesize didReceiveResponseBlock=_didReceiveResponseBlock;
@property (copy) CDUnknownBlockType didSendDataBlock; // @synthesize didSendDataBlock=_didSendDataBlock;
@property (copy) CDUnknownBlockType didStartBlock; // @synthesize didStartBlock=_didStartBlock;
@property (strong) NSNumber *downloadProgress; // @synthesize downloadProgress=_downloadProgress;
@property (readonly) double elapsedSeconds;
@property (strong) NSDate *finishDate; // @synthesize finishDate=_finishDate;
@property (copy) NSString *password; // @synthesize password=_password;
@property BOOL performsBlocksOnMainQueue; // @synthesize performsBlocksOnMainQueue=_performsBlocksOnMainQueue;
@property (strong) NSObject<JXHTTPRequestBody> *requestBody; // @synthesize requestBody=_requestBody;
@property (nonatomic) unsigned long long requestCachePolicy;
@property (strong, nonatomic) NSDictionary *requestHeaders;
@property (strong, nonatomic) NSURL *requestMainDocumentURL;
@property (strong, nonatomic) NSString *requestMethod;
@property (nonatomic) unsigned long long requestNetworkServiceType;
@property (nonatomic) BOOL requestShouldHandleCookies;
@property (nonatomic) BOOL requestShouldUsePipelining;
@property (nonatomic) double requestTimeoutInterval;
@property (strong, nonatomic) NSURL *requestURL;
@property (copy, nonatomic) NSString *responseDataFilePath; // @synthesize responseDataFilePath=_responseDataFilePath;
@property (strong) NSDate *startDate; // @synthesize startDate=_startDate;
@property BOOL trustAllHosts; // @synthesize trustAllHosts=_trustAllHosts;
@property (copy) NSArray *trustedHosts; // @synthesize trustedHosts=_trustedHosts;
@property (strong) NSString *uniqueString; // @synthesize uniqueString=_uniqueString;
@property BOOL updatesNetworkActivityIndicator; // @synthesize updatesNetworkActivityIndicator=_updatesNetworkActivityIndicator;
@property (strong) NSNumber *uploadProgress; // @synthesize uploadProgress=_uploadProgress;
@property BOOL useCredentialStorage; // @synthesize useCredentialStorage=_useCredentialStorage;
@property (strong) id userObject; // @synthesize userObject=_userObject;
@property (copy) NSString *username; // @synthesize username=_username;
@property (copy) CDUnknownBlockType willCacheResponseBlock; // @synthesize willCacheResponseBlock=_willCacheResponseBlock;
@property (copy) CDUnknownBlockType willNeedNewBodyStreamBlock; // @synthesize willNeedNewBodyStreamBlock=_willNeedNewBodyStreamBlock;
@property (copy) CDUnknownBlockType willSendRequestForAuthenticationChallengeBlock; // @synthesize willSendRequestForAuthenticationChallengeBlock=_willSendRequestForAuthenticationChallengeBlock;
@property (copy) CDUnknownBlockType willSendRequestRedirectBlock; // @synthesize willSendRequestRedirectBlock=_willSendRequestRedirectBlock;
@property (copy) CDUnknownBlockType willStartBlock; // @synthesize willStartBlock=_willStartBlock;

+ (id)withURLString:(id)arg1;
+ (id)withURLString:(id)arg1 queryParameters:(id)arg2;
- (void).cxx_destruct;
- (void)addValue:(id)arg1 forRequestHeader:(id)arg2;
- (CDUnknownBlockType)blockForSelector:(SEL)arg1;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didSendBodyData:(long long)arg2 totalBytesWritten:(long long)arg3 totalBytesExpectedToWrite:(long long)arg4;
- (id)connection:(id)arg1 needNewBodyStream:(id)arg2;
- (id)connection:(id)arg1 willCacheResponse:(id)arg2;
- (id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (void)connection:(id)arg1 willSendRequestForAuthenticationChallenge:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (BOOL)connectionShouldUseCredentialStorage:(id)arg1;
- (void)dealloc;
- (void)finalizeRequestBody;
- (id)init;
- (void)main;
- (void)performDelegateMethod:(SEL)arg1;
- (id)responseData;
- (long long)responseExpectedContentLength;
- (id)responseExpectedFileName;
- (id)responseHeaders;
- (id)responseJSON;
- (id)responseMIMEType;
- (long long)responseStatusCode;
- (id)responseStatusString;
- (id)responseString;
- (id)responseTextEncodingName;
- (id)responseURL;
- (void)setValue:(id)arg1 forRequestHeader:(id)arg2;
- (void)willFinish;

@end

