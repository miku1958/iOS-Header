//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <UIKit/UIViewController.h>

#import <ActionKit/NSURLSessionDataDelegate-Protocol.h>
#import <ActionKit/UIWebViewDelegate-Protocol.h>

@class BOXContentClient, NSArray, NSDictionary, NSError, NSMutableData, NSMutableSet, NSString, NSURL, NSURLAuthenticationChallenge, NSURLCredential, NSURLResponse, NSURLSession, UIActivityIndicatorView;

@interface BOXAuthorizationViewController : UIViewController <NSURLSessionDataDelegate, UIWebViewDelegate>
{
    BOOL _isNTLMAuth;
    NSURL *_authorizeURL;
    NSURLSession *_URLSession;
    NSURLResponse *_connectionResponse;
    NSMutableData *_connectionData;
    NSError *_connectionError;
    NSString *_connectionErrorMessage;
    NSURLAuthenticationChallenge *_authenticationChallenge;
    NSURLCredential *_authenticationChallengeCredential;
    NSMutableSet *_hostsThatCanUseWebViewDirectly;
    NSArray *_preexistingCookies;
    unsigned long long _preexistingCookiePolicy;
    BOXContentClient *_SDKClient;
    CDUnknownBlockType _completionBlock;
    CDUnknownBlockType _cancelBlock;
    NSString *_redirectURI;
    NSDictionary *_headers;
    long long _ntlmAuthFailures;
    long long _authChallengeCycles;
    UIActivityIndicatorView *_activityIndicator;
    unsigned long long _backgroundTaskID;
}

@property (strong, nonatomic) BOXContentClient *SDKClient; // @synthesize SDKClient=_SDKClient;
@property (strong, nonatomic) NSURLSession *URLSession; // @synthesize URLSession=_URLSession;
@property (strong, nonatomic) UIActivityIndicatorView *activityIndicator; // @synthesize activityIndicator=_activityIndicator;
@property (nonatomic) long long authChallengeCycles; // @synthesize authChallengeCycles=_authChallengeCycles;
@property (strong, nonatomic) NSURLAuthenticationChallenge *authenticationChallenge; // @synthesize authenticationChallenge=_authenticationChallenge;
@property (strong, nonatomic) NSURLCredential *authenticationChallengeCredential; // @synthesize authenticationChallengeCredential=_authenticationChallengeCredential;
@property (strong, nonatomic) NSURL *authorizeURL; // @synthesize authorizeURL=_authorizeURL;
@property (nonatomic) unsigned long long backgroundTaskID; // @synthesize backgroundTaskID=_backgroundTaskID;
@property (copy, nonatomic) CDUnknownBlockType cancelBlock; // @synthesize cancelBlock=_cancelBlock;
@property (copy, nonatomic) CDUnknownBlockType completionBlock; // @synthesize completionBlock=_completionBlock;
@property (strong, nonatomic) NSMutableData *connectionData; // @synthesize connectionData=_connectionData;
@property (strong, nonatomic) NSError *connectionError; // @synthesize connectionError=_connectionError;
@property (strong, nonatomic) NSString *connectionErrorMessage; // @synthesize connectionErrorMessage=_connectionErrorMessage;
@property (strong, nonatomic) NSURLResponse *connectionResponse; // @synthesize connectionResponse=_connectionResponse;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) NSDictionary *headers; // @synthesize headers=_headers;
@property (strong, nonatomic) NSMutableSet *hostsThatCanUseWebViewDirectly; // @synthesize hostsThatCanUseWebViewDirectly=_hostsThatCanUseWebViewDirectly;
@property (nonatomic) BOOL isNTLMAuth; // @synthesize isNTLMAuth=_isNTLMAuth;
@property (nonatomic) long long ntlmAuthFailures; // @synthesize ntlmAuthFailures=_ntlmAuthFailures;
@property (nonatomic) unsigned long long preexistingCookiePolicy; // @synthesize preexistingCookiePolicy=_preexistingCookiePolicy;
@property (strong, nonatomic) NSArray *preexistingCookies; // @synthesize preexistingCookies=_preexistingCookies;
@property (strong, nonatomic) NSString *redirectURI; // @synthesize redirectURI=_redirectURI;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 willCacheResponse:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)URLSession:(id)arg1 task:(id)arg2 didReceiveChallenge:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)cancel:(id)arg1;
- (void)clearCookies;
- (void)dealloc;
- (void)didReceiveBackgroundNotification:(id)arg1;
- (void)didReceiveForegroundNotification:(id)arg1;
- (void)endBackgroundTask;
- (void)failAuthenticationWithURLSessionTask:(id)arg1 message:(id)arg2 error:(id)arg3;
- (void)handleConnectionErrorWithError:(id)arg1 message:(id)arg2;
- (id)initWithSDKClient:(id)arg1 authorizeURL:(id)arg2 redirectURI:(id)arg3 headers:(id)arg4 completionBlock:(CDUnknownBlockType)arg5 cancelBlock:(CDUnknownBlockType)arg6;
- (id)initWithSDKClient:(id)arg1 completionBlock:(CDUnknownBlockType)arg2 cancelBlock:(CDUnknownBlockType)arg3;
- (BOOL)isLoginRedirectionRequest:(id)arg1;
- (void)loadAuthorizationURL;
- (void)loadView;
- (void)prepareForDismissal;
- (void)setWebViewCanBeUsedDirectly:(BOOL)arg1 forHost:(id)arg2;
- (void)viewDidAppear:(BOOL)arg1;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)arg1;
- (void)viewWillLayoutSubviews;
- (void)webView:(id)arg1 didFailLoadWithError:(id)arg2;
- (BOOL)webView:(id)arg1 shouldStartLoadWithRequest:(id)arg2 navigationType:(long long)arg3;
- (BOOL)webViewCanBeUsedDirectlyForHost:(id)arg1;
- (void)webViewDidFinishLoad:(id)arg1;
- (void)webViewDidStartLoad:(id)arg1;

@end

