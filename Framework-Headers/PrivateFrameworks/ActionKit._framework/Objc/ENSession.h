//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <ActionKit/ENAuthenticatorDelegate-Protocol.h>
#import <ActionKit/ENBusinessNoteStoreClientDelegate-Protocol.h>
#import <ActionKit/ENLinkedNoteStoreClientDelegate-Protocol.h>

@class EDAMUser, ENAuthCache, ENBusinessNoteStoreClient, ENNoteStoreClient, ENPreferencesStore, ENUserStoreClient, NSArray, NSDate, NSString;
@protocol ENAuthenticator, ENSDKLogging, OS_dispatch_queue;

@interface ENSession : NSObject <ENLinkedNoteStoreClientDelegate, ENBusinessNoteStoreClientDelegate, ENAuthenticatorDelegate>
{
    BOOL _isAuthenticated;
    BOOL _supportsLinkedAppNotebook;
    id<ENSDKLogging> _logger;
    NSString *_sourceApplication;
    long long _personalUploadUsage;
    long long _personalUploadLimit;
    long long _businessUploadUsage;
    long long _businessUploadLimit;
    id<ENAuthenticator> _authenticator;
    CDUnknownBlockType _authenticationCompletion;
    NSString *_sessionHost;
    EDAMUser *_user;
    NSString *_primaryAuthenticationToken;
    EDAMUser *_businessUser;
    ENPreferencesStore *_preferences;
    ENUserStoreClient *_userStore;
    ENNoteStoreClient *_primaryNoteStore;
    ENBusinessNoteStoreClient *_businessNoteStore;
    ENAuthCache *_authCache;
    NSArray *_notebooksCache;
    NSDate *_notebooksCacheDate;
    NSObject<OS_dispatch_queue> *_thumbnailQueue;
    ENUserStoreClient *_userStorePendingRevocation;
}

@property (strong, nonatomic) ENAuthCache *authCache; // @synthesize authCache=_authCache;
@property (copy, nonatomic) CDUnknownBlockType authenticationCompletion; // @synthesize authenticationCompletion=_authenticationCompletion;
@property (strong, nonatomic) id<ENAuthenticator> authenticator; // @synthesize authenticator=_authenticator;
@property (readonly, nonatomic) NSString *businessDisplayName;
@property (strong, nonatomic) ENBusinessNoteStoreClient *businessNoteStore; // @synthesize businessNoteStore=_businessNoteStore;
@property (nonatomic) long long businessUploadLimit; // @synthesize businessUploadLimit=_businessUploadLimit;
@property (nonatomic) long long businessUploadUsage; // @synthesize businessUploadUsage=_businessUploadUsage;
@property (strong, nonatomic) EDAMUser *businessUser; // @synthesize businessUser=_businessUser;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) BOOL isAuthenticated; // @synthesize isAuthenticated=_isAuthenticated;
@property (readonly, nonatomic) BOOL isAuthenticationInProgress;
@property (readonly, nonatomic) BOOL isBusinessUser;
@property (readonly, nonatomic) BOOL isPremiumUser;
@property (strong, nonatomic) id<ENSDKLogging> logger; // @synthesize logger=_logger;
@property (strong, nonatomic) NSArray *notebooksCache; // @synthesize notebooksCache=_notebooksCache;
@property (strong, nonatomic) NSDate *notebooksCacheDate; // @synthesize notebooksCacheDate=_notebooksCacheDate;
@property (nonatomic) long long personalUploadLimit; // @synthesize personalUploadLimit=_personalUploadLimit;
@property (nonatomic) long long personalUploadUsage; // @synthesize personalUploadUsage=_personalUploadUsage;
@property (strong, nonatomic) ENPreferencesStore *preferences; // @synthesize preferences=_preferences;
@property (copy, nonatomic) NSString *primaryAuthenticationToken; // @synthesize primaryAuthenticationToken=_primaryAuthenticationToken;
@property (strong, nonatomic) ENNoteStoreClient *primaryNoteStore; // @synthesize primaryNoteStore=_primaryNoteStore;
@property (copy, nonatomic) NSString *sessionHost; // @synthesize sessionHost=_sessionHost;
@property (copy, nonatomic) NSString *sourceApplication; // @synthesize sourceApplication=_sourceApplication;
@property (readonly) Class superclass;
@property (nonatomic) BOOL supportsLinkedAppNotebook; // @synthesize supportsLinkedAppNotebook=_supportsLinkedAppNotebook;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *thumbnailQueue; // @synthesize thumbnailQueue=_thumbnailQueue;
@property (strong, nonatomic) EDAMUser *user; // @synthesize user=_user;
@property (readonly, nonatomic) NSString *userDisplayName;
@property (strong, nonatomic) ENUserStoreClient *userStore; // @synthesize userStore=_userStore;
@property (strong, nonatomic) ENUserStoreClient *userStorePendingRevocation; // @synthesize userStorePendingRevocation=_userStorePendingRevocation;

+ (id)bundleSeedID;
+ (BOOL)checkSharedSessionSettings;
+ (id)consumerKey;
+ (id)consumerSecret;
+ (id)developerToken;
+ (id)keychainAccessGroup;
+ (id)sessionHostOverride;
+ (void)setDisableRefreshingNotebooksCacheOnLaunch:(BOOL)arg1;
+ (void)setKeychainGroup:(id)arg1;
+ (void)setSecurityApplicationGroupIdentifier:(id)arg1;
+ (void)setSharedSessionConsumerKey:(id)arg1 consumerSecret:(id)arg2 optionalHost:(id)arg3;
+ (void)setSharedSessionDeveloperToken:(id)arg1 noteStoreUrl:(id)arg2;
+ (id)sharedSession;
- (void).cxx_destruct;
- (void)addCredentials:(id)arg1;
- (BOOL)appNotebookIsLinked;
- (id)authenticationTokenForBusinessStoreClient:(id)arg1;
- (id)authenticationTokenForLinkedNotebookRef:(id)arg1;
- (id)authenticationTokenForNoteRef:(id)arg1;
- (void)authenticatorDidAuthenticateWithCredentials:(id)arg1 authInfo:(id)arg2;
- (void)authenticatorDidFailWithError:(id)arg1;
- (void)completeAuthenticationWithError:(id)arg1;
- (id)credentialStore;
- (id)credentialsForHost:(id)arg1;
- (id)currentProfileName;
- (void)dealloc;
- (void)deleteNote:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)downloadNote:(id)arg1 progress:(CDUnknownBlockType)arg2 completion:(CDUnknownBlockType)arg3;
- (void)downloadThumbnailForNote:(id)arg1 maxDimension:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)findNotesWithSearch:(id)arg1 inNotebook:(id)arg2 orScope:(unsigned long long)arg3 sortOrder:(unsigned long long)arg4 maxResults:(unsigned long long)arg5 completion:(CDUnknownBlockType)arg6;
- (void)findNotes_completeWithContext:(id)arg1 error:(id)arg2;
- (void)findNotes_findInBusinessScopeWithContext:(id)arg1;
- (void)findNotes_findInLinkedScopeWithContext:(id)arg1;
- (void)findNotes_findInPersonalScopeWithContext:(id)arg1;
- (void)findNotes_listNotebooksWithContext:(id)arg1;
- (void)findNotes_nextFindInLinkedScopeWithContext:(id)arg1;
- (void)findNotes_processResultsWithContext:(id)arg1;
- (BOOL)handleOpenURL:(id)arg1;
- (id)init;
- (BOOL)isErrorDueToRestrictedAuth:(id)arg1;
- (void)listNotebooksWithCompletion:(CDUnknownBlockType)arg1;
- (void)listNotebooks_cleanCache;
- (void)listNotebooks_completePendingSharedNotebookWithContext:(id)arg1;
- (void)listNotebooks_completeWithContext:(id)arg1 error:(id)arg2;
- (void)listNotebooks_fetchBusinessNotebooksWithContext:(id)arg1;
- (void)listNotebooks_fetchSharedBusinessNotebooksWithContext:(id)arg1;
- (void)listNotebooks_fetchSharedNotebooksWithContext:(id)arg1;
- (void)listNotebooks_listLinkedNotebooksWithContext:(id)arg1;
- (void)listNotebooks_listNotebooksWithContext:(id)arg1;
- (void)listNotebooks_listSharedNotebooksWithContext:(id)arg1;
- (void)listNotebooks_prepareResultsWithContext:(id)arg1;
- (void)listNotebooks_processBusinessNotebooksWithContext:(id)arg1;
- (void)listNotebooks_processSharedNotebooksWithContext:(id)arg1;
- (void)listWritableNotebooksWithCompletion:(CDUnknownBlockType)arg1;
- (id)noteStoreForLinkedNotebook:(id)arg1;
- (id)noteStoreForNoteRef:(id)arg1;
- (id)noteStoreForNotebook:(id)arg1;
- (id)noteStoreUrlForBusinessStoreClient:(id)arg1;
- (void)notifyAuthenticationChanged;
- (void)performPostAuthentication;
- (id)primaryCredentials;
- (void)refreshUploadUsage;
- (void)saveCredentialStore:(id)arg1;
- (void)selectInitialSessionHost;
- (void)setCurrentProfileNameFromHost:(id)arg1;
- (id)shardIdForNoteRef:(id)arg1;
- (void)shareNote:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)startup;
- (void)storeClientFailedAuthentication:(id)arg1;
- (void)unauthenticate;
- (void)unauthenticateAndRevokeAccessToken:(BOOL)arg1;
- (void)unauthenticateWithoutRevokingAccessToken;
- (void)uploadNote:(id)arg1 notebook:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)uploadNote:(id)arg1 policy:(long long)arg2 toNotebook:(id)arg3 orReplaceNote:(id)arg4 progress:(CDUnknownBlockType)arg5 completion:(CDUnknownBlockType)arg6;
- (void)uploadNote_completeWithContext:(id)arg1 error:(id)arg2;
- (void)uploadNote_createWithContext:(id)arg1;
- (void)uploadNote_determineDestinationWithContext:(id)arg1;
- (void)uploadNote_findLinkedAppNotebookWithContext:(id)arg1;
- (void)uploadNote_findSharedAppNotebookWithContext:(id)arg1;
- (void)uploadNote_updateWithContext:(id)arg1;
- (int)userID;
- (id)userStoreClientForBootstrapping;
- (id)userStoreUrl;
- (id)validBusinessAuthenticationResult;

@end

