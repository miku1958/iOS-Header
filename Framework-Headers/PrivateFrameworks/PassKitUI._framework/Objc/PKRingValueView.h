//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <UIKit/UIView.h>

#import <PassKitUI/PKRenderLoopDelegate-Protocol.h>
#import <PassKitUI/UIGestureRecognizerDelegate-Protocol.h>

@class NSDecimalNumber, NSDecimalNumberHandler, NSDictionary, NSString, PKRenderLoop, PKRingArc, PKRingArcValueView, PKRingShapeLayer, PKShapeView, UIColor, UIImpactFeedbackGenerator, UILabel;
@protocol PKRingValueViewDelegate;

@interface PKRingValueView : UIView <UIGestureRecognizerDelegate, PKRenderLoopDelegate>
{
    PKRingShapeLayer *_ringLayer;
    PKShapeView *_knobView;
    UILabel *_currentValueLabel;
    UILabel *_subValueLabel;
    PKRingArcValueView *_twelveOClockView;
    double _targetAngle;
    BOOL _useAnimationRenderPercent;
    BOOL _draggingCurrentValueCircle;
    BOOL _tappedRing;
    double _renderPercent;
    double _animationRenderPercent;
    double _currentValueLabelFontSize;
    double _subValueLabelFontSize;
    PKRenderLoop *_renderLoop;
    UIImpactFeedbackGenerator *_feedbackGenerator;
    NSDictionary *_rotationNumberToRingRotation;
    BOOL _inSmallState;
    BOOL _dragValueIncreasing;
    id<PKRingValueViewDelegate> _delegate;
    NSDecimalNumberHandler *_roundingHandler;
    double _currentValue;
    double _delta;
    double _dragArcLength;
    double _dragArcTargetValue;
    double _dragStartValue;
    PKRingArc *_dragStartArc;
    PKRingArc *_dragEndArc;
}

@property (copy, nonatomic) UIColor *baseColor;
@property (nonatomic) double currentAngle;
@property (nonatomic) double currentValue; // @synthesize currentValue=_currentValue;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) id<PKRingValueViewDelegate> delegate; // @synthesize delegate=_delegate;
@property (nonatomic) double delta; // @synthesize delta=_delta;
@property (readonly, copy) NSString *description;
@property (nonatomic) double dragArcLength; // @synthesize dragArcLength=_dragArcLength;
@property (nonatomic) double dragArcTargetValue; // @synthesize dragArcTargetValue=_dragArcTargetValue;
@property (strong, nonatomic) PKRingArc *dragEndArc; // @synthesize dragEndArc=_dragEndArc;
@property (strong, nonatomic) PKRingArc *dragStartArc; // @synthesize dragStartArc=_dragStartArc;
@property (nonatomic) double dragStartValue; // @synthesize dragStartValue=_dragStartValue;
@property (nonatomic) BOOL dragValueIncreasing; // @synthesize dragValueIncreasing=_dragValueIncreasing;
@property (readonly) unsigned long long hash;
@property (nonatomic) BOOL inSmallState; // @synthesize inSmallState=_inSmallState;
@property (nonatomic) double ringWidth;
@property (readonly, nonatomic) NSDecimalNumber *roundedTargetValue;
@property (nonatomic) NSDecimalNumberHandler *roundingHandler; // @synthesize roundingHandler=_roundingHandler;
@property (readonly) Class superclass;
@property (readonly, nonatomic) double targetValue;

+ (BOOL)_processRingRotations:(id)arg1 rotationNumberToRingRotation:(id *)arg2 stickyAngle:(double)arg3;
+ (id)invalidRingArcsForRingRotations:(id)arg1 stickyAngle:(double)arg2;
- (void).cxx_destruct;
- (double)_angleForValue:(double)arg1;
- (id)_blendFromLinearColor:(id)arg1 toLinearColor:(id)arg2 withProgress:(double)arg3;
- (struct CGPoint)_center;
- (struct CGPoint)_centerPointAtAngle:(double)arg1;
- (id)_currentRingRotation;
- (unsigned long long)_currentRotationNumber;
- (BOOL)_currentValueCircleContainsPoint:(struct CGPoint)arg1;
- (void)_dragEnded:(id)arg1;
- (void)_dragMoved:(id)arg1;
- (void)_dragRecognizerChanged:(id)arg1;
- (void)_dragStarted:(id)arg1;
- (struct CGRect)_insetBounds;
- (BOOL)_isDragging;
- (double)_maxValue;
- (double)_minValue;
- (double)_offsetAngle:(double)arg1;
- (double)_offsetCurrentAngle;
- (double)_positiveAngleForAngle:(double)arg1;
- (double)_radius;
- (id)_ringArcForValue:(double)arg1;
- (BOOL)_ringContainsPoint:(struct CGPoint)arg1;
- (unsigned long long)_rotationNumberForAngle:(double)arg1;
- (unsigned long long)_rotationNumberForValue:(double)arg1;
- (double)_roundValue:(double)arg1 delta:(double)arg2;
- (id)_twelveOClockViewSymbol;
- (void)_updateTargetAngle:(double)arg1;
- (void)_updateViewState;
- (BOOL)_validateRingRotations:(id)arg1;
- (double)_valueFromAngle:(double)arg1;
- (void)animateToValue:(double)arg1;
- (void)dealloc;
- (void)didMoveToWindow;
- (BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (id)initWithRingRotations:(id)arg1 stickyAngle:(double)arg2;
- (void)layoutSubviews;
- (void)renderLoop:(id)arg1 drawAtTime:(double)arg2;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;

@end

