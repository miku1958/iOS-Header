//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <EmailDaemon/EFLoggable-Protocol.h>

@class EDPersistenceDatabaseJournal, EFSQLConnection, NSString;
@protocol EDPersistenceDatabaseConnectionDelegate;

@interface EDPersistenceDatabaseConnection : NSObject <EFLoggable>
{
    BOOL _isWriter;
    id<EDPersistenceDatabaseConnectionDelegate> _delegate;
    NSString *_protectedDatabaseName;
    NSString *_journalDatabaseName;
    EDPersistenceDatabaseJournal *_journal;
    EFSQLConnection *_sqlConnection;
    NSString *_basePath;
}

@property (readonly, nonatomic) NSString *basePath; // @synthesize basePath=_basePath;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, weak, nonatomic) id<EDPersistenceDatabaseConnectionDelegate> delegate; // @synthesize delegate=_delegate;
@property (readonly, copy) NSString *description;
@property (readonly, nonatomic) NSString *fullPath;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) BOOL isValid;
@property (readonly, nonatomic) BOOL isWriter;
@property (strong, nonatomic) EDPersistenceDatabaseJournal *journal; // @synthesize journal=_journal;
@property (readonly, nonatomic) BOOL journalDatabaseAttached;
@property (copy, nonatomic) NSString *journalDatabaseName; // @synthesize journalDatabaseName=_journalDatabaseName;
@property (readonly, nonatomic) long long lastInsertedDatabaseID;
@property (readonly, nonatomic) BOOL protectedDatabaseAttached;
@property (copy, nonatomic) NSString *protectedDatabaseName; // @synthesize protectedDatabaseName=_protectedDatabaseName;
@property (readonly, copy, nonatomic) NSString *protectedDatabasePath;
@property (readonly, nonatomic) EFSQLConnection *sqlConnection; // @synthesize sqlConnection=_sqlConnection;
@property (readonly, nonatomic) struct sqlite3 *sqlDB;
@property (readonly) Class superclass;
@property (readonly, nonatomic) long long transactionGeneration;

+ (id)log;
- (void).cxx_destruct;
- (long long)_adjustedDatabaseTypeForType:(long long)arg1;
- (BOOL)_attachDatabaseWithName:(id)arg1 url:(id)arg2 error:(id *)arg3;
- (id)_databasePathForFileName:(id)arg1;
- (BOOL)_detachDatabaseWithName:(id)arg1;
- (BOOL)_executePreparedStatement:(id)arg1 withBlock:(CDUnknownBlockType)arg2 description:(id)arg3 error:(id *)arg4;
- (BOOL)_fetchTransactionWriteGenerationWithSQLConnection:(id)arg1 newGeneration:(long long *)arg2;
- (BOOL)_finishTransactionWithSQLConnection:(id)arg1 afterSuccess:(BOOL)arg2 transactionError:(id *)arg3;
- (void)_fixFilePermissionForPath:(const char *)arg1;
- (BOOL)_startTransactionWithSQLConnection:(id)arg1 forWriting:(BOOL)arg2 error:(id *)arg3;
- (BOOL)_storeTransactionWriteGenerationWithSQLConnection:(id)arg1 newGeneration:(long long)arg2;
- (BOOL)attachJournalDatabase:(id)arg1 withName:(id)arg2;
- (BOOL)attachJournalDatabase:(id)arg1 withName:(id)arg2 error:(id *)arg3;
- (BOOL)attachProtectedDatabaseWithName:(id)arg1;
- (BOOL)attachProtectedDatabaseWithName:(id)arg1 error:(id *)arg2;
- (BOOL)attachProtectedDatabaseWithName:(id)arg1 url:(id)arg2 error:(id *)arg3;
- (BOOL)checkForConnectionErrorWithMessage:(id)arg1;
- (void)clearLastInsertedDatabaseID;
- (void)close;
- (BOOL)columnExists:(id)arg1 inTable:(id)arg2 database:(id)arg3 type:(unsigned long long *)arg4;
- (BOOL)columnExists:(id)arg1 inTable:(id)arg2 type:(unsigned long long *)arg3;
- (int)configureSQLConnection;
- (BOOL)databaseIsAttached:(id)arg1;
- (void)dealloc;
- (BOOL)detachJournalDatabase;
- (BOOL)detachProtectedDatabase;
- (BOOL)executeDeleteStatement:(id)arg1 error:(id *)arg2;
- (BOOL)executeDeleteStatement:(id)arg1 rowsChanged:(unsigned long long *)arg2;
- (BOOL)executeInsertStatement:(id)arg1 error:(id *)arg2;
- (BOOL)executeInsertStatement:(id)arg1 rowsChanged:(unsigned long long *)arg2;
- (BOOL)executeSelectStatement:(id)arg1 withBlock:(CDUnknownBlockType)arg2 error:(id *)arg3;
- (BOOL)executeStatementString:(id)arg1 errorMessage:(id)arg2;
- (BOOL)executeUpdateStatement:(id)arg1 error:(id *)arg2;
- (BOOL)executeUpdateStatement:(id)arg1 rowsChanged:(unsigned long long *)arg2;
- (BOOL)executeUpsertStatement:(id)arg1 error:(id *)arg2;
- (BOOL)executeUpsertStatement:(id)arg1 rowsChanged:(unsigned long long *)arg2;
- (void)handleError:(id)arg1 message:(id)arg2;
- (void)handleSQLResult:(int)arg1 message:(id)arg2;
- (id)init;
- (id)initForInMemoryDatabaseIsWriter:(BOOL)arg1 delegate:(id)arg2;
- (id)initWithBasePath:(id)arg1 databaseName:(id)arg2 isWriter:(BOOL)arg3 delegate:(id)arg4;
- (id)initWithSQLDB:(struct sqlite3 *)arg1 isWriter:(BOOL)arg2 delegate:(id)arg3;
- (void)open;
- (BOOL)performUsingTransaction:(BOOL)arg1 isWriter:(BOOL)arg2 transactionError:(id *)arg3 block:(CDUnknownBlockType)arg4;
- (id)preparedStatementForQueryString:(id)arg1;
- (void)setIsWriter:(BOOL)arg1;
- (BOOL)tableExists:(id)arg1;
- (BOOL)tableExists:(id)arg1 inDatabase:(id)arg2;
- (long long)transactionTypeForWriting;

@end

