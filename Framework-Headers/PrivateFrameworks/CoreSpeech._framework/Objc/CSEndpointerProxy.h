//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <CoreSpeech/CSEndpointAnalyzer-Protocol.h>
#import <CoreSpeech/CSEndpointAnalyzerDelegate-Protocol.h>

@class NSString;
@protocol CSEndpointAnalyzerDelegate, CSEndpointAnalyzerImpl;

@interface CSEndpointerProxy : NSObject <CSEndpointAnalyzerDelegate, CSEndpointAnalyzer>
{
    BOOL _didEnterTwoshot;
    BOOL _recordingDidStop;
    BOOL _vad2SaveSamplesSeenInReset;
    id<CSEndpointAnalyzerDelegate> _endpointerDelegate;
    id<CSEndpointAnalyzerImpl> _hybridEndpointer;
    id<CSEndpointAnalyzerImpl> _vad2Endpointer;
    id<CSEndpointAnalyzerImpl> _activeEndpointer;
    long long _vad2EndpointStyle;
    long long _vad2EndpointtMode;
    double _vad2StartWaitTime;
    double _vad2EndWaitTime;
    double _vad2InterspeechWaitTime;
    double _vad2Delay;
    double _vad2AutomaticEndpointingSuspensionEndTime;
    double _vad2MinimumDurationForEndpointer;
}

@property (weak, nonatomic) id<CSEndpointAnalyzerImpl> activeEndpointer; // @synthesize activeEndpointer=_activeEndpointer;
@property (nonatomic) double automaticEndpointingSuspensionEndTime;
@property (nonatomic) double bypassSamples;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) double delay;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL didEnterTwoshot; // @synthesize didEnterTwoshot=_didEnterTwoshot;
@property (nonatomic) double endWaitTime;
@property (nonatomic) long long endpointMode;
@property (nonatomic) long long endpointStyle;
@property (weak, nonatomic) id<CSEndpointAnalyzerDelegate> endpointerDelegate; // @synthesize endpointerDelegate=_endpointerDelegate;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) id<CSEndpointAnalyzerImpl> hybridEndpointer; // @synthesize hybridEndpointer=_hybridEndpointer;
@property (nonatomic) double interspeechWaitTime;
@property (readonly, nonatomic) double lastEndOfVoiceActivityTime;
@property (readonly, nonatomic) double lastStartOfVoiceActivityTime;
@property (nonatomic) double minimumDurationForEndpointer;
@property (nonatomic) BOOL recordingDidStop; // @synthesize recordingDidStop=_recordingDidStop;
@property (nonatomic) BOOL saveSamplesSeenInReset;
@property (nonatomic) double startWaitTime;
@property (readonly) Class superclass;
@property (nonatomic) double vad2AutomaticEndpointingSuspensionEndTime; // @synthesize vad2AutomaticEndpointingSuspensionEndTime=_vad2AutomaticEndpointingSuspensionEndTime;
@property (nonatomic) double vad2Delay; // @synthesize vad2Delay=_vad2Delay;
@property (nonatomic) double vad2EndWaitTime; // @synthesize vad2EndWaitTime=_vad2EndWaitTime;
@property (nonatomic) long long vad2EndpointStyle; // @synthesize vad2EndpointStyle=_vad2EndpointStyle;
@property (strong, nonatomic) id<CSEndpointAnalyzerImpl> vad2Endpointer; // @synthesize vad2Endpointer=_vad2Endpointer;
@property (nonatomic) long long vad2EndpointtMode; // @synthesize vad2EndpointtMode=_vad2EndpointtMode;
@property (nonatomic) double vad2InterspeechWaitTime; // @synthesize vad2InterspeechWaitTime=_vad2InterspeechWaitTime;
@property (nonatomic) double vad2MinimumDurationForEndpointer; // @synthesize vad2MinimumDurationForEndpointer=_vad2MinimumDurationForEndpointer;
@property (nonatomic) BOOL vad2SaveSamplesSeenInReset; // @synthesize vad2SaveSamplesSeenInReset=_vad2SaveSamplesSeenInReset;
@property (nonatomic) double vad2StartWaitTime; // @synthesize vad2StartWaitTime=_vad2StartWaitTime;

- (void).cxx_destruct;
- (void)_setupVAD2Endpointer;
- (BOOL)_shouldEnterTwoShotAtEndPointTime:(double)arg1;
- (BOOL)_shouldUseVAD2ForTwoShot;
- (double)elapsedTimeWithNoSpeech;
- (unsigned long long)endPointAnalyzerType;
- (void)endpointer:(id)arg1 didDetectHardEndpointAtTime:(double)arg2 withMetrics:(id)arg3;
- (void)endpointer:(id)arg1 didDetectStartpointAtTime:(double)arg2;
- (id)endpointerModelVersion;
- (id)init;
- (void)preheat;
- (void)processAudioSamplesAsynchronously:(id)arg1;
- (void)processServerEndpointFeatures:(id)arg1;
- (void)recordingStoppedForReason:(unsigned long long)arg1;
- (void)reset;
- (void)resetForNewRequestWithSampleRate:(unsigned long long)arg1 recordContext:(id)arg2;
- (void)resetForVoiceTriggerTwoShotWithSampleRate:(unsigned long long)arg1;
- (void)setActiveChannel:(unsigned long long)arg1;
- (void)shouldAcceptEagerResultForDuration:(double)arg1 resultsCompletionHandler:(CDUnknownBlockType)arg2;
- (void)updateEndpointerDelayedTrigger:(BOOL)arg1;
- (void)updateEndpointerThreshold:(float)arg1;

@end

