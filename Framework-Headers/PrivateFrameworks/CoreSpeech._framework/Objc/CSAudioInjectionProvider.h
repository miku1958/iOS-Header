//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <CoreSpeech/CSAudioRecorder.h>

#import <CoreSpeech/CSAudioInjectionEngineDelegate-Protocol.h>

@class CSAudioInjectionDevice, CSAudioInjectionEngine, NSHashTable, NSMutableArray, NSMutableDictionary, NSObject, NSString, NSUUID;
@protocol OS_dispatch_queue;

@interface CSAudioInjectionProvider : CSAudioRecorder <CSAudioInjectionEngineDelegate>
{
    float _didStartDelayInSeconds;
    NSHashTable *_observers;
    NSObject<OS_dispatch_queue> *_queue;
    NSUUID *_uuid;
    NSMutableArray *_connectedDevices;
    CSAudioInjectionDevice *_builtInDevice;
    CSAudioInjectionDevice *_bundleTvRemote;
    CSAudioInjectionEngine *_builtInAudioInjectionEngine;
    NSMutableDictionary *_audioInjectionEngines;
    unsigned long long _latestPluginStreamId;
}

@property (strong, nonatomic) NSMutableDictionary *audioInjectionEngines; // @synthesize audioInjectionEngines=_audioInjectionEngines;
@property (strong, nonatomic) CSAudioInjectionEngine *builtInAudioInjectionEngine; // @synthesize builtInAudioInjectionEngine=_builtInAudioInjectionEngine;
@property (strong, nonatomic) CSAudioInjectionDevice *builtInDevice; // @synthesize builtInDevice=_builtInDevice;
@property (strong, nonatomic) CSAudioInjectionDevice *bundleTvRemote; // @synthesize bundleTvRemote=_bundleTvRemote;
@property (strong, nonatomic) NSMutableArray *connectedDevices; // @synthesize connectedDevices=_connectedDevices;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) float didStartDelayInSeconds; // @synthesize didStartDelayInSeconds=_didStartDelayInSeconds;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long latestPluginStreamId; // @synthesize latestPluginStreamId=_latestPluginStreamId;
@property (strong, nonatomic) NSHashTable *observers; // @synthesize observers=_observers;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property (readonly) Class superclass;
@property (strong, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;

+ (void)createSharedAudioSession;
+ (id)defaultInjectionProvider;
- (void).cxx_destruct;
- (void)_connectPluginDevice:(id)arg1;
- (void)_createSpeechDetectionVADIfNeeded;
- (void)_tearDownSpeechDetectionVADIfNeeded;
- (BOOL)activateAudioSessionWithReason:(unsigned long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (unsigned long long)alertStartTime;
- (void)audioEngineAudioChunkForTvAvailable:(id)arg1 audioChunk:(id)arg2;
- (void)audioEngineBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3 remoteVAD:(id)arg4 atTime:(unsigned long long)arg5;
- (void)audioEngineDidStartRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 successfully:(BOOL)arg3 error:(id)arg4;
- (void)audioEngineDidStopRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 reason:(unsigned long long)arg3;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (void)configureAlertBehavior:(id)arg1 audioStreamHandleId:(unsigned long long)arg2;
- (void)connectDevice:(id)arg1;
- (BOOL)deactivateAudioSession:(unsigned long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (void)dealloc;
- (void)disconnectDevice:(id)arg1;
- (BOOL)duckOthersOption;
- (void)enableMiniDucking:(BOOL)arg1;
- (id)init;
- (BOOL)isNarrowBandWithStreamHandleId:(unsigned long long)arg1;
- (BOOL)isRecordingWithStreamHandleId:(unsigned long long)arg1;
- (BOOL)isSessionCurrentlyActivated;
- (id)metrics;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (BOOL)playAlertSoundForType:(long long)arg1;
- (BOOL)playRecordStartingAlertAndResetEndpointerFromStream:(unsigned long long)arg1;
- (id)playbackRoute;
- (BOOL)prepareAudioStreamRecord:(id)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)prewarmAudioSessionWithStreamHandleId:(unsigned long long)arg1 error:(id *)arg2;
- (id)primaryInputDevice;
- (id)recordDeviceInfoWithStreamHandleId:(unsigned long long)arg1;
- (id)recordRouteWithStreamHandleId:(unsigned long long)arg1;
- (id)recordSettingsWithStreamHandleId:(unsigned long long)arg1;
- (float)recordingSampleRateWithStreamHandleId:(unsigned long long)arg1;
- (void)registerObserver:(id)arg1;
- (BOOL)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;
- (void)setAudioServerCrashEventDelegate:(id)arg1;
- (void)setAudioSessionEventDelegate:(id)arg1;
- (unsigned long long)setContext:(id)arg1 error:(id *)arg2;
- (BOOL)setCurrentContext:(id)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (void)setDuckOthersOption:(BOOL)arg1;
- (void)setMeteringEnabled:(BOOL)arg1;
- (BOOL)setRecordMode:(long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (void)start;
- (BOOL)startAudioStreamWithOption:(id)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (void)stop;
- (BOOL)stopAudioStreamWithStreamHandleId:(unsigned long long)arg1 error:(id *)arg2;
- (void)unregisterObserver:(id)arg1;
- (void)updateMeters;
- (id)voiceTriggerInfo;
- (void)willDestroy;

@end

