//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <Announce/AVAudioPlayerDelegate-Protocol.h>

@class ANAudioSessionManager, AVAudioSession, NSMutableArray, NSString, NSURL;
@protocol ANTrackPlayerDelegate, OS_dispatch_queue;

@interface ANTrackPlayer : NSObject <AVAudioPlayerDelegate>
{
    BOOL _readyToPlay;
    id<ANTrackPlayerDelegate> _delegate;
    NSObject<OS_dispatch_queue> *_queue;
    unsigned long long _playbackState;
    double _silenceBetweenEachTrack;
    NSURL *_audioFileAtStart;
    double _trimStartTone;
    NSURL *_audioFileTransition;
    double _trimTransitionTone;
    double _previousSkipGoesToPreviousTrackDelta;
    NSMutableArray *_players;
    NSObject<OS_dispatch_queue> *_workQueue;
    double _interruptionStart;
    unsigned long long _options;
    AVAudioSession *_audioSession;
    ANAudioSessionManager *_audioSessionManager;
}

@property (strong, nonatomic) NSURL *audioFileAtStart; // @synthesize audioFileAtStart=_audioFileAtStart;
@property (strong, nonatomic) NSURL *audioFileTransition; // @synthesize audioFileTransition=_audioFileTransition;
@property (readonly, nonatomic) AVAudioSession *audioSession; // @synthesize audioSession=_audioSession;
@property (readonly, nonatomic) ANAudioSessionManager *audioSessionManager; // @synthesize audioSessionManager=_audioSessionManager;
@property (readonly, copy) NSString *debugDescription;
@property (weak) id<ANTrackPlayerDelegate> delegate; // @synthesize delegate=_delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property double interruptionStart; // @synthesize interruptionStart=_interruptionStart;
@property (readonly, nonatomic) int numberActivePlayers;
@property (readonly, nonatomic) unsigned long long options; // @synthesize options=_options;
@property unsigned long long playbackState; // @synthesize playbackState=_playbackState;
@property (readonly, nonatomic) NSMutableArray *players; // @synthesize players=_players;
@property double previousSkipGoesToPreviousTrackDelta; // @synthesize previousSkipGoesToPreviousTrackDelta=_previousSkipGoesToPreviousTrackDelta;
@property (weak) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property (nonatomic) BOOL readyToPlay; // @synthesize readyToPlay=_readyToPlay;
@property double silenceBetweenEachTrack; // @synthesize silenceBetweenEachTrack=_silenceBetweenEachTrack;
@property (readonly) Class superclass;
@property double trimStartTone; // @synthesize trimStartTone=_trimStartTone;
@property double trimTransitionTone; // @synthesize trimTransitionTone=_trimTransitionTone;
@property (readonly, nonatomic) NSString *whatIsPlaying;
@property (strong) NSObject<OS_dispatch_queue> *workQueue; // @synthesize workQueue=_workQueue;

+ (double)machTimeToSeconds:(unsigned long long)arg1;
+ (unsigned long long)secondsToMachTime:(double)arg1;
- (void).cxx_destruct;
- (BOOL)_add:(id)arg1 announcementID:(id)arg2 trackType:(long long)arg3;
- (BOOL)_addURL:(id)arg1 announcementID:(id)arg2 trackType:(long long)arg3;
- (void)_callDelegateWithBlock:(CDUnknownBlockType)arg1;
- (void)_configureSharedAudioSession;
- (void)_deregisterForNotifications;
- (BOOL)_insertAudioBetween;
- (BOOL)_playSync;
- (void)_registerForNotifications;
- (void)_resumePlaybackAfterInterruptionAtTimeInterval:(double)arg1;
- (void)_stopSync;
- (double)_trackTrimTime:(long long)arg1;
- (BOOL)add:(id)arg1 announcementID:(id)arg2;
- (BOOL)addingNewPlayer:(id)arg1;
- (void)audioPlayerDidFinishPlaying:(id)arg1 successfully:(BOOL)arg2;
- (void)audioSessionInterruptionHandler:(id)arg1;
- (void)audioSessionMediaServicesLostHandler:(id)arg1;
- (void)audioSessionMediaServicesResetHandler:(id)arg1;
- (void)end;
- (void)handleInterruptionDelay:(double)arg1;
- (id)initWithOptions:(unsigned long long)arg1;
- (id)initWithOptions:(unsigned long long)arg1 audioSession:(id)arg2;
- (void)next;
- (void)nextInternalSync;
- (BOOL)playInternalSync;
- (void)playWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)prepareToPlay;
- (void)previous;
- (void)previousInternalSync;
- (id)startNextPlaybackOnDidFinish:(id)arg1;
- (void)stop;
- (void)stopInternalSync;

@end

