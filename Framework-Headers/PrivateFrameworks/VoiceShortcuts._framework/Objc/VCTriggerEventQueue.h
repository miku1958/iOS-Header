//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <VoiceShortcuts/VCTriggerEventRunnerDelegate-Protocol.h>
#import <VoiceShortcuts/VCUserNotificationManagerDelegate-Protocol.h>

@class NSString, VCTriggerEventRunner, VCUserNotificationManager;
@protocol OS_dispatch_queue, VCDatabaseProvider;

@interface VCTriggerEventQueue : NSObject <VCUserNotificationManagerDelegate, VCTriggerEventRunnerDelegate>
{
    id<VCDatabaseProvider> _databaseProvider;
    VCUserNotificationManager *_notificationManager;
    VCTriggerEventRunner *_triggerEventRunner;
    NSObject<OS_dispatch_queue> *_queue;
}

@property (readonly, nonatomic) id<VCDatabaseProvider> databaseProvider; // @synthesize databaseProvider=_databaseProvider;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) VCUserNotificationManager *notificationManager; // @synthesize notificationManager=_notificationManager;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property (readonly) Class superclass;
@property (readonly, nonatomic) VCTriggerEventRunner *triggerEventRunner; // @synthesize triggerEventRunner=_triggerEventRunner;

+ (double)rateLimitingTimeoutForTrigger:(id)arg1 runEvents:(id)arg2;
+ (BOOL)shouldRunTrigger:(id)arg1 forEvent:(id)arg2 runEvents:(id)arg3 error:(id *)arg4;
- (void).cxx_destruct;
- (id)configuredTriggerForIdentifier:(id)arg1 workflowReference:(id *)arg2 error:(id *)arg3;
- (id)databaseWithError:(id *)arg1;
- (BOOL)deleteTriggerEvent:(id)arg1 error:(id *)arg2;
- (void)didFinishRunningWithError:(id)arg1 cancelled:(BOOL)arg2 trigger:(id)arg3 runEvent:(id)arg4;
- (void)enqueueTriggerWithIdentifier:(id)arg1 eventInfo:(id)arg2 force:(BOOL)arg3 completion:(CDUnknownBlockType)arg4;
- (id)initWithDatabaseProvider:(id)arg1 runCoordinator:(id)arg2;
- (BOOL)isTriggerEventStale:(id)arg1;
- (void)logMetricForTrigger:(id)arg1;
- (id)nextTriggerEventWithError:(id *)arg1;
- (void)notificationManager:(id)arg1 didDismissTriggerWithIdentifier:(id)arg2 pendingTriggerEventIDs:(id)arg3;
- (void)notificationManager:(id)arg1 didFailToPostNotificationPromptWithTriggerIdentifier:(id)arg2 pendingTriggerEventIDs:(id)arg3;
- (void)notificationManager:(id)arg1 receivedConfirmationToRunTriggerWithIdentifier:(id)arg2 pendingTriggerEventIDs:(id)arg3;
- (unsigned long long)numberOfEventsInQueueWithConfirmationOnly:(BOOL)arg1;
- (void)removeAllStaleTriggerEventsIgnoringValidIDs:(id)arg1;
- (void)removePendingTriggerEventsWithEventIDs:(id)arg1;
- (void)removeStalePendingNotificationsAndTriggerEvents;
- (void)resume;
- (void)resumeWithConfiguredTrigger:(id)arg1 workflowReference:(id)arg2 eventInfo:(id)arg3;
- (void)runWithConfiguredTrigger:(id)arg1 workflowReference:(id)arg2 eventInfo:(id)arg3;
- (void)setConfirmedForTriggerEventIDs:(id)arg1 error:(id *)arg2;
- (BOOL)shouldRunEmailOrMessageTrigger:(id)arg1 forEvent:(id)arg2 runEvents:(id)arg3 error:(id *)arg4;
- (id)triggerEventsForConfiguredTrigger:(id)arg1 eventInfo:(id)arg2 confirmed:(BOOL)arg3 error:(id *)arg4;

@end

