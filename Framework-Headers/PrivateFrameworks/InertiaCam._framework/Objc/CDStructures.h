//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct HomographyInfoRecord;

struct Int32Size {
    int _field1;
    int _field2;
};

struct StabStatsRecord {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct WorkingPixmapRecord {
    char *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    struct __CVBuffer *_field7;
    int _field8;
};

struct ransac_homography_record {
    float _field1[9];
};

struct vector<HomographyInfoRecord, std::__1::allocator<HomographyInfoRecord>> {
    struct HomographyInfoRecord *_field1;
    struct HomographyInfoRecord *_field2;
    struct __compressed_pair<HomographyInfoRecord *, std::__1::allocator<HomographyInfoRecord>> {
        struct HomographyInfoRecord *_field1;
    } _field3;
};

struct vector<double, std::__1::allocator<double>> {
    double *_field1;
    double *_field2;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

// Template types
typedef struct vector<HomographyInfoRecord, std::__1::allocator<HomographyInfoRecord>> {
    struct HomographyInfoRecord *_field1;
    struct HomographyInfoRecord *_field2;
    struct __compressed_pair<HomographyInfoRecord *, std::__1::allocator<HomographyInfoRecord>> {
        struct HomographyInfoRecord *_field1;
    } _field3;
} vector_87633213;

typedef struct vector<double, std::__1::allocator<double>> {
    double *_field1;
    double *_field2;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *_field1;
    } _field3;
} vector_8f06c10f;

