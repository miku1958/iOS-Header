//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <KnowledgeGraphKit/MABaseGraph.h>

@interface MAGraph : MABaseGraph
{
    MABaseGraph *_concreteGraph;
}

+ (Class)concreteGraphClass;
+ (BOOL)copyPersistentStoreFromURL:(id)arg1 toURL:(id)arg2 error:(id *)arg3;
+ (void)deleteMarker:(id)arg1;
+ (BOOL)destroyPersistentStoreAtURL:(id)arg1 error:(id *)arg2;
+ (BOOL)hasMarker:(id)arg1;
+ (BOOL)migratePersistentStoreFromURL:(id)arg1 toURL:(id)arg2 error:(id *)arg3;
+ (id)persistentStoreFileExtension;
+ (id)persistentStoreURLWithPath:(id)arg1 andName:(id)arg2;
+ (BOOL)setMarkerAtURL:(id)arg1;
- (void).cxx_destruct;
- (id)addEdgeWithLabel:(id)arg1 sourceNode:(id)arg2 targetNode:(id)arg3 domain:(unsigned short)arg4 weight:(float)arg5 properties:(id)arg6;
- (id)addNodeWithLabel:(id)arg1 domain:(unsigned short)arg2 weight:(float)arg3 properties:(id)arg4;
- (id)addUniqueEdgeWithLabel:(id)arg1 sourceNode:(id)arg2 targetNode:(id)arg3 domain:(unsigned short)arg4 weight:(float)arg5 properties:(id)arg6;
- (id)addUniqueNodeWithLabel:(id)arg1 domain:(unsigned short)arg2 weight:(float)arg3 properties:(id)arg4 didCreate:(BOOL *)arg5;
- (id)addUniquelyIdentifiedNodeWithLabel:(id)arg1 domain:(unsigned short)arg2 weight:(float)arg3 properties:(id)arg4 didCreate:(BOOL *)arg5;
- (id)allEdges;
- (id)allNodes;
- (id)anyNodeForLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3;
- (id)anyNodeMatchingFilter:(id)arg1;
- (void)closePersistentStore;
- (BOOL)compareWithPersistedState;
- (BOOL)copyPersistentStoreToURL:(id)arg1 error:(id *)arg2;
- (unsigned long long)countOfNodesRelatedToNodesWithIdentifiers:(id)arg1 relation:(id)arg2;
- (id)databaseURL;
- (void)deleteMarker;
- (id)description;
- (id)edgeForIdentifier:(unsigned int)arg1;
- (id)edgeIdentifiersMatchingFilter:(id)arg1;
- (unsigned long long)edgesCount;
- (unsigned long long)edgesCountForDomain:(unsigned short)arg1;
- (unsigned long long)edgesCountForLabel:(id)arg1;
- (unsigned long long)edgesCountForLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3;
- (id)edgesDomains;
- (id)edgesForDomains:(id)arg1;
- (id)edgesForIdentifiers:(id)arg1;
- (id)edgesForLabel:(id)arg1;
- (id)edgesForLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3;
- (id)edgesLabels;
- (id)edgesMatchingFilter:(id)arg1;
- (void)enterBatch;
- (void)enumerateEdgesInDomain:(unsigned short)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateEdgesMatchingFilter:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateEdgesWithBlock:(CDUnknownBlockType)arg1;
- (void)enumerateEdgesWithIdentifiers:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateEdgesWithLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)enumerateNodesInDomain:(unsigned short)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateNodesMatchingFilter:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateNodesRelatedToNodeWithIdentifier:(unsigned int)arg1 withRelation:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (void)enumerateNodesWithBlock:(CDUnknownBlockType)arg1;
- (void)enumerateNodesWithIdentifiers:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateNodesWithLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (BOOL)hasMarker;
- (BOOL)hasPendingRead;
- (BOOL)hasPendingWrite;
- (id)identifier;
- (id)initWithSpecification:(id)arg1;
- (id)initWithSpecification:(id)arg1 dataURL:(id)arg2;
- (id)initWithSpecification:(id)arg1 persistenceStoreURL:(id)arg2 progressBlock:(CDUnknownBlockType)arg3;
- (void)invalidateMemoryCaches;
- (void)leaveBatch;
- (unsigned long long)memoryFootprint:(id)arg1;
- (void)mergeWithGraph:(id)arg1 strictNodes:(BOOL)arg2 strictEdges:(BOOL)arg3 saveToDatabase:(BOOL)arg4 createdNodes:(out id *)arg5 createdEdges:(out id *)arg6;
- (BOOL)migratePersistentStoreToURL:(id)arg1 error:(id *)arg2;
- (id)nodeForIdentifier:(unsigned int)arg1;
- (id)nodeIdentifiersMatchingFilter:(id)arg1;
- (id)nodeIdentifiersRelatedToSourceNodeIdentifiers:(id)arg1 relation:(id)arg2;
- (unsigned long long)nodesCount;
- (unsigned long long)nodesCountForDomain:(unsigned short)arg1;
- (unsigned long long)nodesCountForLabel:(id)arg1;
- (unsigned long long)nodesCountForLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3;
- (id)nodesDomains;
- (id)nodesForDomain:(unsigned short)arg1;
- (id)nodesForDomain:(unsigned short)arg1 properties:(id)arg2;
- (id)nodesForDomains:(id)arg1;
- (id)nodesForIdentifiers:(id)arg1;
- (id)nodesForLabel:(id)arg1;
- (id)nodesForLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3;
- (id)nodesLabels;
- (id)nodesMatchingFilter:(id)arg1;
- (unsigned long long)numberOfEdgesMatchingFilter:(id)arg1;
- (unsigned long long)numberOfNodesMatchingFilter:(id)arg1;
- (void)persistModelProperties:(id)arg1 forEdgeWithIdentifier:(unsigned int)arg2 clobberExisting:(BOOL)arg3;
- (void)persistModelProperties:(id)arg1 forNodeWithIdentifier:(unsigned int)arg2 clobberExisting:(BOOL)arg3;
- (void)persistModelProperty:(id)arg1 forKey:(id)arg2 forEdgeWithIdentifier:(unsigned int)arg3;
- (void)persistModelProperty:(id)arg1 forKey:(id)arg2 forNodeWithIdentifier:(unsigned int)arg3;
- (void)persistWeight:(float)arg1 forEdgeWithIdentifier:(unsigned int)arg2;
- (void)persistWeight:(float)arg1 forNodeWithIdentifier:(unsigned int)arg2;
- (void)readUsingBlock:(CDUnknownBlockType)arg1;
- (void)removeEdge:(id)arg1;
- (void)removeEdges:(id)arg1;
- (void)removeModelPropertiesForEdgeWithIdentifier:(unsigned int)arg1;
- (void)removeModelPropertiesForNodeWithIdentifier:(unsigned int)arg1;
- (void)removeModelPropertyForKey:(id)arg1 forEdgeWithIdentifier:(unsigned int)arg2;
- (void)removeModelPropertyForKey:(id)arg1 forNodeWithIdentifier:(unsigned int)arg2;
- (void)removeNode:(id)arg1;
- (void)removeNodes:(id)arg1;
- (BOOL)savePersistentStore;
- (void)savePersistentStoreWithCompletion:(CDUnknownBlockType)arg1;
- (void)setMarker;
- (void)setVersion:(unsigned long long)arg1;
- (unsigned long long)version;
- (void)writeUsingBlock:(CDUnknownBlockType)arg1;

@end

