//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <SafariShared/NSCopying-Protocol.h>

@class NSString, NSURL, NSURLSessionConfiguration;

@interface WBSPasswordBreachConfiguration : NSObject <NSCopying>
{
    BOOL _isInternalBuild;
    BOOL _shouldRefillBagWhenEmpty;
    BOOL _verboseSensitiveLoggingEnabled;
    NSString *_highFrequencyBucketHashSalt;
    NSString *_lowFrequencyBucketHashSalt;
    unsigned long long _highFrequencyBucketHashWorkFactor;
    unsigned long long _lowFrequencyBucketHashWorkFactor;
    unsigned long long _highFrequencyBucketScryptBlockSizeR;
    unsigned long long _lowFrequencyBucketScryptBlockSizeR;
    unsigned long long _highFrequencyBucketScryptParallelismFactorP;
    unsigned long long _lowFrequencyBucketScryptParallelismFactorP;
    unsigned long long _lowFrequencyBucketIdentifierBitCount;
    NSURL *_highFrequencyBucketURL;
    NSURL *_lowFrequencyBucketURL;
    NSURLSessionConfiguration *_urlSessionConfiguration;
    double _minimumDelayBetweenSessions;
    unsigned long long _passwordCheckBatchSize;
    unsigned long long _numberOfBatchesPerSession;
    unsigned long long _fakePasswordLengthBytes;
    unsigned long long _lowFrequencyBucketFetchTimeout;
}

@property (readonly, nonatomic) unsigned long long fakePasswordLengthBytes; // @synthesize fakePasswordLengthBytes=_fakePasswordLengthBytes;
@property (readonly, nonatomic) NSString *highFrequencyBucketHashSalt; // @synthesize highFrequencyBucketHashSalt=_highFrequencyBucketHashSalt;
@property (readonly, nonatomic) unsigned long long highFrequencyBucketHashWorkFactor; // @synthesize highFrequencyBucketHashWorkFactor=_highFrequencyBucketHashWorkFactor;
@property (readonly, nonatomic) unsigned long long highFrequencyBucketScryptBlockSizeR; // @synthesize highFrequencyBucketScryptBlockSizeR=_highFrequencyBucketScryptBlockSizeR;
@property (readonly, nonatomic) unsigned long long highFrequencyBucketScryptParallelismFactorP; // @synthesize highFrequencyBucketScryptParallelismFactorP=_highFrequencyBucketScryptParallelismFactorP;
@property (readonly, nonatomic) NSURL *highFrequencyBucketURL; // @synthesize highFrequencyBucketURL=_highFrequencyBucketURL;
@property (readonly, nonatomic) unsigned long long lowFrequencyBucketFetchTimeout; // @synthesize lowFrequencyBucketFetchTimeout=_lowFrequencyBucketFetchTimeout;
@property (readonly, nonatomic) NSString *lowFrequencyBucketHashSalt; // @synthesize lowFrequencyBucketHashSalt=_lowFrequencyBucketHashSalt;
@property (readonly, nonatomic) unsigned long long lowFrequencyBucketHashWorkFactor; // @synthesize lowFrequencyBucketHashWorkFactor=_lowFrequencyBucketHashWorkFactor;
@property (readonly, nonatomic) unsigned long long lowFrequencyBucketIdentifierBitCount; // @synthesize lowFrequencyBucketIdentifierBitCount=_lowFrequencyBucketIdentifierBitCount;
@property (readonly, nonatomic) unsigned long long lowFrequencyBucketScryptBlockSizeR; // @synthesize lowFrequencyBucketScryptBlockSizeR=_lowFrequencyBucketScryptBlockSizeR;
@property (readonly, nonatomic) unsigned long long lowFrequencyBucketScryptParallelismFactorP; // @synthesize lowFrequencyBucketScryptParallelismFactorP=_lowFrequencyBucketScryptParallelismFactorP;
@property (readonly, nonatomic) NSURL *lowFrequencyBucketURL; // @synthesize lowFrequencyBucketURL=_lowFrequencyBucketURL;
@property (readonly, nonatomic) double minimumDelayBetweenSessions; // @synthesize minimumDelayBetweenSessions=_minimumDelayBetweenSessions;
@property (readonly, nonatomic) unsigned long long numberOfBatchesPerSession; // @synthesize numberOfBatchesPerSession=_numberOfBatchesPerSession;
@property (readonly, nonatomic) unsigned long long passwordCheckBatchSize; // @synthesize passwordCheckBatchSize=_passwordCheckBatchSize;
@property (readonly, nonatomic) BOOL shouldRefillBagWhenEmpty;
@property (readonly, nonatomic) NSURLSessionConfiguration *urlSessionConfiguration; // @synthesize urlSessionConfiguration=_urlSessionConfiguration;
@property (readonly, nonatomic) BOOL verboseSensitiveLoggingEnabled; // @synthesize verboseSensitiveLoggingEnabled=_verboseSensitiveLoggingEnabled;

+ (id)standardConfiguration;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithDictionary:(id)arg1;
- (id)initWithDictionary:(id)arg1 protocolClasses:(id)arg2 allowValuesForTesting:(BOOL)arg3;
- (BOOL)isVerboseSensitiveLoggingEnabled;

@end

