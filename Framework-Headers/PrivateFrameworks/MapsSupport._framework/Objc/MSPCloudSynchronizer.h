//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <MapsSupport/MSPJournaling-Protocol.h>

@class MSPJournal, MSPMapsPaths, NSDate, NSMutableArray, NSOperationQueue, NSString, NSTimer;
@protocol MSPCloudAccess, MSPCloudSynchronizerDelegate;

@interface MSPCloudSynchronizer : NSObject <MSPJournaling>
{
    id<MSPCloudAccess> _access;
    BOOL _started;
    MSPMapsPaths *_paths;
    struct atomic_flag _didScheduleInitialMerge;
    NSOperationQueue *_taskAttemptsQueue;
    BOOL _needsMerge;
    unsigned long long _countOfInFlightMerges;
    NSMutableArray *_mergeCompletionHandlers;
    MSPJournal *_journal;
    NSTimer *_identityRecheckTimer;
    unsigned long long _failedResolutionAttempts;
    NSDate *_minimumDateAfterTooManyFailedResolutionAttempts;
    long long _loginStatus;
    id<MSPCloudSynchronizerDelegate> _delegate;
}

@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<MSPCloudSynchronizerDelegate> delegate; // @synthesize delegate=_delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (getter=_loginStatus, setter=_setLoginStatus:) long long loginStatus; // @synthesize loginStatus=_loginStatus;
@property (readonly) Class superclass;

+ (double)_batchingTimeInterval;
+ (long long)_boostedQualityOfServiceForOpportunisticTask;
+ (long long)_boostedQualityOfServiceForUserObservableTask;
+ (double)_identityRecheckInterval;
+ (long long)_maximumResolutionAttemptsCount;
+ (double)_minimumReattemptInterval;
+ (long long)_qualityOfServiceForInitialDownload;
+ (long long)_qualityOfServiceForOpportunisticTask;
+ (long long)_qualityOfServiceForUserObservableTask;
+ (double)_timeIntervalToWaitAfterTooManyResolutionAttempts;
+ (double)_timeIntervalToWaitBetweenBoosts;
- (void).cxx_destruct;
- (void)_availabilityDidChange;
- (void)_beginWaitingForAvailabilityAndStartQueueIfPossible;
- (long long)_boostIfNeededQualityOfServiceForTask:(id)arg1 thatIsUserObservable:(BOOL)arg2;
- (void)_cancelAllOperationsWithCompletion:(CDUnknownBlockType)arg1;
- (void)_completeOperation:(id)arg1 isMerge:(BOOL)arg2 withError:(id)arg3 canReattempt:(BOOL)arg4 maxAttempts:(unsigned long long)arg5 minimumReattemptDate:(id)arg6 completion:(CDUnknownBlockType)arg7;
- (void)_enqueueOperation:(id)arg1 requireBeingLoggedIn:(BOOL)arg2;
- (BOOL)_mergesAreSuspendedAfterTooManyFailedResolvingAttempts;
- (id)_minimumReattemptDateForProposedDate:(id)arg1;
- (void)_resetTooManyResolvingAttemptsHolds;
- (void)_scheduleMergeForUserObservableChange:(BOOL)arg1;
- (void)_scheduleMergeForUserObservableChange:(BOOL)arg1 isInitialMerge:(BOOL)arg2;
- (id)_scheduleTaskIfAny:(id)arg1 isMerge:(BOOL)arg2 qualityOfService:(long long)arg3 completion:(CDUnknownBlockType)arg4;
- (BOOL)_shouldContinueAfterFailingResolutionAttempt;
- (void)_taskThatIncludedResolutionAttemptSucceeded;
- (BOOL)_wasTaskScheduledWhenTokenCreated:(id)arg1;
- (id)init;
- (id)initWithAccess:(id)arg1;
- (id)scheduleTask:(id)arg1;
- (void)setNeedsMergeForUserObservableChange:(BOOL)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setNeedsMergeWithOptions:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (BOOL)shouldReportState:(id)arg1;
- (void)start;
- (void)stop;

@end

