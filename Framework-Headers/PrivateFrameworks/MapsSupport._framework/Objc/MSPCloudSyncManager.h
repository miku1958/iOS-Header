//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <MapsSupport/MSPCloudSynchronizerDelegate-Protocol.h>
#import <MapsSupport/MSPContainerObserver-Protocol.h>
#import <MapsSupport/MSPJournaling-Protocol.h>

@class GEONetworkObserver, MSPCloudKitAccountAccess, MSPCloudSynchronizer, MSPContainer, MSPContainerPolicyObserver, MSPJournal, NSDate, NSString, NSUbiquitousKeyValueStore;
@protocol MSPCloudAccess, OS_dispatch_source;

@interface MSPCloudSyncManager : NSObject <MSPCloudSynchronizerDelegate, MSPContainerObserver, MSPJournaling>
{
    id<MSPCloudAccess> _access;
    MSPCloudKitAccountAccess *_cloudKitAccess;
    MSPCloudSynchronizer *_synchronizer;
    MSPContainer *_container;
    MSPContainerPolicyObserver *_policyObserver;
    unsigned long long _dataCheckDelay;
    NSDate *_lastDataCheck;
    NSObject<OS_dispatch_source> *_syncTimer;
    GEONetworkObserver *_networkObserver;
    NSUbiquitousKeyValueStore *_correspondingKeyValueStore;
    BOOL _migratingFromKVS;
    BOOL _hasWrittenKVSEntriesToDiskAndMustMarkAsDone;
    MSPJournal *_journal;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (id)KVSAdditionalStoreIdentifier;
+ (id)KVSMergeableStateSnapshotForOrderedRecordsWithContents:(id)arg1;
+ (id)KVSSyncItemKeyPrefix;
+ (id)boostDateDefaultsKey;
+ (id)cloudRecordType;
+ (id)identityDefaultsKey;
+ (id)journalName;
+ (id)mergeOptionsForEarliestKnownSyncDate:(id)arg1;
+ (Class)replicaClass;
+ (Class)replicaRecordClass;
+ (BOOL)usesZoneWidePCS;
+ (id)zoneName;
- (void).cxx_destruct;
- (void)_didChangeContentsOfKVSStore;
- (void)_finishTask:(id)arg1 byUpdatingRegistrationRecord:(id)arg2 throughAccess:(id)arg3;
- (void)_migrateFromKVSStorageIfNeededWithCompletion:(CDUnknownBlockType)arg1;
- (id)_newMergeGroupForAccess:(id)arg1;
- (id)_newRegistrationRequestUpdateGroupForAccess:(id)arg1;
- (void)_requestMergeIfNeededForUserObservableChange:(BOOL)arg1;
- (void)_setNeedsMergeForUserObservableChange:(BOOL)arg1 completion:(CDUnknownBlockType)arg2;
- (id)_taskPerformingCachedFetchWithExpectedMergeSize:(long long)arg1 processingBlock:(CDUnknownBlockType)arg2;
- (void)container:(id)arg1 didEditWithNewContents:(id)arg2 orderedEdits:(id)arg3 cause:(long long)arg4 context:(id)arg5;
- (void)containerDidEraseContents:(id)arg1 fromStorageTypes:(unsigned long long)arg2;
- (id)currentSyncClientRegistrationIdentifier;
- (void)dealloc;
- (void)getEditedRecords:(out id *)arg1 recordNamesToDelete:(out id *)arg2 fromExistingCloudRecords:(id)arg3 withReplica:(id)arg4 mergingWithReplica:(id)arg5 knownSyncDateForLeastRecentlySyncedClientIfAny:(id)arg6 creatingRecordsUsingAccess:(id)arg7;
- (id)init;
- (id)initWithContainer:(id)arg1 environment:(long long)arg2 options:(unsigned long long)arg3;
- (id)initWithContainer:(id)arg1 options:(unsigned long long)arg2;
- (void)networkReachabilityChanged;
- (void)noteDidReceiveCloudKitNotificationWithUserInfo:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)requestMergeIfNeeded;
- (void)setNeedsMergeWithCompletion:(CDUnknownBlockType)arg1;
- (BOOL)shouldReportState:(id)arg1;
- (void)start;
- (id)storedBoostDateForSynchronizer:(id)arg1;
- (id)storedClientRegistrationIdentifierForSynchronizer:(id)arg1;
- (id)storedUserIdentityForSynchronizer:(id)arg1;
- (void)synchronizer:(id)arg1 didFailAttemptingTask:(id)arg2 withError:(id)arg3 reattemptingAfterDate:(id)arg4;
- (void)synchronizer:(id)arg1 storeNewBoostDate:(id)arg2;
- (void)synchronizer:(id)arg1 storeNewClientRegistrationIdentifier:(id)arg2;
- (void)synchronizer:(id)arg1 storeNewUserIdentity:(id)arg2;
- (void)synchronizer:(id)arg1 userIdentityDidLogOutWithFollowUp:(long long)arg2;
- (id)taskToDownloadCloudStoreByErasingLocalStoreForSynchronizer:(id)arg1;
- (id)taskToMergeLocalAndCloudStoresForSynchronizer:(id)arg1;

@end

