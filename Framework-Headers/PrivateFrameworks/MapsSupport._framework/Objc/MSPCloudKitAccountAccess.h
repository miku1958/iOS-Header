//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <MapsSupport/MSPCloudAccess-Protocol.h>
#import <MapsSupport/MSPJournaling-Protocol.h>

@class CKContainer, CKDatabase, CKRecordZoneID, MSPCloudCoalescedOperationExecutor, MSPJournal, NSDate, NSString, NSUUID;
@protocol OS_dispatch_queue;

@interface MSPCloudKitAccountAccess : NSObject <MSPJournaling, MSPCloudAccess>
{
    NSString *_latestAccountIdentity;
    CKContainer *_container;
    CKContainer *_containerForClientRegistrationRecords;
    CKDatabase *_database;
    CKRecordZoneID *_zoneID;
    NSUUID *_clientRegistrationIdentifier;
    NSDate *_minimumRetryAfter;
    MSPJournal *_journal;
    NSObject<OS_dispatch_queue> *_reachabilityQueue;
    MSPCloudCoalescedOperationExecutor *_coalescedExecutor;
    CDUnknownBlockType _availabilityDidChangeHandler;
    CDUnknownBlockType _contentsDidChangeHandler;
}

@property (copy, nonatomic) CDUnknownBlockType availabilityDidChangeHandler; // @synthesize availabilityDidChangeHandler=_availabilityDidChangeHandler;
@property (copy, nonatomic) CDUnknownBlockType contentsDidChangeHandler; // @synthesize contentsDidChangeHandler=_contentsDidChangeHandler;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (void)_didCompleteLongLivedOperation:(id)arg1;
+ (id)_snapshotLongLivedIDs;
+ (id)_trackedLongLivedIDsSet;
+ (void)_willEmitLongLivedOperation:(id)arg1;
+ (id)containerForEnvironment:(long long)arg1 usesZoneWidePCS:(BOOL)arg2;
- (void).cxx_destruct;
- (void)_accountChanged:(id)arg1;
- (id)_newClientRegistrationRecordForThisClient;
- (void)_rescheduleAllLongLivedOperationsWithHandler:(CDUnknownBlockType)arg1 completionGroup:(id)arg2 thenContinue:(CDUnknownBlockType)arg3;
- (id)_subscriptionNameForZoneID:(id)arg1;
- (void)checkForAvailabilityWithCallbackQueue:(id)arg1 schedulePreAvailabilityOperationHandler:(CDUnknownBlockType)arg2 completion:(CDUnknownBlockType)arg3;
- (id)eventForState:(id)arg1 affectedObject:(id)arg2;
- (id)initWithEnvironment:(long long)arg1 zoneID:(id)arg2 usesZoneWidePCS:(BOOL)arg3;
- (id)initWithZoneID:(id)arg1;
- (id)minimumStartDate;
- (void)networkReachabilityChanged:(BOOL)arg1;
- (id)newCombinedCachingFetchRequestWithGroup:(id)arg1 forTask:(id)arg2 successHandler:(CDUnknownBlockType)arg3;
- (id)newFetchRequestForCurrentClientRegistrationRecordWithGroup:(id)arg1 successHandler:(CDUnknownBlockType)arg2;
- (id)newFetchRequestWithGroup:(id)arg1 forRecordsWithNames:(id)arg2 successHandler:(CDUnknownBlockType)arg3;
- (id)newGroupForSubscriptionsAndZoneChanges;
- (id)newModifyClientRegistrationRecordRequestWithGroup:(id)arg1 editedRecord:(id)arg2;
- (id)newModifyRequestWithGroup:(id)arg1 forRecordsToModify:(id)arg2 namesOfRecordsToDelete:(id)arg3;
- (id)newQueryRequestWithGroup:(id)arg1 forRecordsOfType:(id)arg2 predicate:(id)arg3 sortDescriptors:(id)arg4 successHandler:(CDUnknownBlockType)arg5;
- (id)newRecordOfType:(id)arg1 name:(id)arg2;
- (id)newReferenceToRecord:(id)arg1;
- (id)newReferenceToRecordWithName:(id)arg1;
- (id)newRequestGroupWithName:(id)arg1 size:(long long)arg2;
- (id)newSubscriptionRegistrationRequestWithGroup:(id)arg1 successHandler:(CDUnknownBlockType)arg2;
- (void)noteDidReceiveCloudKitNotificationWithUserInfo:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)retryDelayForError:(id)arg1;
- (void)setClientRegistrationIdentifier:(id)arg1;
- (BOOL)shouldReportState:(id)arg1;
- (BOOL)shouldRetryAfterError:(id)arg1 isCancelation:(BOOL *)arg2 afterDelay:(out id *)arg3 withResolvingTask:(out id *)arg4;
- (id)statesToReport;
- (id)taskToResolveError:(id)arg1;
- (int)telemetricKeyForState:(id)arg1;

@end

