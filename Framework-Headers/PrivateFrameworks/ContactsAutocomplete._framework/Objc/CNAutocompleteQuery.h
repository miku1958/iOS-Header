//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <ContactsAutocomplete/CNCancelable-Protocol.h>

@class CNAutocompleteDelegateWrapper, CNAutocompleteFetchRequest, CNAutocompleteUserSession, CNCancelationToken, NSString;
@protocol CNAutocompleteProbeProvider, CNAutocompleteSearchProvider, CNAutocompleteSourceInclusionPolicy, CNCancelable, CNScheduler;

@interface CNAutocompleteQuery : NSObject <CNCancelable>
{
    CNAutocompleteFetchRequest *_request;
    CNAutocompleteDelegateWrapper *_delegate;
    id<CNScheduler> _scheduler;
    CNCancelationToken *_cancelationToken;
    id<CNAutocompleteSearchProvider> _searchProvider;
    id<CNAutocompleteProbeProvider> _probeProvider;
    CNAutocompleteUserSession *_userSession;
    id<CNCancelable> _delegateToken;
    id<CNAutocompleteSourceInclusionPolicy> _sourceInclusionPolicy;
}

@property (strong) CNCancelationToken *cancelationToken; // @synthesize cancelationToken=_cancelationToken;
@property (readonly, copy) NSString *debugDescription;
@property (strong) CNAutocompleteDelegateWrapper *delegate; // @synthesize delegate=_delegate;
@property (weak) id<CNCancelable> delegateToken; // @synthesize delegateToken=_delegateToken;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (strong) id<CNAutocompleteProbeProvider> probeProvider; // @synthesize probeProvider=_probeProvider;
@property (copy) CNAutocompleteFetchRequest *request; // @synthesize request=_request;
@property (strong) id<CNScheduler> scheduler; // @synthesize scheduler=_scheduler;
@property (strong) id<CNAutocompleteSearchProvider> searchProvider; // @synthesize searchProvider=_searchProvider;
@property (strong) id<CNAutocompleteSourceInclusionPolicy> sourceInclusionPolicy; // @synthesize sourceInclusionPolicy=_sourceInclusionPolicy;
@property (readonly) Class superclass;
@property (strong) CNAutocompleteUserSession *userSession; // @synthesize userSession=_userSession;

+ (void)configureNetworkActivityHandlersForBuilder:(id)arg1 query:(id)arg2;
+ (void)configureNetworkForBuilder:(id)arg1 query:(id)arg2;
+ (void)configureNetworkPolicyForBuilder:(id)arg1 query:(id)arg2;
+ (id)observableForQuery:(id)arg1 context:(id)arg2;
+ (id)observableWithSupplementalResultsForQuery:(id)arg1;
+ (id)queryWithRequest:(id)arg1 searchProvider:(id)arg2 delegate:(id)arg3 probeProvider:(id)arg4 scheduler:(id)arg5 userSession:(id)arg6 delegateToken:(id)arg7;
+ (BOOL)searchTypeSupportsSuppressionOfAlreadyChosenAddresses:(unsigned long long)arg1;
+ (BOOL)shouldPerformQueryForRequest:(id)arg1;
+ (BOOL)shouldSortResultsForPolicy:(id)arg1;
+ (BOOL)shouldSuppressAddressesAlreadyChosenForRequest:(id)arg1;
- (void).cxx_destruct;
- (void)cancel;
- (id)execute;
- (id)executeWithContext:(id)arg1;
- (id)initWithRequest:(id)arg1 searchProvider:(id)arg2 delegate:(id)arg3 probeProvider:(id)arg4 scheduler:(id)arg5 userSession:(id)arg6 delegateToken:(id)arg7;
- (id)makeDelegateWrapperWithDelegate:(id)arg1 forRequest:(id)arg2 sourceInclusionPolicy:(id)arg3 userSession:(id)arg4;
- (void)searchOperationEncounteredError:(id)arg1;
- (void)searchOperationReportedResults:(id)arg1;
- (void)searchOperationsHaveBegunNetworkActivity;
- (void)searchOperationsHaveEndedNetworkActivity;
- (void)searchOperationsHaveFinished;

@end

