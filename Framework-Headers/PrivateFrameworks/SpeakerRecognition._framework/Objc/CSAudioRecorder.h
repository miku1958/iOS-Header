//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <SpeakerRecognition/AVVoiceControllerRecordDelegate-Protocol.h>
#import <SpeakerRecognition/CSAudioDecoderDelegate-Protocol.h>
#import <SpeakerRecognition/CSAudioFileReaderDelegate-Protocol.h>
#import <SpeakerRecognition/CSAudioServerCrashEventProviding-Protocol.h>
#import <SpeakerRecognition/CSAudioSessionEventProviding-Protocol.h>

@class AVVoiceController, CSAudioFileReader, CSRemoteRecordClient, NSDictionary, NSHashTable, NSMutableDictionary, NSString;
@protocol CSAudioServerCrashEventProvidingDelegate, CSAudioSessionEventProvidingDelegate, OS_dispatch_queue;

@interface CSAudioRecorder : NSObject <AVVoiceControllerRecordDelegate, CSAudioDecoderDelegate, CSAudioFileReaderDelegate, CSAudioServerCrashEventProviding, CSAudioSessionEventProviding>
{
    AVVoiceController *_voiceController;
    struct OpaqueAudioConverter *_deinterleaver;
    struct AudioBufferList _interleavedABL;
    struct AudioBufferList *_pNonInterleavedABL;
    CSRemoteRecordClient *_remoteRecordClient;
    NSDictionary *_latestContext;
    BOOL _shouldUseRemoteRecord;
    NSMutableDictionary *_opusDecoders;
    CSAudioFileReader *_audioFileReader;
    unsigned long long _audioFilePathIndex;
    BOOL _waitingForDidStart;
    unsigned long long _pendingTwoShotVTToken;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_voiceControllerCreationQueue;
    NSHashTable *_observers;
    id<CSAudioServerCrashEventProvidingDelegate> _crashEventDelegate;
    id<CSAudioSessionEventProvidingDelegate> _sessionEventDelegate;
}

@property (weak, nonatomic) id<CSAudioServerCrashEventProvidingDelegate> crashEventDelegate; // @synthesize crashEventDelegate=_crashEventDelegate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL duckOthersOption;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) NSHashTable *observers; // @synthesize observers=_observers;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property (weak, nonatomic) id<CSAudioSessionEventProvidingDelegate> sessionEventDelegate; // @synthesize sessionEventDelegate=_sessionEventDelegate;
@property (readonly) Class superclass;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *voiceControllerCreationQueue; // @synthesize voiceControllerCreationQueue=_voiceControllerCreationQueue;

+ (unsigned long long)_convertDeactivateOption:(unsigned long long)arg1;
+ (void)createSharedAudioSession;
- (void).cxx_destruct;
- (void)_audioRecorderDidStartRecordingSuccessfully:(BOOL)arg1 streamHandleID:(unsigned long long)arg2 error:(id)arg3;
- (void)_audioRecorderDidStopRecordingForReason:(long long)arg1 streamHandleID:(unsigned long long)arg2;
- (id)_compensateChannelDataIfNeeded:(id)arg1 receivedNumChannels:(unsigned int)arg2;
- (void)_createDeInterleaverIfNeeded;
- (id)_deinterleaveBufferIfNeeded:(id)arg1 force:(BOOL)arg2;
- (void)_destroyVoiceController;
- (id)_getRecordSettingsWithRequest:(id)arg1;
- (void)_logResourceNotAvailableErrorIfNeeded:(id)arg1;
- (BOOL)_needResetAudioInjectionIndex:(id)arg1;
- (void)_processAudioBuffer:(id)arg1 audioStreamHandleId:(unsigned long long)arg2;
- (void)_processAudioChain:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 remoteVAD:(id)arg3 atTime:(unsigned long long)arg4;
- (BOOL)_shouldInjectAudio;
- (BOOL)_shouldLogResourceNotAvailableError;
- (BOOL)_shouldUseRemoteBuiltInMic:(id)arg1;
- (BOOL)_shouldUseRemoteRecordForContext:(id)arg1;
- (BOOL)_startAudioStreamForAudioInjection;
- (id)_updateLanguageCodeForRemoteVTEIResult:(id)arg1;
- (id)_voiceControllerWithError:(id *)arg1;
- (BOOL)activateAudioSessionWithReason:(unsigned long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (unsigned long long)alertStartTime;
- (void)audioDecoderDidDecodePackets:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3 remoteVAD:(id)arg4 timestamp:(unsigned long long)arg5 receivedNumChannels:(unsigned int)arg6;
- (void)audioFileReaderBufferAvailable:(id)arg1 buffer:(id)arg2 atTime:(unsigned long long)arg3;
- (void)audioFileReaderDidStartRecording:(id)arg1 successfully:(BOOL)arg2 error:(id)arg3;
- (void)audioFileReaderDidStopRecording:(id)arg1 forReason:(long long)arg2;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (void)configureAlertBehavior:(id)arg1 audioStreamHandleId:(unsigned long long)arg2;
- (BOOL)deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;
- (void)dealloc;
- (void)enableMiniDucking:(BOOL)arg1;
- (void)enableSmartRoutingConsiderationForStream:(unsigned long long)arg1 enable:(BOOL)arg2;
- (id)initWithQueue:(id)arg1 error:(id *)arg2;
- (BOOL)isNarrowBandWithStreamHandleId:(unsigned long long)arg1;
- (BOOL)isRecordingWithStreamHandleId:(unsigned long long)arg1;
- (BOOL)isSessionCurrentlyActivated;
- (id)metrics;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (BOOL)playAlertSoundForType:(long long)arg1;
- (BOOL)playRecordStartingAlertAndResetEndpointerFromStream:(unsigned long long)arg1;
- (id)playbackRoute;
- (BOOL)prepareAudioStreamRecord:(id)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)prewarmAudioSessionWithStreamHandleId:(unsigned long long)arg1 error:(id *)arg2;
- (id)recordDeviceInfoWithStreamHandleId:(unsigned long long)arg1;
- (id)recordRouteWithStreamHandleId:(unsigned long long)arg1;
- (id)recordSettingsWithStreamHandleId:(unsigned long long)arg1;
- (float)recordingSampleRateWithStreamHandleId:(unsigned long long)arg1;
- (void)registerObserver:(id)arg1;
- (BOOL)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;
- (void)setAudioServerCrashEventDelegate:(id)arg1;
- (void)setAudioSessionEventDelegate:(id)arg1;
- (unsigned long long)setContext:(id)arg1 error:(id *)arg2;
- (BOOL)setCurrentContext:(id)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (void)setMeteringEnabled:(BOOL)arg1;
- (BOOL)setRecordMode:(long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)startAudioStreamWithOption:(id)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)stopAudioStreamWithStreamHandleId:(unsigned long long)arg1 error:(id *)arg2;
- (void)unregisterObserver:(id)arg1;
- (void)updateMeters;
- (void)voiceControllerAudioCallback:(id)arg1 forStream:(unsigned long long)arg2 buffer:(id)arg3;
- (void)voiceControllerBeginRecordInterruption:(id)arg1;
- (void)voiceControllerBeginRecordInterruption:(id)arg1 withContext:(id)arg2;
- (void)voiceControllerDidFinishAlertPlayback:(id)arg1 ofType:(int)arg2 error:(id)arg3;
- (void)voiceControllerDidSetAudioSessionActive:(id)arg1 isActivated:(BOOL)arg2;
- (void)voiceControllerDidStartRecording:(id)arg1 forStream:(unsigned long long)arg2 successfully:(BOOL)arg3 error:(id)arg4;
- (void)voiceControllerDidStopRecording:(id)arg1 forStream:(unsigned long long)arg2 forReason:(long long)arg3;
- (void)voiceControllerEncoderErrorDidOccur:(id)arg1 error:(id)arg2;
- (void)voiceControllerEndRecordInterruption:(id)arg1;
- (void)voiceControllerMediaServicesWereLost:(id)arg1;
- (void)voiceControllerMediaServicesWereReset:(id)arg1;
- (void)voiceControllerRecordHardwareConfigurationDidChange:(id)arg1 toConfiguration:(int)arg2;
- (void)voiceControllerStreamInvalidated:(id)arg1 forStream:(unsigned long long)arg2;
- (void)voiceControllerWillSetAudioSessionActive:(id)arg1 willActivate:(BOOL)arg2;
- (id)voiceTriggerInfo;
- (void)willDestroy;

@end

