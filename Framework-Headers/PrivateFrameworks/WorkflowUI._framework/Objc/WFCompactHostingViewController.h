//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <UIKit/UIViewController.h>

#import <WorkflowUI/WFActionUserInterfaceListenerDelegate-Protocol.h>
#import <WorkflowUI/WFCompactDialogViewControllerDelegate-Protocol.h>

@class MTMaterialView, NSProgress, NSString, NSTimer, UIView, WFActionUserInterfaceListener, WFCompactStatusViewController, WFCompactUnlockService, WFDialogAttribution, WFDialogRequest, WFWorkflowRunningContext;

@interface WFCompactHostingViewController : UIViewController <WFActionUserInterfaceListenerDelegate, WFCompactDialogViewControllerDelegate>
{
    BOOL _screenIsLocked;
    BOOL _hasViewAppeared;
    BOOL _handlingRequest;
    WFActionUserInterfaceListener *_actionInterfaceListener;
    WFWorkflowRunningContext *_runningContext;
    WFDialogAttribution *_runningAttribution;
    NSProgress *_progress;
    id _progressSubscriber;
    UIView *_dimmingView;
    MTMaterialView *_materialView;
    WFCompactStatusViewController *_statusViewController;
    NSTimer *_statusViewTimer;
    WFDialogRequest *_pendingRequest;
    CDUnknownBlockType _requestCompletionHandler;
    WFCompactUnlockService *_unlockService;
}

@property (strong, nonatomic) WFActionUserInterfaceListener *actionInterfaceListener; // @synthesize actionInterfaceListener=_actionInterfaceListener;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (strong, nonatomic) UIView *dimmingView; // @synthesize dimmingView=_dimmingView;
@property (nonatomic) BOOL handlingRequest; // @synthesize handlingRequest=_handlingRequest;
@property (nonatomic) BOOL hasViewAppeared; // @synthesize hasViewAppeared=_hasViewAppeared;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) MTMaterialView *materialView; // @synthesize materialView=_materialView;
@property (strong, nonatomic) WFDialogRequest *pendingRequest; // @synthesize pendingRequest=_pendingRequest;
@property (strong, nonatomic) NSProgress *progress; // @synthesize progress=_progress;
@property (strong, nonatomic) id progressSubscriber; // @synthesize progressSubscriber=_progressSubscriber;
@property (copy, nonatomic) CDUnknownBlockType requestCompletionHandler; // @synthesize requestCompletionHandler=_requestCompletionHandler;
@property (strong, nonatomic) WFDialogAttribution *runningAttribution; // @synthesize runningAttribution=_runningAttribution;
@property (strong, nonatomic) WFWorkflowRunningContext *runningContext; // @synthesize runningContext=_runningContext;
@property (readonly, nonatomic) BOOL screenIsLocked; // @synthesize screenIsLocked=_screenIsLocked;
@property (strong, nonatomic) WFCompactStatusViewController *statusViewController; // @synthesize statusViewController=_statusViewController;
@property (strong, nonatomic) NSTimer *statusViewTimer; // @synthesize statusViewTimer=_statusViewTimer;
@property (readonly) Class superclass;
@property (readonly, nonatomic) WFCompactUnlockService *unlockService; // @synthesize unlockService=_unlockService;

- (void).cxx_destruct;
- (BOOL)_canShowWhileLocked;
- (void)actionUserInterfaceListener:(id)arg1 showViewInPlatter:(id)arg2 attribution:(id)arg3;
- (void)cancelAndDismiss;
- (void)clearStatusViewTimer;
- (void)dealloc;
- (void)dialogViewController:(id)arg1 didFinishWithResponse:(id)arg2 waitForFollowUpRequest:(BOOL)arg3;
- (void)dismissPersistentChromeWithSuccess:(BOOL)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)dismissPlatterViewControllerAndUpdateChromeAnimated:(BOOL)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)dismissPlatterViewControllerIfNecessaryAnimated:(BOOL)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)dismissPresentedContentWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)handlePendingRequest;
- (void)handleRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)handleTapGesture:(id)arg1;
- (id)initWithScreenLocked:(BOOL)arg1;
- (void)keyboardWillChange;
- (void)loadView;
- (void)preparePersistentChromeWithContext:(id)arg1 attribution:(id)arg2;
- (void)presentChromeIfPossible;
- (void)presentStatusViewController;
- (void)scheduleStatusViewToAppear;
- (void)updateChromeVisibilityWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)viewDidAppear:(BOOL)arg1;

@end

