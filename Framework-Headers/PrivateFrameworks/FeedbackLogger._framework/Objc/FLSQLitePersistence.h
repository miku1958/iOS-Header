//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class FLLoggingContext, NSString;
@protocol OS_os_log;

@interface FLSQLitePersistence : NSObject
{
    _Atomic BOOL _configured;
    NSString *_databasePath;
    struct sqlite3 *_db;
    struct sqlite3_stmt *_insertRecordsStatement;
    struct sqlite3_stmt *_iteratePayloadStatement;
    NSObject<OS_os_log> *_log;
    FLLoggingContext *_context;
    NSString *_bundleIdentifier;
    unsigned long long _maxBatchPayloadInBytes;
    unsigned long long _maxAllowedDatabaseSizeInBytes;
    NSString *_currentBatchIdentifier;
    unsigned long long _currentBatchPayloadSize;
}

@property (readonly, copy, nonatomic) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property (nonatomic) _Atomic BOOL configured; // @synthesize configured=_configured;
@property (strong, nonatomic) FLLoggingContext *context; // @synthesize context=_context;
@property (copy, nonatomic) NSString *currentBatchIdentifier; // @synthesize currentBatchIdentifier=_currentBatchIdentifier;
@property (nonatomic) unsigned long long currentBatchPayloadSize; // @synthesize currentBatchPayloadSize=_currentBatchPayloadSize;
@property (readonly, copy, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property (nonatomic) struct sqlite3 *db; // @synthesize db=_db;
@property (nonatomic) struct sqlite3_stmt *insertRecordsStatement; // @synthesize insertRecordsStatement=_insertRecordsStatement;
@property (nonatomic) struct sqlite3_stmt *iteratePayloadStatement; // @synthesize iteratePayloadStatement=_iteratePayloadStatement;
@property (strong, nonatomic) NSObject<OS_os_log> *log; // @synthesize log=_log;
@property (nonatomic) unsigned long long maxAllowedDatabaseSizeInBytes; // @synthesize maxAllowedDatabaseSizeInBytes=_maxAllowedDatabaseSizeInBytes;
@property (nonatomic) unsigned long long maxBatchPayloadInBytes; // @synthesize maxBatchPayloadInBytes=_maxBatchPayloadInBytes;

+ (id)batchStatusDescription:(int)arg1;
- (void).cxx_destruct;
- (BOOL)__purgeStatementHelper:(const char *)arg1 forBatchId:(id)arg2;
- (id)_getBatchIdsHelper:(struct sqlite3_stmt *)arg1;
- (BOOL)_updateMetadataHelperForBatch:(id)arg1 query:(const char *)arg2;
- (BOOL)_updateStatusHelperForBatch:(id)arg1 toStatus:(int)arg2;
- (BOOL)closeOpenBatches;
- (BOOL)createDatabase;
- (void)dealloc;
- (BOOL)deleteDatabase;
- (long long)doBatchesHousekeeping;
- (BOOL)executeInTransactionMultipleSQLStatements:(id)arg1;
- (BOOL)executeSQLStatement:(const char *)arg1;
- (BOOL)executeSQLStatement:(const char *)arg1 usingTransaction:(BOOL)arg2;
- (id)getBatchIdsWithAllStatuses;
- (id)getBatchIdsWithStatus:(int)arg1;
- (BOOL)getBatchMetadata:(id)arg1 batchMetadata:(inout id *)arg2;
- (unsigned long long)getCurrentDatabaseSize;
- (int)getDataVersion;
- (BOOL)getIntValueForPragma:(id)arg1 into:(inout int *)arg2;
- (id)getPurgableBatchIds;
- (id)getRecordsRangeStart:(long long)arg1 end:(long long)arg2;
- (int)getSchemaVersion;
- (id)initWithPath:(id)arg1 application:(id)arg2 loggingContext:(id)arg3;
- (BOOL)initializeConnectionForUseBy:(int)arg1;
- (BOOL)initializeNewBatch;
- (BOOL)iteratePayloadForBatch:(id)arg1 codeblock:(CDUnknownBlockType)arg2;
- (BOOL)markBatchesforPurge;
- (BOOL)open;
- (BOOL)persist:(id)arg1;
- (BOOL)prepareSchema;
- (BOOL)prepareStatements;
- (BOOL)purgeAllBatches;
- (BOOL)purgeBatch:(id)arg1;
- (BOOL)recoverOrphanedProcessingBatches;
- (BOOL)setDatabaseSizeLimit;
- (BOOL)tryPrepare:(const char *)arg1 preparedStatement:(inout struct sqlite3_stmt **)arg2;
- (BOOL)tryRolloverBatchIfNecessary:(unsigned long long)arg1;
- (BOOL)updateSchema;
- (BOOL)updateStatusForBatch:(id)arg1 toStatus:(int)arg2;

@end

