//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BitrateAdjuster;

struct Chromaticity {
    float _field1;
    float _field2;
};

struct CodecSpecificInfo {
    int _field1;
    char *_field2;
    union CodecSpecificInfoUnion _field3;
};

struct CodecSpecificInfoH264 {
    int _field1;
};

struct CodecSpecificInfoVP8 {
    BOOL _field1;
    unsigned char _field2;
    BOOL _field3;
    char _field4;
};

struct CodecSpecificInfoVP9 {
    BOOL _field1;
    BOOL _field2;
    BOOL _field3;
    BOOL _field4;
    BOOL _field5;
    unsigned char _field6;
    BOOL _field7;
    BOOL _field8;
    unsigned char _field9;
    unsigned long long _field10;
    BOOL _field11;
    unsigned short _field12[8];
    unsigned short _field13[8];
    struct GofInfoVP9 _field14;
    unsigned char _field15;
    unsigned char _field16[3];
    BOOL _field17;
};

struct ColorSpace {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    int _field4;
    struct optional<webrtc::HdrMetadata> _field5;
};

struct EncodedImage {
    unsigned int _field1;
    unsigned int _field2;
    long long _field3;
    long long _field4;
    int _field5;
    char *_field6;
    unsigned long long _field7;
    unsigned long long _field8;
    int _field9;
    unsigned char _field10;
    BOOL _field11;
    int _field12;
    struct PlayoutDelay _field13;
    struct Timing _field14;
    unsigned int _field15;
    struct optional<int> _field16;
    struct optional<webrtc::ColorSpace> _field17;
};

struct GofInfoVP9 {
    unsigned long long _field1;
    unsigned char _field2[255];
    BOOL _field3[255];
    unsigned char _field4[255];
    unsigned char _field5[255][3];
    unsigned short _field6;
};

struct H264BitstreamParser {
    CDUnknownFunctionPointerType *_vptr$H264BitstreamParser;
    struct optional<webrtc::SpsParser::SpsState> sps_;
    struct optional<webrtc::PpsParser::PpsState> pps_;
    struct optional<int> last_slice_qp_delta_;
};

struct HdrMasteringMetadata {
    struct Chromaticity _field1;
    struct Chromaticity _field2;
    struct Chromaticity _field3;
    struct Chromaticity _field4;
    float _field5;
    float _field6;
};

struct HdrMetadata {
    struct HdrMasteringMetadata _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct I420BufferInterface;

struct PlayoutDelay {
    int _field1;
    int _field2;
};

struct PpsState {
    BOOL bottom_field_pic_order_in_frame_present_flag;
    BOOL weighted_pred_flag;
    BOOL entropy_coding_mode_flag;
    unsigned int weighted_bipred_idc;
    unsigned int redundant_pic_cnt_present_flag;
    int pic_init_qp_minus26;
    unsigned int id;
    unsigned int sps_id;
};

struct RTPFragmentationHeader {
    unsigned short _field1;
    unsigned long long *_field2;
    unsigned long long *_field3;
    unsigned short *_field4;
    char *_field5;
};

struct RtpEncodingParameters {
    struct optional<unsigned int> _field1;
    struct optional<int> _field2;
    struct optional<webrtc::RtpFecParameters> _field3;
    struct optional<webrtc::RtpRtxParameters> _field4;
    struct optional<webrtc::DtxStatus> _field5;
    double _field6;
    double _field7;
    struct optional<int> _field8;
    struct optional<int> _field9;
    struct optional<int> _field10;
    struct optional<int> _field11;
    struct optional<int> _field12;
    struct optional<double> _field13;
    struct optional<double> _field14;
    BOOL _field15;
    basic_string_a1f69cfb _field16;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field17;
};

struct RtpFecParameters {
    struct optional<unsigned int> _field1;
    int _field2;
};

struct RtpRtxParameters {
    struct optional<unsigned int> _field1;
};

struct SdpVideoFormat {
    basic_string_a1f69cfb _field1;
    struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> _field2;
};

struct SpatialLayer {
    unsigned short width;
    unsigned short height;
    float maxFramerate;
    unsigned char numberOfTemporalLayers;
    unsigned int maxBitrate;
    unsigned int targetBitrate;
    unsigned int minBitrate;
    unsigned int qpMax;
    BOOL active;
};

struct SpsState {
    unsigned int width;
    unsigned int height;
    unsigned int delta_pic_order_always_zero_flag;
    unsigned int separate_colour_plane_flag;
    unsigned int frame_mbs_only_flag;
    unsigned int log2_max_frame_num;
    unsigned int log2_max_pic_order_cnt_lsb;
    unsigned int pic_order_cnt_type;
    unsigned int max_num_ref_frames;
    unsigned int vui_params_present;
    unsigned int id;
};

struct Timing {
    unsigned char _field1;
    long long _field2;
    long long _field3;
    long long _field4;
    long long _field5;
    long long _field6;
    long long _field7;
    long long _field8;
    long long _field9;
};

struct TimingFrameTriggerThresholds {
    long long delay_ms;
    unsigned short outlier_ratio_percent;
};

struct VideoBitrateAllocation {
    unsigned int sum_;
    struct optional<unsigned int> bitrates_[5][4];
};

struct VideoCodec {
    int codecType;
    unsigned char plType;
    unsigned short width;
    unsigned short height;
    unsigned int startBitrate;
    unsigned int maxBitrate;
    unsigned int minBitrate;
    unsigned int targetBitrate;
    unsigned int maxFramerate;
    BOOL active;
    unsigned int qpMax;
    unsigned char numberOfSimulcastStreams;
    struct SpatialLayer simulcastStream[4];
    struct SpatialLayer spatialLayers[5];
    int mode;
    BOOL expect_encode_from_texture;
    struct TimingFrameTriggerThresholds timing_frame_thresholds;
    union VideoCodecUnion codec_specific_;
};

struct VideoCodecH264 {
    BOOL frameDroppingOn;
    int keyFrameInterval;
    char *spsData;
    unsigned long long spsLen;
    char *ppsData;
    unsigned long long ppsLen;
    int profile;
};

struct VideoCodecVP8 {
    int complexity;
    unsigned char numberOfTemporalLayers;
    BOOL denoisingOn;
    BOOL automaticResizeOn;
    BOOL frameDroppingOn;
    int keyFrameInterval;
};

struct VideoCodecVP9 {
    int complexity;
    unsigned char numberOfTemporalLayers;
    BOOL denoisingOn;
    BOOL frameDroppingOn;
    int keyFrameInterval;
    BOOL adaptiveQpMode;
    BOOL automaticResizeOn;
    unsigned char numberOfSpatialLayers;
    BOOL flexibleMode;
    int interLayerPred;
};

struct VideoDecoder;

struct VideoEncoder;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *_field1;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field1;
                struct __short {
                    union {
                        unsigned char _field1;
                        char _field2;
                    } _field1;
                    char _field2[23];
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct dummy_type {
    struct empty_struct data[44];
};

struct empty_struct;

struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct optional<double> {
    BOOL _field1;
    union {
        struct dummy_type _field1;
        double _field2;
    } _field2;
};

struct optional<int> {
    BOOL engaged_;
    CDUnion_1bb239ac ;
};

struct optional<unsigned int> {
    BOOL engaged_;
    union {
        struct dummy_type dummy_;
        unsigned int data_;
    } ;
};

struct optional<webrtc::ColorSpace> {
    BOOL _field1;
    union {
        struct dummy_type _field1;
        struct ColorSpace _field2;
    } _field2;
};

struct optional<webrtc::DtxStatus> {
    BOOL _field1;
    CDUnion_1bb239ac _field2;
};

struct optional<webrtc::HdrMetadata> {
    BOOL _field1;
    union {
        struct dummy_type _field1;
        struct HdrMetadata _field2;
    } _field2;
};

struct optional<webrtc::PpsParser::PpsState> {
    BOOL engaged_;
    union {
        struct dummy_type dummy_;
        struct PpsState data_;
    } ;
};

struct optional<webrtc::RtpFecParameters> {
    BOOL _field1;
    union {
        struct dummy_type _field1;
        struct RtpFecParameters _field2;
    } _field2;
};

struct optional<webrtc::RtpRtxParameters> {
    BOOL _field1;
    union {
        struct dummy_type _field1;
        struct RtpRtxParameters _field2;
    } _field2;
};

struct optional<webrtc::SpsParser::SpsState> {
    BOOL engaged_;
    union {
        struct dummy_type dummy_;
        struct SpsState data_;
    } ;
};

struct scoped_refptr<webrtc::I420BufferInterface> {
    struct I420BufferInterface *ptr_;
};

struct unique_ptr<webrtc::BitrateAdjuster, std::__1::default_delete<webrtc::BitrateAdjuster>> {
    struct __compressed_pair<webrtc::BitrateAdjuster *, std::__1::default_delete<webrtc::BitrateAdjuster>> {
        struct BitrateAdjuster *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::RTPFragmentationHeader, std::__1::default_delete<webrtc::RTPFragmentationHeader>> {
    struct __compressed_pair<webrtc::RTPFragmentationHeader *, std::__1::default_delete<webrtc::RTPFragmentationHeader>> {
        struct RTPFragmentationHeader *_field1;
    } _field1;
};

struct unique_ptr<webrtc::VideoDecoder, std::__1::default_delete<webrtc::VideoDecoder>> {
    struct __compressed_pair<webrtc::VideoDecoder *, std::__1::default_delete<webrtc::VideoDecoder>> {
        struct VideoDecoder *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::VideoEncoder, std::__1::default_delete<webrtc::VideoEncoder>> {
    struct __compressed_pair<webrtc::VideoEncoder *, std::__1::default_delete<webrtc::VideoEncoder>> {
        struct VideoEncoder *__value_;
    } __ptr_;
};

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    basic_string_a1f69cfb *_field1;
    basic_string_a1f69cfb *_field2;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        basic_string_a1f69cfb *_field1;
    } _field3;
};

struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field1;
                struct __short {
                    union {
                        unsigned char _field1;
                        char _field2;
                    } _field1;
                    char _field2[23];
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
} basic_string_a1f69cfb;

typedef struct scoped_refptr<webrtc::I420BufferInterface> {
    struct I420BufferInterface *ptr_;
} scoped_refptr_b674d2a6;

typedef struct unique_ptr<webrtc::RTPFragmentationHeader, std::__1::default_delete<webrtc::RTPFragmentationHeader>> {
    struct __compressed_pair<webrtc::RTPFragmentationHeader *, std::__1::default_delete<webrtc::RTPFragmentationHeader>> {
        struct RTPFragmentationHeader *_field1;
    } _field1;
} unique_ptr_91070b9b;

typedef struct unique_ptr<webrtc::VideoDecoder, std::__1::default_delete<webrtc::VideoDecoder>> {
    struct __compressed_pair<webrtc::VideoDecoder *, std::__1::default_delete<webrtc::VideoDecoder>> {
        struct VideoDecoder *__value_;
    } __ptr_;
} unique_ptr_28850a1b;

typedef struct unique_ptr<webrtc::VideoEncoder, std::__1::default_delete<webrtc::VideoEncoder>> {
    struct __compressed_pair<webrtc::VideoEncoder *, std::__1::default_delete<webrtc::VideoEncoder>> {
        struct VideoEncoder *__value_;
    } __ptr_;
} unique_ptr_2722152f;

#pragma mark Named Unions

union CodecSpecificInfoUnion {
    struct CodecSpecificInfoVP8 _field1;
    struct CodecSpecificInfoVP9 _field2;
    struct CodecSpecificInfoH264 _field3;
};

union VideoCodecUnion {
    struct VideoCodecVP8 VP8;
    struct VideoCodecVP9 VP9;
    struct VideoCodecH264 H264;
};

#pragma mark Typedef'd Unions

typedef union {
    struct dummy_type dummy_;
    int data_;
} CDUnion_1bb239ac;

