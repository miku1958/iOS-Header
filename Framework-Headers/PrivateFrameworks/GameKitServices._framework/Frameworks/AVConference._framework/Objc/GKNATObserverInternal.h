//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <AVConference/GKNATObserver.h>

@class GKNATObserver_SCContext, NSMutableDictionary, NSObject, NSRecursiveLock;
@protocol GKNATObserverDelegate, OS_dispatch_group, OS_dispatch_queue, OS_dispatch_semaphore;

__attribute__((visibility("hidden")))
@interface GKNATObserverInternal : GKNATObserver
{
    id<GKNATObserverDelegate> _delegate;
    struct __SCDynamicStore *_dynamicStore;
    NSRecursiveLock *_xNATCheck;
    int _lastReportedNATType;
    int _lastReportedCarrierNATType;
    int _lastReportedNonCarrierNATType;
    NSMutableDictionary *_interfaceInfoDictionary;
    BOOL _nonCarrierInterfacesOnly;
    BOOL _checkTCPAndSSL;
    BOOL _favorNonCarrier;
    BOOL _newCarrierType;
    BOOL _addInRangeFlag;
    BOOL _addCarrierFlag;
    BOOL _ignoreNatTypeCache;
    BOOL _ignoreCarrierBundle;
    int _NATCheckRetryCount;
    double _NATCheckRetryDelay;
    NSMutableDictionary *_currentNetworkNames;
    NSObject<OS_dispatch_queue> *_natCheckQueue;
    NSObject<OS_dispatch_queue> *_reportNATQueue;
    NSObject<OS_dispatch_group> *_natCheckGroup;
    NSObject<OS_dispatch_semaphore> *_natCheckNetNameSema;
    BOOL _fNATCheckQueued;
    BOOL _fNATCheckInProgress;
    GKNATObserver_SCContext *_sccontext;
    BOOL _hasNATCheckStarted;
    BOOL _hasNATCheckEnded;
}

- (void)HTTPCheckWithIPPort:(struct tagIPPORT *)arg1 useCache:(BOOL)arg2;
- (void)HTTPSCheckWithIPPort:(struct tagIPPORT *)arg1 useCache:(BOOL)arg2;
- (void)NATCheckWithIPPort:(struct tagIPPORT *)arg1 useCache:(BOOL)arg2;
- (void)cacheNATFlags:(id)arg1 forNetwork:(id)arg2;
- (void)calculateSummmaryNATType:(int *)arg1 andCarrierNATType:(int *)arg2 andNonCarrierNATType:(int *)arg3 copyInterfaceInfoDictionary:(id *)arg4;
- (struct tagCommNATInfo *)callCommNATTestFromIPPort:(struct tagIPPORT *)arg1;
- (int)callHTTPTestFromIPPort:(struct tagIPPORT *)arg1 ToServer:(id)arg2 isSSL:(BOOL)arg3;
- (void)clearRetries;
- (int)currentNATType;
- (void)dealloc;
- (id)delegate;
- (BOOL)ensureNatCachePathExists;
- (id)init;
- (id)initWithOptions:(id)arg1;
- (id)lookupCachedNATFlagsForNetwork:(id)arg1;
- (id)nameForNetworkWithIPPort:(struct tagIPPORT *)arg1 interfaceName:(id)arg2;
- (int)natTypeForCommNATFlags:(unsigned int)arg1 isCarrier:(BOOL)arg2 commnatFlagsCached:(BOOL)arg3 tcpFlagsCached:(BOOL)arg4 sslFlagsCached:(BOOL)arg5;
- (void)registerForNetworkChanges;
- (oneway void)release;
- (void)reportNATType;
- (id)retrieveNatTypeCache;
- (id)retrieveNatTypeCache_CachePlistScheme;
- (id)retrieveNatTypeCache_OSXGamedScheme;
- (unsigned int)setCommNATFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(BOOL)arg3;
- (void)setDelegate:(id)arg1;
- (unsigned int)setFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(BOOL)arg3 isCachedKey:(id)arg4 mask:(unsigned int)arg5;
- (unsigned int)setSSLFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(BOOL)arg3;
- (unsigned int)setTCPFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(BOOL)arg3;
- (void)shouldTryNATCheck;
- (void)tryNATCheckWithDelay:(double)arg1;
- (void)updateNatTypeCache:(id)arg1;
- (void)updateNatTypeCache_CachePlistScheme:(id)arg1;
- (void)updateNatTypeCache_OSXGamedScheme:(id)arg1;

@end

