//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <Catalyst/CATHTTPMessageParserDelegate-Protocol.h>
#import <Catalyst/NSStreamDelegate-Protocol.h>

@class CATHTTPMessageParser, NSArray, NSError, NSInputStream, NSMutableArray, NSMutableData, NSOutputStream, NSString, NSTimer;
@protocol CATRemoteConnectionDelegate;

@interface CATRemoteConnection : NSObject <CATHTTPMessageParserDelegate, NSStreamDelegate>
{
    CATHTTPMessageParser *mMessageParser;
    long long mState;
    NSMutableArray *mPendingSendDataContexts;
    NSTimer *mConnectionTimeoutTimer;
    NSError *mInterruptionError;
    NSMutableData *mReadBuffer;
    NSArray *mTrustedCertificates;
    long long mPeerTrustState;
    BOOL _usesSSL;
    id<CATRemoteConnectionDelegate> _delegate;
    NSString *_name;
    double _connectionTimeoutInterval;
    NSInputStream *_inputStream;
    NSOutputStream *_outputStream;
}

@property (nonatomic) double connectionTimeoutInterval; // @synthesize connectionTimeoutInterval=_connectionTimeoutInterval;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<CATRemoteConnectionDelegate> delegate; // @synthesize delegate=_delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) NSInputStream *inputStream; // @synthesize inputStream=_inputStream;
@property (copy, nonatomic) NSString *name; // @synthesize name=_name;
@property (strong, nonatomic) NSOutputStream *outputStream; // @synthesize outputStream=_outputStream;
@property (readonly, nonatomic) struct __SecTrust *peerTrust;
@property (readonly) Class superclass;
@property (nonatomic) BOOL usesSSL; // @synthesize usesSSL=_usesSSL;

+ (void)createConnectionPairWithConnection:(id *)arg1 andConnection:(id *)arg2;
+ (void)load;
- (void).cxx_destruct;
- (void)close;
- (void)configureStreamSocketOptions;
- (void)connectionDidInterruptWithError:(id)arg1;
- (void)connectionDidReceiveData;
- (void)connectionShouldSendData;
- (void)connectionTimedOut;
- (void)dealloc;
- (void)delegateDidClose;
- (void)delegateDidFailToSecureUsingClientIdentity:(struct __SecIdentity *)arg1 trustedCertificates:(id)arg2;
- (void)delegateDidFailToSecureUsingServerIdentity:(struct __SecIdentity *)arg1 trustedCertificates:(id)arg2;
- (void)delegateDidFailToSendData:(id)arg1 userInfo:(id)arg2 error:(id)arg3;
- (void)delegateDidInterruptWithError:(id)arg1;
- (void)delegateDidOpen;
- (void)delegateDidReceiveData:(id)arg1;
- (void)delegateDidSecureUsingClientIdentity:(struct __SecIdentity *)arg1 trustedCertificates:(id)arg2;
- (void)delegateDidSecureUsingServerIdentity:(struct __SecIdentity *)arg1 trustedCertificates:(id)arg2;
- (void)delegateDidSendData:(id)arg1 userInfo:(id)arg2;
- (BOOL)evaluatePeerTrust:(struct __SecTrust *)arg1;
- (id)initWithInputStream:(id)arg1 outputStream:(id)arg2;
- (id)initWithNetService:(id)arg1;
- (void)messageParser:(id)arg1 didParseData:(id)arg2;
- (void)open;
- (void)removeFromRunLoop:(id)arg1 forMode:(id)arg2;
- (void)scheduleInRunLoop:(id)arg1 forMode:(id)arg2;
- (void)secureUsingClientIdentity:(struct __SecIdentity *)arg1 trustedCertificates:(id)arg2;
- (BOOL)secureUsingIdentity:(struct __SecIdentity *)arg1 trustedCertificates:(id)arg2 isServer:(BOOL)arg3;
- (void)secureUsingServerIdentity:(struct __SecIdentity *)arg1 trustedCertificates:(id)arg2;
- (void)sendData:(id)arg1 userInfo:(id)arg2;
- (void)sendDataDidFail:(id)arg1 withError:(id)arg2;
- (void)sendDataDidSucceed:(id)arg1;
- (void)stream:(id)arg1 handleEvent:(unsigned long long)arg2;
- (void)tryEvaluatingPeerTrustWithStream:(id)arg1;
- (BOOL)trySendingData:(id)arg1 error:(id *)arg2;

@end

