//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <SiriCore/SiriCoreConnectionProviderDelegate-Protocol.h>

@class NSMutableArray, NSMutableDictionary, NSString, SiriCoreDataCompressor, SiriCoreDataDecompressor, SiriCorePingInfo, SiriCoreSiriConnectionInfo;
@protocol OS_dispatch_data, OS_dispatch_queue, OS_dispatch_source, SiriCoreConnectionProvider, SiriCoreSiriBackgroundConnectionDelegate;

@interface SiriCoreSiriBackgroundConnection : NSObject <SiriCoreConnectionProviderDelegate>
{
    id<SiriCoreSiriBackgroundConnectionDelegate> _delegate;
    NSObject<OS_dispatch_queue> *_queue;
    id<SiriCoreConnectionProvider> _connectionProvider;
    SiriCoreSiriConnectionInfo *_connectionInfo;
    NSObject<OS_dispatch_data> *_bufferedInputData;
    NSObject<OS_dispatch_data> *_bufferedProviderHeaderOutputData;
    NSObject<OS_dispatch_data> *_bufferedGeneralOutputData;
    NSObject<OS_dispatch_data> *_bufferedUncompressedData;
    SiriCoreDataDecompressor *_inputDecompressor;
    SiriCoreDataCompressor *_outputCompressor;
    struct __CFHTTPMessage *_httpResponseHeader;
    BOOL _isOpened;
    BOOL _isCanceled;
    BOOL _hasReportedError;
    NSMutableDictionary *_errorsForConnectionMethods;
    NSObject<OS_dispatch_source> *_aceHeaderTimerSource;
    unsigned long long _aceHeaderTimerFireCount;
    NSObject<OS_dispatch_source> *_pingTimerSource;
    unsigned int _currentPingIndex;
    SiriCorePingInfo *_pingInfo;
    unsigned long long _lastInputLength;
    void *_lastInputDataPointer;
    unsigned long long _inputLengthUnchangedCounter;
    unsigned long long _lastOutputLength;
    void *_lastOutputDataPointer;
    unsigned long long _outputLengthUnchangedCounter;
    unsigned int _currentBarrierIndex;
    NSMutableDictionary *_outstandingBarriers;
    long long _connectionMethod;
    NSObject<OS_dispatch_data> *_safetyNetBuffer;
    NSObject<OS_dispatch_queue> *_metricsQueue;
    double _firstStartTime;
    double _currentStartTime;
    double _currentOpenTime;
    double _firstByteReadTime;
    unsigned long long _startCount;
    unsigned long long _metricsCount;
    NSString *_peerType;
    NSString *_peerVersion;
    NSString *_productTypePrefix;
    BOOL _usesProxyConnection;
    BOOL _deviceIsInWalkaboutExperimentGroup;
    BOOL _siriConnectionUsesPeerManagedSync;
    Class _peerProviderClass;
    NSMutableArray *_outgoingCommandsWithSendCompletions;
    BOOL _primaryConnectionViable;
    BOOL _betterPathAvailable;
    long long _secondaryConnectionOpenState;
    id<SiriCoreConnectionProvider> _secondaryConnectionProvider;
    BOOL _dispatchedSnapshotMetrics;
}

@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<SiriCoreSiriBackgroundConnectionDelegate> delegate; // @synthesize delegate=_delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL deviceIsInWalkaboutExperimentGroup; // @synthesize deviceIsInWalkaboutExperimentGroup=_deviceIsInWalkaboutExperimentGroup;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) Class peerProviderClass; // @synthesize peerProviderClass=_peerProviderClass;
@property (copy, nonatomic) NSString *peerType; // @synthesize peerType=_peerType;
@property (copy, nonatomic) NSString *peerVersion; // @synthesize peerVersion=_peerVersion;
@property (copy, nonatomic) NSString *productTypePrefix; // @synthesize productTypePrefix=_productTypePrefix;
@property (nonatomic) BOOL siriConnectionUsesPeerManagedSync; // @synthesize siriConnectionUsesPeerManagedSync=_siriConnectionUsesPeerManagedSync;
@property (readonly) Class superclass;
@property (nonatomic) BOOL usesProxyConnection; // @synthesize usesProxyConnection=_usesProxyConnection;

- (void).cxx_destruct;
- (id)_aceHeaderData;
- (void)_aceHeaderTimeoutFired:(id)arg1 afterTimeout:(double)arg2;
- (id)_bestErrorBetweenError:(id)arg1 peerError:(id)arg2;
- (void)_bufferGeneralData:(id)arg1;
- (BOOL)_canFallBackFromError:(id)arg1;
- (void)_cancelForExtendedValidationFailureWithTrustInfo:(id)arg1;
- (void)_cancelOutstandingBarriers;
- (void)_cancelSecondaryConnection;
- (long long)_checkForProgressOnReadingData;
- (long long)_checkPings;
- (void)_closeConnection;
- (void)_closeConnectionAndPrepareForReconnect:(BOOL)arg1;
- (void)_connectionHasBytesAvailable:(id)arg1;
- (id)_connectionMethodDescription;
- (id)_connectionType;
- (BOOL)_consumeAceDataWithData:(id)arg1 bytesRead:(unsigned long long *)arg2 error:(id *)arg3;
- (BOOL)_consumeAceHeaderWithData:(id)arg1 bytesRead:(unsigned long long *)arg2 error:(id *)arg3;
- (BOOL)_consumeHTTPHeaderWithData:(id)arg1 bytesRead:(unsigned long long *)arg2 error:(id *)arg3;
- (void)_didEncounterError:(id)arg1;
- (void)_fallBackToNextConnectionMethod:(long long)arg1 fromError:(id)arg2 afterDelay:(double)arg3;
- (void)_fallBackToNextConnectionMethodWithError:(id)arg1 orElse:(CDUnknownBlockType)arg2;
- (void)_forceTriggerRetry;
- (void)_getCellularMetrics:(id)arg1;
- (id)_getInitialPayloadWithBufferedLength:(unsigned long long *)arg1 forceReconnect:(BOOL)arg2;
- (void)_getWifiMetrics:(id)arg1;
- (void)_handleAceEnd;
- (void)_handleAceNop;
- (void)_handleAceObject:(id)arg1;
- (void)_handleAcePing:(unsigned int)arg1;
- (void)_handleAcePong:(unsigned int)arg1;
- (void)_handleBarrierReply:(unsigned int)arg1;
- (void)_handlePacket:(CDStruct_95d471ab *)arg1;
- (BOOL)_hasBufferedDataOrOutstandingPings;
- (BOOL)_hasReadACEHeader;
- (BOOL)_hasReadHTTPHeader;
- (id)_headerDataForURL:(id)arg1 aceHost:(id)arg2 languageCode:(id)arg3 syncAssistantId:(id)arg4;
- (id)_httpHeaderData;
- (void)_initializeBufferedGeneralOutputDataWithInitialPayload:(BOOL)arg1;
- (void)_networkProviderDidOpen;
- (long long)_nextConnectionMethod;
- (long long)_normalizeSNR:(long long)arg1;
- (void)_pingTimerFired;
- (void)_prepareProviderHeaderWithForceReconnect:(BOOL)arg1;
- (Class)_providerClass;
- (void)_resumePingTimer;
- (void)_scheduleAceHeaderTimeoutTimerWithInterval:(double)arg1;
- (BOOL)_sendAcePingWithId:(unsigned int)arg1 error:(id *)arg2;
- (BOOL)_sendAcePongWithId:(unsigned int)arg1 error:(id *)arg2;
- (void)_sendGeneralData:(id)arg1;
- (void)_setNetworkProvider:(id)arg1;
- (void)_setupReadHandlerOnProvider;
- (BOOL)_shouldTrySameConnectionMethodForMethod:(long long)arg1 error:(id)arg2;
- (void)_startNetworkProviderWithInfo:(id)arg1;
- (void)_startSecondaryConnection;
- (void)_startWithConnectionInfo:(id)arg1 proposedFallbackMethod:(long long)arg2 allowFallbackToNewMethod:(BOOL)arg3;
- (BOOL)_tcpInfoIndicatesPoorLinkQuality;
- (BOOL)_tryParsingHTTPHeaderData:(id)arg1 partialMessage:(struct __CFHTTPMessage *)arg2 statusCode:(long long *)arg3 bytesRead:(unsigned long long *)arg4 error:(id *)arg5;
- (id)_tryReadingAceHeaderFromData:(id)arg1 bytesParsed:(unsigned long long *)arg2 error:(id *)arg3;
- (BOOL)_tryReadingHTTPHeaderData:(id)arg1 withMessage:(struct __CFHTTPMessage *)arg2 bytesRead:(unsigned long long *)arg3 error:(id *)arg4;
- (BOOL)_tryReadingParsedDataFromBytes:(const void *)arg1 length:(unsigned long long)arg2 packet:(CDStruct_95d471ab *)arg3 object:(id *)arg4 bytesParsed:(unsigned long long *)arg5 error:(id *)arg6;
- (void)_tryToWriteBufferedOutputData;
- (void)_updateBuffersForInitialPayload:(id)arg1 bufferedLength:(unsigned long long)arg2 forceReconnect:(BOOL)arg3;
- (BOOL)_usingFlorence;
- (BOOL)_usingNetwork;
- (BOOL)_usingPOP;
- (BOOL)_usingPOPOnPeer;
- (BOOL)_usingPeer;
- (BOOL)_wifiOrCellularMayBeBetterThanCurrentStream;
- (id)analysisInfo;
- (void)barrier:(CDUnknownBlockType)arg1;
- (void)cancel;
- (void)connectionProvider:(id)arg1 receivedError:(id)arg2;
- (void)connectionProvider:(id)arg1 receivedViabilityChangeNotification:(BOOL)arg2;
- (void)connectionProviderReceivedBetterRouteNotification:(id)arg1;
- (void)dealloc;
- (id)getConnectionMethodUsed;
- (void)getConnectionMetrics:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (id)init;
- (id)initWithQueue:(id)arg1;
- (void)probeConnection;
- (void)sendCommand:(id)arg1 moreComing:(BOOL)arg2 errorHandler:(CDUnknownBlockType)arg3;
- (void)sendCommands:(id)arg1 errorHandler:(CDUnknownBlockType)arg2;
- (void)setSendPings:(BOOL)arg1;
- (void)startHeartBeat;
- (void)startWithConnectionInfo:(id)arg1;
- (void)stopHeartBeat;
- (void)updateActiveBackgroundConnectionWithSecondary;

@end

