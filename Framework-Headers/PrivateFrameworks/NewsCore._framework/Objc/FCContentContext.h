//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <NewsCore/FCContentContext-Protocol.h>
#import <NewsCore/FCCoreConfigurationObserving-Protocol.h>
#import <NewsCore/FCNetworkReachabilityRequirementObserving-Protocol.h>

@class FCAVAssetDownloadManager, FCArticleController, FCAssetManager, FCContentContextInternal, FCContextConfiguration, FCFlintResourceManager, FCNetworkBehaviorMonitor, FCTagController, NSString, NSURL;
@protocol FCAVAssetCacheType, FCAVAssetFactoryType, FCAVAssetKeyCacheType, FCAVAssetKeyManagerType, FCAVAssetKeyServiceType, FCAVAssetPrewarming, FCAVAssetResourceLoaderType, FCAssetKeyCacheType, FCAssetKeyManagerType, FCAssetKeyServiceType, FCBackgroundTaskable, FCCoreConfigurationManager, FCNetworkReachabilityRequirement, FCNewsAppConfigurationManager, FCPPTContext;

@interface FCContentContext : NSObject <FCNetworkReachabilityRequirementObserving, FCCoreConfigurationObserving, FCContentContext>
{
    id<FCCoreConfigurationManager> _configurationManager;
    FCArticleController *_articleController;
    FCAssetManager *_assetManager;
    id<FCAVAssetCacheType> _avAssetCache;
    FCAVAssetDownloadManager *_avAssetDownloadManager;
    id<FCAVAssetPrewarming> _avAssetPrewarmer;
    FCFlintResourceManager *_flintResourceManager;
    FCTagController *_tagController;
    FCNetworkBehaviorMonitor *_networkBehaviorMonitor;
    id<FCPPTContext> _pptContext;
    id<FCBackgroundTaskable> _backgroundTaskable;
    FCContextConfiguration *_contextConfiguration;
    NSString *_contentDirectory;
    NSURL *_assetCacheDirectoryURL;
    FCContentContextInternal *_internalContentContext;
    id<FCAssetKeyServiceType> _assetKeyService;
    id<FCAssetKeyCacheType> _assetKeyCache;
    id<FCAssetKeyManagerType> _assetKeyManager;
    id<FCAVAssetFactoryType> _avAssetFactory;
    id<FCAVAssetKeyServiceType> _avAssetKeyService;
    id<FCAVAssetKeyCacheType> _avAssetKeyCache;
    id<FCAVAssetKeyManagerType> _avAssetKeyManager;
    id<FCAVAssetResourceLoaderType> _avAssetResourceLoader;
    id<FCNetworkReachabilityRequirement> _supportedCountryNetworkReachabilityRequirement;
}

@property (readonly, nonatomic) id<FCNewsAppConfigurationManager> appConfigurationManager;
@property (readonly, nonatomic) FCArticleController *articleController; // @synthesize articleController=_articleController;
@property (strong, nonatomic) NSURL *assetCacheDirectoryURL; // @synthesize assetCacheDirectoryURL=_assetCacheDirectoryURL;
@property (strong, nonatomic) id<FCAssetKeyCacheType> assetKeyCache; // @synthesize assetKeyCache=_assetKeyCache;
@property (strong, nonatomic) id<FCAssetKeyManagerType> assetKeyManager; // @synthesize assetKeyManager=_assetKeyManager;
@property (strong, nonatomic) id<FCAssetKeyServiceType> assetKeyService; // @synthesize assetKeyService=_assetKeyService;
@property (readonly, nonatomic) FCAssetManager *assetManager; // @synthesize assetManager=_assetManager;
@property (strong, nonatomic) id<FCAVAssetCacheType> avAssetCache; // @synthesize avAssetCache=_avAssetCache;
@property (strong, nonatomic) FCAVAssetDownloadManager *avAssetDownloadManager; // @synthesize avAssetDownloadManager=_avAssetDownloadManager;
@property (strong, nonatomic) id<FCAVAssetFactoryType> avAssetFactory; // @synthesize avAssetFactory=_avAssetFactory;
@property (strong, nonatomic) id<FCAVAssetKeyCacheType> avAssetKeyCache; // @synthesize avAssetKeyCache=_avAssetKeyCache;
@property (strong, nonatomic) id<FCAVAssetKeyManagerType> avAssetKeyManager; // @synthesize avAssetKeyManager=_avAssetKeyManager;
@property (strong, nonatomic) id<FCAVAssetKeyServiceType> avAssetKeyService; // @synthesize avAssetKeyService=_avAssetKeyService;
@property (readonly, nonatomic) id<FCAVAssetPrewarming> avAssetPrewarmer; // @synthesize avAssetPrewarmer=_avAssetPrewarmer;
@property (strong, nonatomic) id<FCAVAssetResourceLoaderType> avAssetResourceLoader; // @synthesize avAssetResourceLoader=_avAssetResourceLoader;
@property (readonly, weak, nonatomic) id<FCBackgroundTaskable> backgroundTaskable; // @synthesize backgroundTaskable=_backgroundTaskable;
@property (readonly, nonatomic) id<FCCoreConfigurationManager> configurationManager; // @synthesize configurationManager=_configurationManager;
@property (copy, nonatomic) NSString *contentDirectory; // @synthesize contentDirectory=_contentDirectory;
@property (readonly, copy, nonatomic) NSString *contentEnvironmentToken;
@property (readonly, copy, nonatomic) NSString *contentStoreFrontID;
@property (copy, nonatomic) FCContextConfiguration *contextConfiguration; // @synthesize contextConfiguration=_contextConfiguration;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly, nonatomic) FCFlintResourceManager *flintResourceManager; // @synthesize flintResourceManager=_flintResourceManager;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) FCContentContextInternal *internalContentContext; // @synthesize internalContentContext=_internalContentContext;
@property (readonly, nonatomic) FCNetworkBehaviorMonitor *networkBehaviorMonitor; // @synthesize networkBehaviorMonitor=_networkBehaviorMonitor;
@property (readonly, nonatomic) id<FCPPTContext> pptContext; // @synthesize pptContext=_pptContext;
@property (readonly) Class superclass;
@property (readonly, copy, nonatomic) NSString *supportedContentStoreFrontID;
@property (strong, nonatomic) id<FCNetworkReachabilityRequirement> supportedCountryNetworkReachabilityRequirement; // @synthesize supportedCountryNetworkReachabilityRequirement=_supportedCountryNetworkReachabilityRequirement;
@property (readonly, nonatomic) FCTagController *tagController; // @synthesize tagController=_tagController;

+ (void)initialize;
- (void).cxx_destruct;
- (void)_updateReachabilityGivenRequirements;
- (void)configurationManager:(id)arg1 configurationDidChange:(id)arg2;
- (void)dealloc;
- (void)enableFlushingWithFlushingThreshold:(unsigned long long)arg1;
- (void)enableFlushingWithFlushingThreshold:(unsigned long long)arg1 exceptForFlusher:(id)arg2;
- (id)initWithConfiguration:(id)arg1 configurationManager:(id)arg2 contentDatabase:(id)arg3 contentHostDirectory:(id)arg4 networkBehaviorMonitor:(id)arg5 setupCustomURLProtocols:(BOOL)arg6 desiredHeadlineFieldOptions:(unsigned long long)arg7 feedUsage:(long long)arg8 assetKeyManagerDelegate:(id)arg9 appActivityMonitor:(id)arg10 backgroundTaskable:(id)arg11 pptContext:(id)arg12;
- (id)initWithConfiguration:(id)arg1 configurationManager:(id)arg2 contentHostDirectory:(id)arg3 networkBehaviorMonitor:(id)arg4 desiredHeadlineFieldOptions:(unsigned long long)arg5 feedUsage:(long long)arg6 appActivityMonitor:(id)arg7 backgroundTaskable:(id)arg8 pptContext:(id)arg9;
- (id)initWithConfiguration:(id)arg1 configurationManager:(id)arg2 contentHostDirectory:(id)arg3 networkBehaviorMonitor:(id)arg4 desiredHeadlineFieldOptions:(unsigned long long)arg5 feedUsage:(long long)arg6 assetKeyManagerDelegate:(id)arg7 appActivityMonitor:(id)arg8 backgroundTaskable:(id)arg9 pptContext:(id)arg10;
- (id)interestTokenForContentManifest:(id)arg1;
- (id)magazinesConfigurationManager;
- (void)networkReachabilityRequirementDidBecomeDirty:(id)arg1;
- (id)news_core_ConfigurationManager;
- (void)ppt_overrideFeedEndpoint:(long long)arg1;
- (void)ppt_prewarmFeedDatabase;
- (id)recordSourceWithSchema:(id)arg1;
- (id)recordTreeSourceWithRecordSources:(id)arg1;

@end

