//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSArray, NSDictionary, NSString;

@interface FCCKZoneSchema : NSObject
{
    NSDictionary *_recordSchemasByClientType;
    NSDictionary *_recordSchemasByServerType;
    NSDictionary *_staticServerRecordNamesByClientName;
    NSDictionary *_staticClientRecordNamesByServerName;
    BOOL _isDefaultZone;
    BOOL _supportsRecordNameEncryption;
    BOOL _supportsRecordFieldEncryption;
    BOOL _shouldUseZoneWidePCS;
    BOOL _shouldUseSecureContainer;
    NSString *_clientZoneName;
    NSString *_serverZoneName;
    NSArray *_staticRecordNamesEligibleForMigration;
}

@property (readonly, copy, nonatomic) NSArray *allClientRecordTypes;
@property (readonly, copy, nonatomic) NSString *clientZoneName; // @synthesize clientZoneName=_clientZoneName;
@property (readonly, nonatomic) BOOL isDefaultZone; // @synthesize isDefaultZone=_isDefaultZone;
@property (readonly, copy, nonatomic) NSString *serverZoneName; // @synthesize serverZoneName=_serverZoneName;
@property (readonly, nonatomic) BOOL shouldUseSecureContainer; // @synthesize shouldUseSecureContainer=_shouldUseSecureContainer;
@property (readonly, nonatomic) BOOL shouldUseZoneWidePCS; // @synthesize shouldUseZoneWidePCS=_shouldUseZoneWidePCS;
@property (readonly, copy, nonatomic) NSArray *staticRecordNamesEligibleForMigration; // @synthesize staticRecordNamesEligibleForMigration=_staticRecordNamesEligibleForMigration;
@property (readonly, nonatomic) BOOL supportsRecordFieldEncryption; // @synthesize supportsRecordFieldEncryption=_supportsRecordFieldEncryption;
@property (readonly, nonatomic) BOOL supportsRecordNameEncryption; // @synthesize supportsRecordNameEncryption=_supportsRecordNameEncryption;

+ (id)defaultZoneWithRecords:(id)arg1 staticRecordNames:(id)arg2 staticRecordNameMigrationBlacklist:(id)arg3 shouldUseSecureContainer:(BOOL)arg4;
+ (id)zoneWithClientName:(id)arg1 serverName:(id)arg2 records:(id)arg3;
+ (id)zoneWithClientName:(id)arg1 serverName:(id)arg2 records:(id)arg3 staticRecordNames:(id)arg4 shouldEncryptRecordNames:(BOOL)arg5 shouldUseZoneWidePCS:(BOOL)arg6 shouldUseSecureContainer:(BOOL)arg7;
- (void).cxx_destruct;
- (id)clientRecordNameForServerRecordName:(id)arg1;
- (void)enumerateRecordSchemasWithBlock:(CDUnknownBlockType)arg1;
- (id)init;
- (id)initWithClientZoneName:(id)arg1 serverZoneName:(id)arg2 recordSchemas:(id)arg3 staticRecordNames:(id)arg4 staticRecordNameMigrationBlacklist:(id)arg5 shouldEncryptRecordNames:(BOOL)arg6 shouldUseZoneWidePCS:(BOOL)arg7 shouldUseSecureContainer:(BOOL)arg8;
- (BOOL)isKnownClientRecordName:(id)arg1;
- (BOOL)isKnownServerRecordName:(id)arg1;
- (id)schemaForRecordWithClientType:(id)arg1;
- (id)schemaForRecordWithServerType:(id)arg1;
- (id)serverRecordNameForClientRecordName:(id)arg1;
- (BOOL)shouldDecryptServerRecordName:(id)arg1;
- (BOOL)shouldEncryptClientRecordName:(id)arg1;

@end

