//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <Foundation/NSOperation.h>

#import <NewsCore/FCOperationCanceling-Protocol.h>
#import <NewsCore/FCOperationIdentifying-Protocol.h>
#import <NewsCore/FCOperationPrioritizing-Protocol.h>

@class FCOnce, NFUnfairLock, NSDictionary, NSMutableArray, NSObject, NSString;
@protocol OS_dispatch_group;

@interface FCOperation : NSOperation <FCOperationCanceling, FCOperationIdentifying, FCOperationPrioritizing>
{
    BOOL _executing;
    BOOL _finished;
    BOOL _isBackgroundDownloadOperation;
    BOOL _childOperationsCancelled;
    long long _relativePriority;
    unsigned long long _retryCount;
    double _timeoutDuration;
    NSString *_purpose;
    NSString *_operationID;
    double _operationStartTime;
    double _operationEndTime;
    CDUnknownBlockType _timedOutTest;
    NSMutableArray *_childOperations;
    NFUnfairLock *_childOperationsLock;
    FCOnce *_startOnce;
    NSObject<OS_dispatch_group> *_finishedGroup;
}

@property (strong, nonatomic) NSMutableArray *childOperations; // @synthesize childOperations=_childOperations;
@property (nonatomic) BOOL childOperationsCancelled; // @synthesize childOperationsCancelled=_childOperationsCancelled;
@property (strong, nonatomic) NFUnfairLock *childOperationsLock; // @synthesize childOperationsLock=_childOperationsLock;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly, copy, nonatomic) NSDictionary *errorUserInfo;
@property (strong, nonatomic) NSObject<OS_dispatch_group> *finishedGroup; // @synthesize finishedGroup=_finishedGroup;
@property (readonly, nonatomic) BOOL hasOperationStarted;
@property (readonly) unsigned long long hash;
@property (nonatomic) BOOL isBackgroundDownloadOperation; // @synthesize isBackgroundDownloadOperation=_isBackgroundDownloadOperation;
@property (nonatomic) double operationEndTime; // @synthesize operationEndTime=_operationEndTime;
@property (readonly, copy, nonatomic) NSString *operationID; // @synthesize operationID=_operationID;
@property (nonatomic) double operationStartTime; // @synthesize operationStartTime=_operationStartTime;
@property (readonly, nonatomic) FCOperation *proxyOperation;
@property (copy, nonatomic) NSString *purpose; // @synthesize purpose=_purpose;
@property (nonatomic) long long relativePriority; // @synthesize relativePriority=_relativePriority;
@property (nonatomic) unsigned long long retryCount; // @synthesize retryCount=_retryCount;
@property (strong, nonatomic) FCOnce *startOnce; // @synthesize startOnce=_startOnce;
@property (readonly) Class superclass;
@property (copy, nonatomic) CDUnknownBlockType timedOutTest; // @synthesize timedOutTest=_timedOutTest;
@property (nonatomic) double timeoutDuration; // @synthesize timeoutDuration=_timeoutDuration;

- (void).cxx_destruct;
- (void)_associateChildOperation:(id)arg1;
- (void)_finishOperationWithError:(id)arg1;
- (void)_finishedPerformingOperationWithError:(id)arg1;
- (void)_handleRetryFromError:(id)arg1 signal:(id)arg2;
- (void)_handleThrottlingFromError:(id)arg1 delay:(double)arg2;
- (BOOL)_shouldThrottleOperationWithRetryAfter:(double *)arg1;
- (BOOL)_startIfNeeded;
- (id)_userDefaultsKeyForThrottleEndDate;
- (void)addCompletionHandler:(CDUnknownBlockType)arg1;
- (void)associateChildOperation:(id)arg1;
- (void)associateChildOperations:(id)arg1;
- (BOOL)canRetryWithError:(id)arg1 retryAfter:(id *)arg2;
- (void)cancel;
- (void)cancelChildOperations;
- (void)dealloc;
- (void)finishFromEarlyCancellation;
- (void)finishedPerformingOperationWithError:(id)arg1;
- (id)init;
- (BOOL)isAsynchronous;
- (BOOL)isExecuting;
- (BOOL)isFinished;
- (id)longOperationDescription;
- (unsigned long long)maxRetries;
- (void)operationDidFinishWithError:(id)arg1;
- (void)operationWillFinishWithError:(id)arg1;
- (void)performOperation;
- (void)prepareOperation;
- (unsigned long long)propertiesInheritedByChildOperations;
- (void)resetForRetry;
- (void)setQualityOfService:(long long)arg1;
- (id)shortOperationDescription;
- (BOOL)shouldStartThrottlingWithError:(id)arg1 retryAfter:(double *)arg2;
- (void)start;
- (void)startIfNeeded;
- (id)throttleGroup;
- (BOOL)validateOperation;
- (BOOL)waitUntilFinishedWithTimeout:(double)arg1;

@end

