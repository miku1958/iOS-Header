//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <NewsCore/FCAssetKeyManagerDelegate-Protocol.h>
#import <NewsCore/FCBundleSubscriptionChangeObserver-Protocol.h>
#import <NewsCore/FCCKDatabaseEncryptionDelegate-Protocol.h>
#import <NewsCore/FCCacheFlushing-Protocol.h>
#import <NewsCore/FCContentContext-Protocol.h>
#import <NewsCore/FCPrivateDataContext-Protocol.h>
#import <NewsCore/FCTestingContext-Protocol.h>

@class FCAccessChecker, FCArticleController, FCAssetManager, FCAudioPlaylist, FCClientEndpointConnection, FCCommandQueue, FCFeedManager, FCFlintResourceManager, FCIssueReadingHistory, FCLocalAreasManager, FCNetworkBehaviorMonitor, FCNewsletterEndpointConnection, FCNotificationController, FCNotificationsEndpointConnection, FCPersonalizationData, FCPrivateChannelMembershipController, FCPurchaseController, FCReadingHistory, FCReadingList, FCSubscriptionController, FCSubscriptionList, FCTagController, FCTagSettings, FCTranslationManager, FCUserInfo, FCUserVectorManager, NSString, NSURL;
@protocol FCAVAssetPrewarming, FCAppActivityMonitor, FCBackgroundTaskable, FCBundleSubscriptionManagerType, FCContentContext, FCContentContextInternal, FCCoreConfigurationManager, FCCurrentIssuesChecker, FCFeedPersonalizing, FCForYouBridgedConfigurationParser, FCForYouMagazineFeedManaging, FCForYouPluginGroupManaging, FCLocalRegionManager, FCNewsAppConfigurationManager, FCNewsletterManager, FCOfflineArticleManagerType, FCPPTContext, FCPaidAccessCheckerType, FCPrivateDataContext, FCPrivateDataContextInternal, FCPurchaseManagerType, FCPurchaseProviderType, FCPushNotificationHandling;

@interface FCCloudContext : NSObject <FCTestingContext, FCCKDatabaseEncryptionDelegate, FCAssetKeyManagerDelegate, FCBundleSubscriptionChangeObserver, FCContentContext, FCPrivateDataContext, FCCacheFlushing>
{
    BOOL _deviceIsiPad;
    FCSubscriptionController *_subscriptionController;
    FCFeedManager *_feedManager;
    FCNetworkBehaviorMonitor *_networkBehaviorMonitor;
    id<FCAppActivityMonitor> _appActivityMonitor;
    FCClientEndpointConnection *_endpointConnection;
    FCCommandQueue *_endpointCommandQueue;
    id<FCNewsletterManager> _newsletterManager;
    FCNewsletterEndpointConnection *_newsletterEndpointConnection;
    FCCommandQueue *_newsletterEndpointCommandQueue;
    FCNotificationsEndpointConnection *_notificationsEndpointConnection;
    FCCommandQueue *_notificationsEndpointCommandQueue;
    FCNotificationController *_notificationController;
    id<FCOfflineArticleManagerType> _offlineArticleManager;
    FCPurchaseController *_purchaseController;
    id<FCPurchaseProviderType> _purchaseProvider;
    id<FCPurchaseManagerType> _purchaseManager;
    id<FCBundleSubscriptionManagerType> _bundleSubscriptionManager;
    FCTranslationManager *_translationManager;
    FCLocalAreasManager *_localAreasManager;
    FCUserVectorManager *_userVectorManager;
    id<FCCurrentIssuesChecker> _currentIssuesChecker;
    id<FCPaidAccessCheckerType> _paidAccessChecker;
    FCAccessChecker *_issueAccessChecker;
    FCAccessChecker *_articleAccessChecker;
    id<FCLocalRegionManager> _localRegionProvider;
    id<FCBackgroundTaskable> _backgroundTaskable;
    id<FCForYouMagazineFeedManaging> _forYouMagazineFeedManager;
    CDUnknownBlockType _forYouPluginGroupManagingProvider;
    id<FCForYouPluginGroupManaging> _forYouPluginGroupManager;
    id<FCForYouBridgedConfigurationParser> _forYouBridgedConfigurationParser;
    CDUnknownBlockType _offlineArticleManagerProvider;
    id<FCPPTContext> _pptContext;
    id<FCContentContext> _contentContext;
    id<FCPrivateDataContext> _privateDataContext;
    long long _options;
}

@property (strong, nonatomic) id<FCAppActivityMonitor> appActivityMonitor; // @synthesize appActivityMonitor=_appActivityMonitor;
@property (readonly, nonatomic) id<FCNewsAppConfigurationManager> appConfigurationManager;
@property (strong, nonatomic) FCAccessChecker *articleAccessChecker; // @synthesize articleAccessChecker=_articleAccessChecker;
@property (readonly, nonatomic) FCArticleController *articleController;
@property (readonly, nonatomic) NSURL *assetCacheDirectoryURL;
@property (readonly, nonatomic) FCAssetManager *assetManager;
@property (readonly, nonatomic) FCAudioPlaylist *audioPlaylist;
@property (readonly, nonatomic) id<FCAVAssetPrewarming> avAssetPrewarmer;
@property (weak, nonatomic) id<FCBackgroundTaskable> backgroundTaskable; // @synthesize backgroundTaskable=_backgroundTaskable;
@property (readonly, nonatomic) id<FCBundleSubscriptionManagerType> bundleSubscriptionManager; // @synthesize bundleSubscriptionManager=_bundleSubscriptionManager;
@property (readonly, nonatomic) id<FCCoreConfigurationManager> configurationManager;
@property (strong, nonatomic) id<FCContentContext> contentContext; // @synthesize contentContext=_contentContext;
@property (readonly, copy, nonatomic) NSString *contentDirectory;
@property (readonly, copy, nonatomic) NSString *contentEnvironmentToken;
@property (readonly, copy, nonatomic) NSString *contentStoreFrontID;
@property (strong, nonatomic) id<FCCurrentIssuesChecker> currentIssuesChecker; // @synthesize currentIssuesChecker=_currentIssuesChecker;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly, nonatomic) BOOL deviceIsiPad; // @synthesize deviceIsiPad=_deviceIsiPad;
@property (readonly, nonatomic) FCCommandQueue *endpointCommandQueue; // @synthesize endpointCommandQueue=_endpointCommandQueue;
@property (readonly, nonatomic) FCClientEndpointConnection *endpointConnection; // @synthesize endpointConnection=_endpointConnection;
@property (readonly, nonatomic) FCFeedManager *feedManager; // @synthesize feedManager=_feedManager;
@property (readonly, nonatomic) id<FCFeedPersonalizing> feedPersonalizer;
@property (readonly, nonatomic) FCFlintResourceManager *flintResourceManager;
@property (strong, nonatomic) id<FCForYouBridgedConfigurationParser> forYouBridgedConfigurationParser; // @synthesize forYouBridgedConfigurationParser=_forYouBridgedConfigurationParser;
@property (weak, nonatomic) id<FCForYouMagazineFeedManaging> forYouMagazineFeedManager; // @synthesize forYouMagazineFeedManager=_forYouMagazineFeedManager;
@property (weak, nonatomic) id<FCForYouPluginGroupManaging> forYouPluginGroupManager; // @synthesize forYouPluginGroupManager=_forYouPluginGroupManager;
@property (copy, nonatomic) CDUnknownBlockType forYouPluginGroupManagingProvider; // @synthesize forYouPluginGroupManagingProvider=_forYouPluginGroupManagingProvider;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) id<FCContentContextInternal> internalContentContext;
@property (readonly, nonatomic) id<FCPrivateDataContextInternal> internalPrivateDataContext;
@property (readonly, nonatomic) BOOL isPrivateDataEncryptionEnabled;
@property (readonly, nonatomic) BOOL isPrivateDatabaseOnline;
@property (readonly, nonatomic) BOOL isPrivateDatabaseStartingUp;
@property (readonly, nonatomic) BOOL isPrivateDatabaseTemporarilySuspended;
@property (strong, nonatomic) FCAccessChecker *issueAccessChecker; // @synthesize issueAccessChecker=_issueAccessChecker;
@property (readonly, nonatomic) FCIssueReadingHistory *issueReadingHistory;
@property (strong, nonatomic) FCLocalAreasManager *localAreasManager; // @synthesize localAreasManager=_localAreasManager;
@property (strong, nonatomic) id<FCLocalRegionManager> localRegionProvider; // @synthesize localRegionProvider=_localRegionProvider;
@property (readonly, nonatomic) FCNetworkBehaviorMonitor *networkBehaviorMonitor; // @synthesize networkBehaviorMonitor=_networkBehaviorMonitor;
@property (readonly, nonatomic) FCCommandQueue *newsletterEndpointCommandQueue; // @synthesize newsletterEndpointCommandQueue=_newsletterEndpointCommandQueue;
@property (readonly, nonatomic) FCNewsletterEndpointConnection *newsletterEndpointConnection; // @synthesize newsletterEndpointConnection=_newsletterEndpointConnection;
@property (readonly, nonatomic) id<FCNewsletterManager> newsletterManager; // @synthesize newsletterManager=_newsletterManager;
@property (readonly, nonatomic) FCNotificationController *notificationController; // @synthesize notificationController=_notificationController;
@property (readonly, nonatomic) FCCommandQueue *notificationsEndpointCommandQueue; // @synthesize notificationsEndpointCommandQueue=_notificationsEndpointCommandQueue;
@property (readonly, nonatomic) FCNotificationsEndpointConnection *notificationsEndpointConnection; // @synthesize notificationsEndpointConnection=_notificationsEndpointConnection;
@property (readonly, nonatomic) id<FCOfflineArticleManagerType> offlineArticleManager; // @synthesize offlineArticleManager=_offlineArticleManager;
@property (copy, nonatomic) CDUnknownBlockType offlineArticleManagerProvider; // @synthesize offlineArticleManagerProvider=_offlineArticleManagerProvider;
@property (nonatomic) long long options; // @synthesize options=_options;
@property (strong, nonatomic) id<FCPaidAccessCheckerType> paidAccessChecker; // @synthesize paidAccessChecker=_paidAccessChecker;
@property (readonly, nonatomic) FCPersonalizationData *personalizationData;
@property (readonly, nonatomic) id<FCPPTContext> pptContext; // @synthesize pptContext=_pptContext;
@property (readonly, nonatomic) FCPrivateChannelMembershipController *privateChannelMembershipController;
@property (strong, nonatomic) id<FCPrivateDataContext> privateDataContext; // @synthesize privateDataContext=_privateDataContext;
@property (readonly, copy, nonatomic) NSString *privateDataDirectory;
@property (readonly, nonatomic, getter=isPrivateDataSyncingEnabled) BOOL privateDataSyncingEnabled;
@property (readonly, nonatomic) id<FCPushNotificationHandling> privatePushNotificationHandler;
@property (readonly, nonatomic) FCPurchaseController *purchaseController; // @synthesize purchaseController=_purchaseController;
@property (readonly, nonatomic) id<FCPurchaseManagerType> purchaseManager; // @synthesize purchaseManager=_purchaseManager;
@property (readonly, nonatomic) id<FCPurchaseProviderType> purchaseProvider; // @synthesize purchaseProvider=_purchaseProvider;
@property (readonly, nonatomic) FCReadingHistory *readingHistory;
@property (readonly, nonatomic) FCReadingList *readingList;
@property (readonly, nonatomic) FCSubscriptionController *subscriptionController; // @synthesize subscriptionController=_subscriptionController;
@property (readonly, nonatomic) FCSubscriptionList *subscriptionList;
@property (readonly) Class superclass;
@property (readonly, copy, nonatomic) NSString *supportedContentStoreFrontID;
@property (readonly, nonatomic) FCTagController *tagController;
@property (readonly, nonatomic) FCTagSettings *tagSettings;
@property (strong, nonatomic) FCTranslationManager *translationManager; // @synthesize translationManager=_translationManager;
@property (readonly, nonatomic) FCUserInfo *userInfo;
@property (strong, nonatomic) FCUserVectorManager *userVectorManager; // @synthesize userVectorManager=_userVectorManager;

+ (void)initialize;
+ (id)testingContext;
+ (id)testingContextWithDesiredHeadlineFieldOptions:(unsigned long long)arg1;
- (void).cxx_destruct;
- (void)_purchaseControllerDidAddALaCarteSubscription;
- (void)bundleSubscriptionDidSubscribe:(id)arg1;
- (void)enableFlushingWithFlushingThreshold:(unsigned long long)arg1;
- (void)enableFlushingWithFlushingThreshold:(unsigned long long)arg1 exceptForFlusher:(id)arg2;
- (void)fetchOriginalDataShouldBeDeletedAfterMigrationForDatabase:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchPrivateDataEncryptionIsAllowedForDatabase:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchPrivateDataEncryptionIsRequiredForDatabase:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchPrivateDataEncryptionMigrationIsDesiredForDatabase:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchShouldSecureSubscriptionsForDatabase:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)init;
- (id)initForTesting;
- (id)initForTestingWithDesiredHeadlineFieldOptions:(unsigned long long)arg1;
- (id)initWithConfiguration:(id)arg1 configurationManager:(id)arg2 contentHostDirectory:(id)arg3 privateDataHostDirectory:(id)arg4 privateDataActionProvider:(id)arg5 networkBehaviorMonitor:(id)arg6 appActivityMonitor:(id)arg7 desiredHeadlineFieldOptions:(unsigned long long)arg8 feedUsage:(long long)arg9 deviceIsiPad:(BOOL)arg10 backgroundTaskable:(id)arg11 privateDataSyncAvailability:(id)arg12 pptContext:(id)arg13 options:(long long)arg14;
- (id)initWithConfiguration:(id)arg1 configurationManager:(id)arg2 contentHostDirectory:(id)arg3 privateDataHostDirectory:(id)arg4 privateDataActionProvider:(id)arg5 networkBehaviorMonitor:(id)arg6 appActivityMonitor:(id)arg7 desiredHeadlineFieldOptions:(unsigned long long)arg8 feedUsage:(long long)arg9 lockStoreFrontIfNeeded:(BOOL)arg10 deviceIsiPad:(BOOL)arg11 backgroundTaskable:(id)arg12 privateDataSyncAvailability:(id)arg13 pptContext:(id)arg14;
- (id)initWithContentContext:(id)arg1 privateDataContext:(id)arg2 networkBehaviorMonitor:(id)arg3 options:(long long)arg4;
- (id)insertTestArticle;
- (id)insertTestArticlesWithCount:(unsigned long long)arg1;
- (id)interestTokenForContentManifest:(id)arg1;
- (id)magazinesConfigurationManager;
- (id)news_core_ConfigurationManager;
- (id)notificationsController;
- (void)ppt_overrideFeedEndpoint:(long long)arg1;
- (void)ppt_prewarmFeedDatabase;
- (id)privateStoreWithName:(id)arg1 version:(unsigned long long)arg2 options:(unsigned long long)arg3;
- (id)recordSourceWithSchema:(id)arg1;
- (id)recordTreeSourceWithRecordSources:(id)arg1;
- (BOOL)shouldAssetKeyManagerSimulateUnauthorizedAssetKeys:(id)arg1;

@end

