//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <MusicLibrary/ML3AccountInformationProviding-Protocol.h>
#import <MusicLibrary/ML3DatabaseConnectionDelegate-Protocol.h>
#import <MusicLibrary/ML3DatabaseConnectionPoolDelegate-Protocol.h>
#import <MusicLibrary/NSSecureCoding-Protocol.h>

@class ML3AccountCacheDatabase, ML3Container, ML3DatabaseConnectionPool, ML3DatabaseMetadata, ML3LibraryNotificationManager, ML3MusicLibraryResourcesManager, NSArray, NSDate, NSLock, NSMutableDictionary, NSNumber, NSString;
@protocol ML3MusicLibraryDelegate, OS_dispatch_queue;

@interface ML3MusicLibrary : NSObject <ML3DatabaseConnectionDelegate, ML3DatabaseConnectionPoolDelegate, NSSecureCoding, ML3AccountInformationProviding>
{
    NSString *_libraryUID;
    NSLock *_libraryUIDLock;
    NSString *_syncLibraryUID;
    ML3AccountCacheDatabase *_accountCacheDatabase;
    NSMutableDictionary *_optimizedLibraryEntityFilterPredicatesByEntityClass;
    NSMutableDictionary *_optimizedLibraryContainerFilterPredicatesByContainerClass;
    NSMutableDictionary *_optimizedLibraryPublicEntityFilterPredicatesByEntityClass;
    NSMutableDictionary *_optimizedLibraryPublicContainerFilterPredicatesByContainerClass;
    BOOL _isHomeSharingLibraryLoaded;
    BOOL _isHomeSharingLibrary;
    BOOL _usingSharedLibraryPath;
    BOOL _readOnly;
    ML3DatabaseConnectionPool *_connectionPool;
    NSString *_databasePath;
    struct iPhoneSortKeyBuilder *_sortKeyBuilder;
    ML3MusicLibraryResourcesManager *_resourcesManager;
    ML3LibraryNotificationManager *_notificationManager;
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSString *_accountDSID;
    id<ML3MusicLibraryDelegate> _delegate;
    NSArray *_libraryEntityFilterPredicates;
    NSArray *_libraryContainerFilterPredicates;
    NSArray *_libraryPublicEntityFilterPredicates;
    NSArray *_libraryPublicContainerFilterPredicates;
}

@property (readonly, copy, nonatomic) NSString *accountDSID; // @synthesize accountDSID=_accountDSID;
@property (readonly, copy, nonatomic) NSString *artworkDirectory;
@property (readonly, nonatomic) long long autoFilledTracksTotalSize;
@property (readonly, nonatomic) ML3DatabaseConnectionPool *connectionPool; // @synthesize connectionPool=_connectionPool;
@property (readonly, nonatomic) long long currentContentRevision;
@property (readonly, nonatomic) ML3Container *currentDevicePlaybackHistoryPlaylist;
@property (readonly, nonatomic) ML3Container *currentDevicePurchasesPlaylist;
@property (readonly, nonatomic) long long currentRevision;
@property (readonly, nonatomic) ML3DatabaseMetadata *databaseInfo;
@property (readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<ML3MusicLibraryDelegate> delegate; // @synthesize delegate=_delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL downloadOnAddToLibrary;
@property (readonly, nonatomic) BOOL hasAddedToLibraryAppleMusicContent;
@property (readonly, nonatomic) BOOL hasUserPlaylists;
@property (readonly, nonatomic) BOOL hasUserPlaylistsContainingAppleMusicContent;
@property (readonly) unsigned long long hash;
@property (nonatomic) BOOL isHomeSharingLibrary;
@property (copy, nonatomic) NSNumber *jaliscoAccountID;
@property (nonatomic) BOOL jaliscoHasCloudGeniusData;
@property (nonatomic) BOOL jaliscoIsMusicGeniusUserEnabled;
@property (readonly, nonatomic) NSArray *jaliscoLastExcludedMediaKinds;
@property (copy, nonatomic) NSDate *jaliscoLastGeniusUpdateDate;
@property (copy, nonatomic) NSDate *jaliscoLastLibraryUpdateTime;
@property (copy, nonatomic) NSString *jaliscoLastSupportedMediaKinds;
@property (nonatomic) BOOL jaliscoNeedsUpdateForTokens;
@property (nonatomic) long long jaliscoOnDiskDatabaseRevision;
@property (strong, nonatomic) NSArray *libraryContainerFilterPredicates; // @synthesize libraryContainerFilterPredicates=_libraryContainerFilterPredicates;
@property (readonly, nonatomic, getter=isLibraryEmpty) BOOL libraryEmpty;
@property (strong, nonatomic) NSArray *libraryEntityFilterPredicates; // @synthesize libraryEntityFilterPredicates=_libraryEntityFilterPredicates;
@property (strong, nonatomic) NSArray *libraryPublicContainerFilterPredicates; // @synthesize libraryPublicContainerFilterPredicates=_libraryPublicContainerFilterPredicates;
@property (strong, nonatomic) NSArray *libraryPublicEntityFilterPredicates; // @synthesize libraryPublicEntityFilterPredicates=_libraryPublicEntityFilterPredicates;
@property (readonly, nonatomic) NSString *libraryUID;
@property (readonly, nonatomic) NSArray *localizedSectionIndexTitles;
@property (readonly, nonatomic) BOOL mediaRestrictionEnabled;
@property (strong, nonatomic) ML3LibraryNotificationManager *notificationManager; // @synthesize notificationManager=_notificationManager;
@property (readonly, copy, nonatomic) NSString *originalArtworkDirectory;
@property (readonly, nonatomic) NSArray *preferredAudioTracks;
@property (readonly, nonatomic) NSArray *preferredSubtitleTracks;
@property (nonatomic) long long preferredVideoQuality;
@property (nonatomic, getter=isReadOnly) BOOL readOnly; // @synthesize readOnly=_readOnly;
@property (readonly, nonatomic) ML3MusicLibraryResourcesManager *resourcesManager; // @synthesize resourcesManager=_resourcesManager;
@property (readonly, copy, nonatomic) NSString *rootArtworkCacheDirectory;
@property (copy, nonatomic) NSNumber *sagaAccountID;
@property (nonatomic) long long sagaCloudAddToPlaylistBehavior;
@property (copy, nonatomic) NSString *sagaCloudLibraryCUID;
@property (copy, nonatomic) NSString *sagaCloudLibraryTroveID;
@property (nonatomic) long long sagaDatabaseUserVersion;
@property (copy, nonatomic) NSDate *sagaLastGeniusUpdateDate;
@property (copy, nonatomic) NSDate *sagaLastItemPlayDataUploadDate;
@property (copy, nonatomic) NSNumber *sagaLastKnownActiveLockerAccountDSID;
@property (copy, nonatomic) NSDate *sagaLastLibraryUpdateTime;
@property (copy, nonatomic) NSDate *sagaLastPlaylistPlayDataUploadDate;
@property (copy, nonatomic) NSDate *sagaLastSubscribedContainersUpdateTime;
@property (nonatomic) BOOL sagaNeedsFullUpdateAfterNextUpdate;
@property (nonatomic) long long sagaOnDiskDatabaseRevision;
@property (nonatomic) BOOL sagaPrefersToMergeWithCloudLibrary;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *serialQueue; // @synthesize serialQueue=_serialQueue;
@property (readonly, nonatomic) struct iPhoneSortKeyBuilder *sortKeyBuilder; // @synthesize sortKeyBuilder=_sortKeyBuilder;
@property (copy, nonatomic) NSString *storefrontIdentifier;
@property (readonly) Class superclass;
@property (readonly, nonatomic) BOOL supportsUbiquitousPlaybackPositions;
@property (nonatomic) long long syncGenerationID;
@property (nonatomic) NSString *syncLibraryID;
@property (nonatomic, getter=isUsingSharedLibraryPath) BOOL usingSharedLibraryPath; // @synthesize usingSharedLibraryPath=_usingSharedLibraryPath;

+ (id)allLibraries;
+ (id)allLibraryContainerPaths;
+ (id)allPragmaSQL;
+ (id)allSchemaSQL;
+ (id)allTables;
+ (id)allTriggersSQL;
+ (id)artworkRelativePathFromToken:(id)arg1;
+ (long long)artworkSourceTypeForTrackSource:(int)arg1;
+ (id)artworkTokenForArtistHeroURL:(id)arg1;
+ (id)artworkTokenForChapterWithItemPID:(long long)arg1 retrievalTime:(double)arg2;
+ (id)assistantSyncDataChangedNotificationName;
+ (id)autoupdatingSharedLibrary;
+ (id)autoupdatingSharedLibraryPath;
+ (id)databasePathForUnitTest:(id)arg1 withBasePath:(id)arg2;
+ (long long)devicePreferredImageFormat;
+ (BOOL)deviceSupportsASTC;
+ (BOOL)deviceSupportsMultipleLibraries;
+ (void)disableAutomaticDatabaseValidation;
+ (void)disableSharedLibrary;
+ (id)distributedToLocalNotificationMapping;
+ (BOOL)dropIndexesUsingConnection:(id)arg1 tableNames:(const char *)arg2;
+ (void)enableAutomaticDatabaseValidation;
+ (void)enumerateSortMapTablesUsingBlock:(CDUnknownBlockType)arg1;
+ (id)globalSerialQueue;
+ (id)indexSchemaSQL;
+ (id)itemIndexSchemaSQL;
+ (id)itemNewSchemaSQL;
+ (id)itemSchemaSQL;
+ (id)jaliscoGetSortedMediaKinds:(id)arg1;
+ (id)libraryContainerPath;
+ (id)libraryContainerPathByAppendingPathComponent:(id)arg1;
+ (id)libraryContainerRelativePath:(id)arg1;
+ (id)libraryPathForContainerPath:(id)arg1;
+ (id)localizedSectionHeaderForSectionHeader:(id)arg1;
+ (id)localizedSectionIndexTitleForSectionHeader:(id)arg1;
+ (id)mediaFolderPath;
+ (id)mediaFolderPathByAppendingPathComponent:(id)arg1;
+ (id)musicLibraryForUserAccount:(id)arg1;
+ (id)musicLibraryPerUserDSID;
+ (BOOL)orderingLanguageMatchesSystemUsingConnection:(id)arg1;
+ (id)pathForBaseLocationPath:(long long)arg1;
+ (id)pathForResourceFileOrFolder:(int)arg1;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(BOOL)arg3 createParentFolderIfNecessary:(BOOL)arg4;
+ (id)registeredLibraries;
+ (void)removeOrphanedTracks;
+ (id)sectionIndexTitleForSectionHeader:(id)arg1;
+ (id)sectionIndexTitles;
+ (void)setAutoupdatingSharedLibraryPath:(id)arg1;
+ (void)setSharedLibraryDatabasePath:(id)arg1;
+ (id)sharedLibrary;
+ (id)sharedLibraryDatabasePath;
+ (id)sortMapNewSchemaSQL;
+ (id)sortMapSchemaSQL;
+ (id)storeLinkSchemaSQL;
+ (BOOL)supportsSecureCoding;
+ (id)unitTestableLibraryForTest:(id)arg1 basePath:(id)arg2 setupSQLFilenames:(id)arg3;
+ (BOOL)updateTrackIntegrityOnConnection:(id)arg1;
+ (BOOL)userVersionMatchesSystemUsingConnection:(id)arg1;
+ (int)userVersionUsingConnection:(id)arg1;
+ (id)widthLimitedSetValuesQueue;
- (void).cxx_destruct;
- (id)_allArtworkVariantDirectories;
- (id)_allKeepLocalPlaylistTracks;
- (long long)_artworkTotalSize;
- (void)_autogenerateArtworkForRelativePath:(id)arg1 artworkType:(long long)arg2 mediaType:(unsigned int)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (BOOL)_canConfigureMediaLibraryDatabaseConnection:(id)arg1;
- (long long)_clearAllCloudAssets;
- (BOOL)_clearAllRowsFromTables:(id)arg1;
- (long long)_clearDatabaseFileFreeSpace;
- (long long)_clearOrphanedAssetsOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;
- (long long)_clearPurgeableArtworkOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;
- (long long)_clearPurgeableTracksOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeAutoFilledTracks:(BOOL)arg3;
- (long long)_clearPurgeableTracksOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeCloudAssets:(BOOL)arg3 includeAutoFilledTracks:(BOOL)arg4;
- (void)_closeAndLockCurrentDatabaseConnections;
- (long long)_cloudAssetsTotalSize;
- (BOOL)_coalesceMismatchedCollectionClass:(Class)arg1 usingConnection:(id)arg2;
- (void)_completeAccountChangeWithPath:(id)arg1;
- (void)_configureMediaLibraryDatabaseConnection:(id)arg1;
- (void)_convertOriginalArtworkToDevicePreferredFormatFromSourceURL:(id)arg1 toDestinationURL:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (long long)_databaseFileFreeSpace;
- (void)_deleteAllArtworkVariantsAtRelativePaths:(id)arg1;
- (BOOL)_determineAndUpdateBestArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 preserveExistingAvailableToken:(BOOL)arg5 usingConnection:(id)arg6;
- (void)_effectiveSettingsDidChangeNotification:(id)arg1;
- (void)_enumeratePurgeableAlbumTracksForUrgency:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)_enumeratePurgeablePodcastEpisodesForUrgency:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)_enumeratePurgeableStreamedTracksForUrgency:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)_enumeratePurgeableTracksForUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(BOOL)arg2 includeCloudAssets:(BOOL)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (BOOL)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 relativePath:(id)arg4;
- (BOOL)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 relativePath:(id)arg4 usingConnection:(id)arg5;
- (void)_libraryPathDidChangeNotification:(id)arg1;
- (void)_loggingSettingsDidChangeNotification:(id)arg1;
- (unsigned long long)_managedClearPurgeableTracksOfAmount:(unsigned long long)arg1 urgency:(unsigned long long)arg2;
- (unsigned long long)_managedPurgeableTracksTotalSizeWithUrgency:(unsigned long long)arg1;
- (id)_newGeniusDBConnectionAtPath:(id)arg1;
- (id)_nonPurgeableAlbumsQuerySQLWithUrgency:(unsigned long long)arg1;
- (id)_notInKeepLocalCollectionPredicate;
- (void)_onQueue_updateDatabaseConnectionsProfilingLevel;
- (void)_postClientNotificationWithDistributedName:(id)arg1 localName:(id)arg2;
- (BOOL)_prepareForAccountChange:(id *)arg1;
- (id)_purgeableAlbumsQuerySQLWithUrgency:(unsigned long long)arg1;
- (long long)_purgeableArtworkTotalSizeWithUrgency:(unsigned long long)arg1;
- (id)_purgeableItemsPredicateSQLWithUrgency:(unsigned long long)arg1;
- (id)_purgeableTrackPredicateWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(BOOL)arg2 includeCloudAssets:(BOOL)arg3;
- (long long)_purgeableTracksTotalSizeWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(BOOL)arg2;
- (BOOL)_removeInvalidAvailableArtworkTokensUsingConnection:(id)arg1;
- (BOOL)_removeOrphanedArtworkAssetsUsingConnection:(id)arg1;
- (BOOL)_removeOrphanedArtworkMetadataUsingConnection:(id)arg1;
- (BOOL)_removeOrphanedArtworkTokensUsingConnection:(id)arg1;
- (void)_setupNotificationManager;
- (BOOL)_shouldProcessAccountChanges;
- (BOOL)_shouldPurgeKeepLocalTracksForUrgency:(unsigned long long)arg1;
- (id)_systemUnicodeVersionData;
- (void)_tearDownNotificationManager;
- (void)_teardownMediaLibraryDatabaseConnection:(id)arg1;
- (unsigned long long)_totalSizeForAllNonCacheTracks;
- (BOOL)_updateBestArtworkTokensForArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 preserveExistingAvailableToken:(BOOL)arg4 usingConnection:(id)arg5;
- (BOOL)_validateDatabaseUsingConnection:(id)arg1 error:(id *)arg2;
- (void)accessSortKeyBuilder:(CDUnknownBlockType)arg1;
- (id)accountCacheDatabase;
- (id)albumArtistForEffectiveAlbumArtistName:(id)arg1;
- (id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(BOOL)arg5;
- (id)artistForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)artistGroupingKeyForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)artworkCacheDirectoryForEffect:(id)arg1;
- (id)artworkCacheDirectoryForSize:(struct CGSize)arg1;
- (BOOL)autoFilledTracksArePurgeable;
- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned long long)arg1;
- (void)autogenerateSupportedSizesForAllOriginalArtworkWithConnection:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (BOOL)automaticDatabaseValidationDisabled;
- (void)checkInDatabaseConnection:(id)arg1;
- (id)checkoutReaderConnection;
- (id)checkoutWriterConnection;
- (BOOL)cleanupArtworkWithOptions:(unsigned long long)arg1;
- (BOOL)cleanupArtworkWithOptions:(unsigned long long)arg1 usingConnection:(id)arg2;
- (BOOL)clearAllCloudKVSData;
- (BOOL)clearAllGeniusData;
- (long long)clearAllRemovedTracks;
- (void)clearJaliscoAccountID;
- (void)clearJaliscoLastExcludedMediaKinds;
- (void)clearJaliscoLastGeniusUpdateDate;
- (long long)clearPurgeableStorageAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;
- (long long)clearPurgeableStorageAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeAutoFilledTracks:(BOOL)arg3;
- (void)clearSagaCloudAccountID;
- (void)clearSagaCloudAddToPlaylistBehavior;
- (void)clearSagaCloudLibraryCUID;
- (void)clearSagaCloudLibraryTroveID;
- (void)clearSagaLastGeniusUpdateDate;
- (void)clearSagaLastItemPlayDataUploadDate;
- (void)clearSagaLastPlaylistPlayDataUploadDate;
- (void)clearSagaPrefersToMergeWithCloudLibrary;
- (BOOL)coalesceMismatchedCollectionsUsingConnection:(id)arg1;
- (BOOL)coerceValidDatabaseWithError:(id *)arg1;
- (id)composerForComposerName:(id)arg1;
- (void)connection:(id)arg1 didEndDatabaseTransactionAndCommit:(BOOL)arg2;
- (void)connectionDidBeginDatabaseTransaction:(id)arg1;
- (void)connectionDidOpenDatabase:(id)arg1;
- (void)connectionPool:(id)arg1 createdNewConnection:(id)arg2;
- (void)connectionWillCloseDatabase:(id)arg1;
- (void)connectionWillOpenDatabase:(id)arg1;
- (unsigned long long)countOfChangedPersistentIdsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3;
- (BOOL)createIndexes;
- (int)currentDatabaseVersion;
- (void)databaseConnectionAllowingWrites:(BOOL)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (BOOL)deleteArtworkToken:(id)arg1;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2 respectSongMattress:(BOOL)arg3;
- (BOOL)deleteDatabaseProperty:(id)arg1;
- (void)deletePresignedValidity;
- (void)emergencyDisconnectWithCompletion:(CDUnknownBlockType)arg1;
- (BOOL)emptyAllTables;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 forMediaTypes:(id)arg4 inUsersLibrary:(BOOL)arg5 usingBlock:(CDUnknownBlockType)arg6;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (id)genreForGenre:(id)arg1;
- (void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(long long)arg2 maximumRevisionType:(int)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (id)groupingKeyForString:(id)arg1;
- (id)groupingKeysForStrings:(id)arg1;
- (BOOL)hasOriginalArtworkForRelativePath:(id)arg1;
- (BOOL)hasPresignedValidity;
- (void)importArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5;
- (void)importArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5 usingConnection:(id)arg6;
- (BOOL)importExistingOriginalArtworkWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 mediaType:(unsigned int)arg4;
- (BOOL)importOriginalArtworkFromFileURL:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;
- (BOOL)importOriginalArtworkFromImageData:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;
- (BOOL)inTransactionUpdateSearchMapOnConnection:(id)arg1;
- (BOOL)inTransactionUpdateSortMapOnConnection:(id)arg1 forceRebuild:(BOOL)arg2 forceUpdateOriginals:(BOOL)arg3;
- (BOOL)inTransactionUpdateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(BOOL)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)initWithPath:(id)arg1 readOnly:(BOOL)arg2 populateUnitTestTablesBlock:(CDUnknownBlockType)arg3;
- (id)initWithResourcesManager:(id)arg1;
- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1 didReSortMap:(BOOL *)arg2;
- (BOOL)isArtworkFetchableForPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 artworkSourceType:(long long)arg4;
- (BOOL)isArtworkTokenAvailable:(id)arg1;
- (BOOL)isCurrentThreadInTransaction;
- (id)libraryContainerPath;
- (id)libraryContainerPathByAppendingPathComponent:(id)arg1;
- (id)libraryContainerRelativePath:(id)arg1;
- (id)libraryEntityFilterPredicatesForContainerClass:(Class)arg1;
- (id)libraryEntityFilterPredicatesForEntityClass:(Class)arg1;
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1;
- (void)migrateExistingArtworkToken:(id)arg1 newArtworkToken:(id)arg2 newSourceType:(long long)arg3;
- (void)migratePresignedValidity;
- (long long)minimumPurgeableStorage;
- (CDStruct_912cb5d2)nameOrderForString:(id)arg1;
- (void)notifyCloudLibraryAvailabilityDidChange;
- (void)notifyContentsDidChange;
- (void)notifyDisplayValuesPropertyDidChange;
- (void)notifyEntitiesAddedOrRemoved;
- (void)notifyInvisiblePropertyDidChange;
- (void)notifyKeepLocalStateDidChange;
- (void)notifyLibraryImportDidFinish;
- (void)notifyNonContentsPropertyDidChange;
- (void)notifySectionsDidChange;
- (id)pathForBaseLocationPath:(long long)arg1;
- (id)pathForResourceFileOrFolder:(int)arg1;
- (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(BOOL)arg3 createParentFolderIfNecessary:(BOOL)arg4;
- (void)performAsyncDatabaseWriteTransactionWithBlock:(CDUnknownBlockType)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)performDatabasePathChange:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)performDatabaseTransactionWithBlock:(CDUnknownBlockType)arg1;
- (void)performReadOnlyDatabaseTransactionWithBlock:(CDUnknownBlockType)arg1;
- (BOOL)persistentID:(long long)arg1 changedAfterRevision:(long long)arg2 revisionTrackingCode:(long long)arg3;
- (BOOL)prepareUnitTestDatabaseWithSQLFromContentsOfFile:(id)arg1 error:(id *)arg2;
- (long long)purgeableStorageSizeWithUrgency:(unsigned long long)arg1;
- (long long)purgeableStorageSizeWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(BOOL)arg2;
- (void)reconnectToDatabase;
- (BOOL)recordPlayEventForAlbumPersistentID:(long long)arg1;
- (BOOL)recordPlayEventForContainerPersistentID:(long long)arg1;
- (BOOL)removeArtworkAssetWithToken:(id)arg1;
- (void)removeArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4;
- (void)removeArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 usingConnection:(id)arg5;
- (void)removeItemsWithFamilyAccountID:(unsigned long long)arg1 purchaserAccountID:(unsigned long long)arg2 downloaderAccountID:(unsigned long long)arg3;
- (void)removeOrphanedTracksOnlyInCaches:(BOOL)arg1;
- (void)removePlaylistsWithPersistentIDs:(id)arg1 fromSource:(int)arg2 usingConnection:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
- (void)removeSource:(int)arg1 usingConnection:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)removeSource:(int)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)removeTombstonesForDeletedItems;
- (void)removeTracksWithPersistentIDs:(id)arg1 fromSource:(int)arg2 usingConnection:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
- (void)removeTracksWithPersistentIDs:(id)arg1 fromSource:(int)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (BOOL)repairAlbumArtistRelationshipsWithConnection:(id)arg1;
- (BOOL)requiresNonSchemaUpdatesOnConnection:(id)arg1;
- (BOOL)requiresSchemaOnlyUpdatesOnConnection:(id)arg1;
- (void)retrieveBestArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)savePlaylists;
- (void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (void)saveTrackMetadata;
- (void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (unsigned long long)sectionIndexTitleIndexForSectionIndex:(unsigned long long)arg1;
- (void)setAutoFilledTracksArePurgeable:(BOOL)arg1;
- (void)setLibraryUID:(id)arg1;
- (void)setMinimumPurgeableStorage:(long long)arg1;
- (void)setShouldOptimizeStorage:(BOOL)arg1;
- (BOOL)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (BOOL)shouldOptimizeStorage;
- (void)sortJaliscoLastSupportedMediaKinds;
- (long long)syncIdFromMultiverseId:(id)arg1;
- (void)terminateForFailureToPerformDatabasePathChange;
- (unsigned long long)unknownSectionIndex;
- (void)updateBestArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 preserveExistingAvailableToken:(BOOL)arg5 usingConnection:(id)arg6;
- (void)updateBestArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 usingConnection:(id)arg5;
- (void)updateJaliscoExcludedMediaKindsWith:(id)arg1 excludingMediaKindsInSet:(BOOL)arg2;
- (void)updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:(long long)arg1;
- (void)updateOrderingLanguagesForCurrentLanguage;
- (BOOL)updateSortMap;
- (BOOL)updateSortMapOnConnection:(id)arg1;
- (BOOL)updateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(BOOL)arg2;
- (BOOL)updateSystemPlaylistNamesForCurrentLanguage;
- (void)updateTrackIntegrity;
- (void)updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:(long long)arg1;
- (id)uppService;
- (BOOL)validateDatabase;
- (BOOL)validateSortMapUnicodeVersionOnConnection:(id)arg1;
- (id)valueForDatabaseProperty:(id)arg1;
- (BOOL)verifyPresignedValidity;

@end

