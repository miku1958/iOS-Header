//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSHashTable, NSManagedObjectContext, NSPersistentStoreDescription, NSURL, WFCoreDataChangeNotification;
@protocol OS_dispatch_queue;

@interface WFDatabase : NSObject
{
    BOOL _destroysOnDeallocation;
    NSURL *_fileURL;
    long long _transactionCount;
    NSPersistentStoreDescription *_persistentStoreDescription;
    WFCoreDataChangeNotification *_pendingChangeNotification;
    NSHashTable *_resultsToNotify;
    NSHashTable *_observers;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    NSManagedObjectContext *_suggestionsContext;
    NSManagedObjectContext *_context;
}

@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
@property (strong, nonatomic) NSManagedObjectContext *context; // @synthesize context=_context;
@property (nonatomic) BOOL destroysOnDeallocation; // @synthesize destroysOnDeallocation=_destroysOnDeallocation;
@property (readonly, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property (strong, nonatomic) NSHashTable *observers; // @synthesize observers=_observers;
@property (strong, nonatomic) WFCoreDataChangeNotification *pendingChangeNotification; // @synthesize pendingChangeNotification=_pendingChangeNotification;
@property (strong, nonatomic) NSPersistentStoreDescription *persistentStoreDescription; // @synthesize persistentStoreDescription=_persistentStoreDescription;
@property (strong, nonatomic) NSHashTable *resultsToNotify; // @synthesize resultsToNotify=_resultsToNotify;
@property (strong, nonatomic) NSManagedObjectContext *suggestionsContext; // @synthesize suggestionsContext=_suggestionsContext;
@property (nonatomic) long long transactionCount; // @synthesize transactionCount=_transactionCount;

+ (id)createDatabaseForTesting;
+ (id)defaultDatabase;
+ (void)setDefaultDatabase:(id)arg1;
- (void).cxx_destruct;
- (id)_createWorkflowWithOptions:(id)arg1 error:(id *)arg2;
- (id)_syncTokenWithError:(id *)arg1;
- (id)accessResourceStatesForReference:(id)arg1;
- (id)accessResourcesForReference:(id)arg1;
- (void)accessStorageForDescriptor:(id)arg1 forWriting:(BOOL)arg2 readingRecordProperties:(id)arg3 usingBlock:(CDUnknownBlockType)arg4 withError:(id *)arg5;
- (void)addActionCountsToShortcutsIfNecessary;
- (void)addObjectObserver:(id)arg1;
- (void)addSyncHashesToShortcutsIfNecessary;
- (id)allCollections;
- (id)allConfiguredTriggers;
- (id)allShortcutSuggestions;
- (id)allShortcuts;
- (void)clearTombstonesAndSyncState;
- (id)collectionForWorkflowType:(id)arg1;
- (id)collectionRecordForCollectionIdentifier:(id)arg1 createIfNecessary:(BOOL)arg2;
- (id)collectionResultWithFetchRequest:(id)arg1;
- (id)collectionWithIdentifier:(id)arg1;
- (id)collectionsForWorkflowReference:(id)arg1;
- (id)configuredTriggerForTriggerID:(id)arg1;
- (id)configuredTriggersForWorkflowID:(id)arg1;
- (id)conflictForWorkflowReference:(id)arg1;
- (id)conflictingReferenceForReference:(id)arg1;
- (void)contextDidSave:(id)arg1;
- (unsigned long long)countForResult:(id)arg1;
- (unsigned long long)countOfAllVisibleWorkflows;
- (unsigned long long)countOfWorkflowsInAFolder;
- (id)createFolderWithName:(id)arg1 icon:(id)arg2 error:(id *)arg3;
- (id)createTriggerEventWithTriggerID:(id)arg1 eventInfo:(id)arg2 confirmed:(BOOL)arg3 error:(id *)arg4;
- (id)createTriggerWithRecord:(id)arg1 workflow:(id)arg2 error:(id *)arg3;
- (id)createWorkflowWithError:(id *)arg1;
- (BOOL)createWorkflowWithIdentifier:(id)arg1 record:(id)arg2 error:(id *)arg3;
- (id)createWorkflowWithOptions:(id)arg1 error:(id *)arg2;
- (id)createWorkflowWithOptions:(id)arg1 nameCollisionBehavior:(unsigned long long)arg2 error:(id *)arg3;
- (id)currentPerWorkflowStateDataForAccessResourceWithIdentifier:(id)arg1 forReference:(id)arg2;
- (void)dealloc;
- (void)deleteAllAccessResourceStateDataForReference:(id)arg1;
- (void)deleteDonationsForShortcutWithIdentifier:(id)arg1;
- (BOOL)deleteReference:(id)arg1 error:(id *)arg2;
- (BOOL)deleteReference:(id)arg1 tombstone:(BOOL)arg2 deleteConflictIfPresent:(BOOL)arg3 error:(id *)arg4;
- (void)deleteShortcutSuggestionsFromApps:(id)arg1;
- (id)deletedFolders;
- (id)deletedWorkflows;
- (id)descriptorsForResult:(id)arg1 error:(id *)arg2;
- (id)duplicateNameErrorWithName:(id)arg1;
- (id)duplicateReference:(id)arg1 error:(id *)arg2;
- (id)duplicateReference:(id)arg1 newName:(id)arg2 error:(id *)arg3;
- (id)folderForWorkflowReference:(id)arg1;
- (BOOL)hasConflictingReferenceForReference:(id)arg1;
- (BOOL)hasVisibleWorkflowsWithName:(id)arg1;
- (id)initWithStoreDescription:(id)arg1 runMigrationsIfNecessary:(BOOL)arg2 error:(id *)arg3;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isReference:(id)arg1 allowedToRunOnDomain:(id)arg2;
- (id)latestRunEvent;
- (id)logRunOfWorkflow:(id)arg1 atDate:(id)arg2 withIdentifier:(id)arg3 source:(id)arg4 triggerID:(id)arg5;
- (id)logRunOfWorkflow:(id)arg1 withSource:(id)arg2 triggerID:(id)arg3;
- (BOOL)mergeAutomationsAndShortcuts;
- (id)missingErrorForDescriptor:(id)arg1;
- (BOOL)moveCollections:(id)arg1 toIndex:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)moveCollections:(id)arg1 toIndexes:(id)arg2 error:(id *)arg3;
- (BOOL)moveCollections:(id)arg1 toIndexes:(id)arg2 ofCollectionWithIdentifier:(id)arg3 error:(id *)arg4;
- (BOOL)moveReferences:(id)arg1 toIndex:(long long)arg2 ofCollection:(id)arg3 error:(id *)arg4;
- (BOOL)moveReferences:(id)arg1 toIndex:(long long)arg2 ofCollection:(id)arg3 visible:(BOOL)arg4 error:(id *)arg5;
- (BOOL)moveReferences:(id)arg1 toIndexes:(id)arg2 ofCollection:(id)arg3 error:(id *)arg4;
- (BOOL)moveReferences:(id)arg1 toIndexes:(id)arg2 ofCollection:(id)arg3 visible:(BOOL)arg4 error:(id *)arg5;
- (void)notifyResultsAboutChange:(id)arg1;
- (id)objectForDescriptor:(id)arg1 properties:(id)arg2;
- (id)objectForDescriptor:(id)arg1 properties:(id)arg2 createIfNecessary:(BOOL)arg3;
- (id)objectOfClass:(Class)arg1 withIdentifier:(id)arg2 forKey:(id)arg3 createIfNecessary:(BOOL)arg4 properties:(id)arg5;
- (id)orphanedFolders;
- (id)orphanedFoldersPredicate;
- (id)orphanedShortcuts;
- (id)orphanedWorkflowsPredicate;
- (id)performOperationWithBlock:(CDUnknownBlockType)arg1 error:(id *)arg2;
- (id)performSaveOperationWithBlock:(CDUnknownBlockType)arg1 error:(id *)arg2;
- (id)performSuggestionsOperationWithBlock:(CDUnknownBlockType)arg1 error:(id *)arg2;
- (void)performTransactionWithBlock:(CDUnknownBlockType)arg1 error:(id *)arg2;
- (BOOL)prependReferences:(id)arg1 toCollection:(id)arg2 error:(id *)arg3;
- (BOOL)prependReferences:(id)arg1 toCollectionWithType:(id)arg2 error:(id *)arg3;
- (Class)recordClassForObjectType:(unsigned long long)arg1;
- (id)recordWithDescriptor:(id)arg1 error:(id *)arg2;
- (id)recordWithDescriptor:(id)arg1 properties:(id)arg2 error:(id *)arg3;
- (id)referenceForWorkflowID:(id)arg1;
- (BOOL)reloadRecord:(id)arg1 withDescriptor:(id)arg2 error:(id *)arg3;
- (void)remoteContextDidSave:(id)arg1;
- (void)removeObjectObserver:(id)arg1;
- (BOOL)removeReferences:(id)arg1 fromCollectionWithIdentifier:(id)arg2 error:(id *)arg3;
- (void)removeRunEventsWithoutAssociatedShortcuts;
- (id)renameReference:(id)arg1 to:(id)arg2 error:(id *)arg3;
- (BOOL)saveContextOrRollback:(id)arg1 error:(id *)arg2;
- (BOOL)saveRecord:(id)arg1 withDescriptor:(id)arg2 error:(id *)arg3;
- (void)setConfirmedForTriggerEventWithIdentifier:(id)arg1 error:(id *)arg2;
- (void)setConflictingReference:(id)arg1 forReference:(id)arg2;
- (void)setOutcome:(long long)arg1 forRunEvent:(id)arg2;
- (void)setPerWorkflowStateData:(id)arg1 forAccessResourceWithIdentifier:(id)arg2 forReference:(id)arg3;
- (BOOL)setShortcutSuggestions:(id)arg1 forAppWithBundleIdentifier:(id)arg2 error:(id *)arg3;
- (void)setSyncToken:(id)arg1;
- (void)setTrustedToRunScripts:(BOOL)arg1 forReference:(id)arg2 onDomain:(id)arg3;
- (id)shortcutSuggestionsForAllAppsWithLimit:(unsigned long long)arg1 shortcutAvailability:(unsigned long long)arg2 error:(id *)arg3;
- (id)shortcutSuggestionsForAppWithBundleIdentifier:(id)arg1 shortcutAvailability:(unsigned long long)arg2 error:(id *)arg3;
- (id)sortedRunEventsForTriggerID:(id)arg1;
- (id)sortedRunEventsWithSource:(id)arg1;
- (id)sortedTriggerEventsWithConfirmationOnly:(BOOL)arg1;
- (id)sortedVisibleFolders;
- (id)sortedVisibleWorkflowsByName;
- (id)sortedVisibleWorkflowsInCollection:(id)arg1;
- (id)sortedVisibleWorkflowsWithAssociatedAppBundleIdentifier:(id)arg1;
- (id)sortedVisibleWorkflowsWithType:(id)arg1;
- (id)sortedWorkflowsWithQuery:(id)arg1;
- (BOOL)startObservingChangesForResult:(id)arg1;
- (id)suggestedFolderNameForName:(id)arg1;
- (id)suggestedWorkflowNameForName:(id)arg1;
- (id)syncToken;
- (id)tombstonedShortcutsPredicate;
- (id)triggerEventForIdentifier:(id)arg1 error:(id *)arg2;
- (id)triggerResultWithFetchRequest:(id)arg1;
- (id)uniqueVisibleReferenceForWorkflowName:(id)arg1;
- (id)updateFolder:(id)arg1 newName:(id)arg2 newIcon:(id)arg3 error:(id *)arg4;
- (id)validateFolderName:(id)arg1 forCollection:(id)arg2 error:(id *)arg3;
- (id)validateWorkflowName:(id)arg1 forCreation:(BOOL)arg2 overwriting:(BOOL)arg3 error:(id *)arg4;
- (id)visibleCollectionForFolderName:(id)arg1;
- (id)visiblePredicate;
- (id)visibleReferencesForWorkflowName:(id)arg1;
- (id)workflowFetchRequestWithCollectionID:(id)arg1 includeTombstones:(BOOL)arg2 limit:(unsigned long long)arg3;
- (id)workflowResultWithFetchOperation:(id)arg1;
- (id)workflowResultWithFetchRequest:(id)arg1;
- (id)workflowsWithTombstonedConflicts;

@end

