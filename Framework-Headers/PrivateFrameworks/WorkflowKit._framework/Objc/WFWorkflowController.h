//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <WorkflowKit/WFActionParameterInputProvider-Protocol.h>
#import <WorkflowKit/WFRemoteQuarantinePolicyEvaluatorDelegate-Protocol.h>
#import <WorkflowKit/WFVariableDataSource-Protocol.h>

@class NSDictionary, NSMapTable, NSProgress, NSString, RBSAssertion, WFAction, WFContentCollection, WFOutOfProcessWorkflowController, WFRemoteQuarantinePolicyEvaluator, WFWorkflow, WFWorkflowControllerState, WFWorkflowRunningContext;
@protocol OS_dispatch_queue, WFWorkflowControllerDelegate;

@interface WFWorkflowController : NSObject <WFRemoteQuarantinePolicyEvaluatorDelegate, WFVariableDataSource, WFActionParameterInputProvider>
{
    WFWorkflowController *_strongSelf;
    BOOL _donateInteraction;
    BOOL _isAutomationSuggestion;
    BOOL _acquiresAssertionWhileRunning;
    BOOL _running;
    BOOL _stepping;
    BOOL _resumed;
    BOOL _actionDidRunRemotely;
    WFWorkflow *_workflow;
    WFContentCollection *_input;
    WFContentCollection *_output;
    id<WFWorkflowControllerDelegate> _delegate;
    NSProgress *_progress;
    WFWorkflowRunningContext *_runningContext;
    NSString *_runSource;
    NSString *_automationType;
    NSString *_automationTrialID;
    NSDictionary *_listenerEndpoints;
    NSObject<OS_dispatch_queue> *_executionQueue;
    NSObject<OS_dispatch_queue> *_delegateQueue;
    unsigned long long _currentIndex;
    NSMapTable *_variableTable;
    WFWorkflowControllerState *_pendingState;
    NSDictionary *_pendingProcessedParameters;
    WFContentCollection *_pendingActionInput;
    WFRemoteQuarantinePolicyEvaluator *_policyEvaluator;
    RBSAssertion *_workflowRunAssertion;
    WFOutOfProcessWorkflowController *_outOfProcessController;
}

@property (nonatomic) BOOL acquiresAssertionWhileRunning; // @synthesize acquiresAssertionWhileRunning=_acquiresAssertionWhileRunning;
@property (nonatomic) BOOL actionDidRunRemotely; // @synthesize actionDidRunRemotely=_actionDidRunRemotely;
@property (copy, nonatomic) NSString *automationTrialID; // @synthesize automationTrialID=_automationTrialID;
@property (copy, nonatomic) NSString *automationType; // @synthesize automationType=_automationType;
@property (readonly, nonatomic) WFAction *currentAction;
@property (nonatomic) unsigned long long currentIndex; // @synthesize currentIndex=_currentIndex;
@property (strong, nonatomic) WFWorkflowControllerState *currentState;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<WFWorkflowControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue; // @synthesize delegateQueue=_delegateQueue;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL donateInteraction; // @synthesize donateInteraction=_donateInteraction;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *executionQueue; // @synthesize executionQueue=_executionQueue;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) WFContentCollection *input; // @synthesize input=_input;
@property (nonatomic) BOOL isAutomationSuggestion; // @synthesize isAutomationSuggestion=_isAutomationSuggestion;
@property (copy, nonatomic) NSDictionary *listenerEndpoints; // @synthesize listenerEndpoints=_listenerEndpoints;
@property (strong, nonatomic) WFOutOfProcessWorkflowController *outOfProcessController; // @synthesize outOfProcessController=_outOfProcessController;
@property (strong, nonatomic) WFContentCollection *output; // @synthesize output=_output;
@property (strong, nonatomic) WFContentCollection *pendingActionInput; // @synthesize pendingActionInput=_pendingActionInput;
@property (strong, nonatomic) NSDictionary *pendingProcessedParameters; // @synthesize pendingProcessedParameters=_pendingProcessedParameters;
@property (strong, nonatomic) WFWorkflowControllerState *pendingState; // @synthesize pendingState=_pendingState;
@property (strong, nonatomic) WFRemoteQuarantinePolicyEvaluator *policyEvaluator; // @synthesize policyEvaluator=_policyEvaluator;
@property (strong, nonatomic) NSProgress *progress; // @synthesize progress=_progress;
@property (nonatomic) BOOL resumed; // @synthesize resumed=_resumed;
@property (copy, nonatomic) NSString *runSource; // @synthesize runSource=_runSource;
@property (nonatomic, getter=isRunning) BOOL running; // @synthesize running=_running;
@property (strong, nonatomic) WFWorkflowRunningContext *runningContext; // @synthesize runningContext=_runningContext;
@property (nonatomic, getter=isStepping) BOOL stepping; // @synthesize stepping=_stepping;
@property (readonly) Class superclass;
@property (strong, nonatomic) NSMapTable *variableTable; // @synthesize variableTable=_variableTable;
@property (strong, nonatomic) WFWorkflow *workflow; // @synthesize workflow=_workflow;
@property (strong, nonatomic) RBSAssertion *workflowRunAssertion; // @synthesize workflowRunAssertion=_workflowRunAssertion;

+ (void)initialize;
- (void).cxx_destruct;
- (void)_finishStepWithError:(id)arg1;
- (void)_run;
- (void)_step;
- (void)acquireAssertionIfNeeded;
- (BOOL)action:(id)arg1 canProvideInputForParameter:(id)arg2;
- (void)action:(id)arg1 provideInputForParameters:(id)arg2 withDefaultStates:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)autoreleaseSelf;
- (BOOL)canRun;
- (id)contentForVariableWithName:(id)arg1;
- (void)dealloc;
- (void)didFinishRunningWithError:(id)arg1 cancelled:(BOOL)arg2;
- (void)didRunAction:(id)arg1;
- (id)errorByAddingActionIndex:(long long)arg1 toError:(id)arg2;
- (void)evaluateRemoteQuarantinePolicyWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)handleActionCompletion:(id)arg1 actionGroupSkipped:(BOOL)arg2;
- (void)handleError:(id)arg1 fromAction:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)init;
- (void)invalidateAssertionIfNeeded;
- (id)listenerEndpointWithIdentifier:(id)arg1;
- (void)logFinishActionEventWithAction:(id)arg1 completed:(BOOL)arg2;
- (void)logFinishRunEvent:(BOOL)arg1;
- (void)logStartActionEventWithAction:(id)arg1;
- (void)logStartEvent;
- (id)parameterInputProviderForAction:(id)arg1;
- (void)prepareToRunAction:(id)arg1 withInput:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)publishRunningState:(long long)arg1;
- (void)quarantineWorkflow;
- (void)queue_reset;
- (void)queue_setWorkflow:(id)arg1;
- (void)queue_stopWithError:(id)arg1;
- (void)reset;
- (void)resetEvaluationCriteriaForControlFlowActions;
- (void)restorePendingStateIfNecessary;
- (void)retainSelf;
- (void)run;
- (void)runAction:(id)arg1 withInput:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (BOOL)setContent:(id)arg1 forVariableWithName:(id)arg2;
- (void)setFinishedRunningWithSuccess:(BOOL)arg1;
- (void)setUpProgress;
- (void)setUpRunState;
- (id)stateWithActionIndex:(unsigned long long)arg1 input:(id)arg2 processedParameters:(id)arg3;
- (void)stop;
- (void)stopWithError:(id)arg1;
- (void)trackRunActionEventWithKey:(id)arg1 action:(id)arg2 completed:(BOOL)arg3;
- (void)trackRunShortcutEventWithKey:(id)arg1 completed:(BOOL)arg2;
- (id)userInterfaceForAction:(id)arg1;
- (id)userInterfaceToPresentAlertForEvaluator:(id)arg1;
- (void)workflowControllerWillRun:(id)arg1;
- (id)workflowInput;

@end

