//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSCondition, NSMutableArray, NSMutableDictionary, NSThread, TSUWeakReference;
@protocol OS_dispatch_semaphore;

__attribute__((visibility("hidden")))
@interface TSKAccessController : NSObject
{
    TSUWeakReference *_delegate;
    struct _opaque_pthread_rwlock_t _rwLock;
    BOOL _secondaryThreadWriting;
    BOOL _thenReadingOnPrimaryThread;
    NSCondition *_cond;
    NSMutableDictionary *_signalIdentifiers;
    NSMutableDictionary *_waitIdentifiers;
    struct __CFRunLoopSource *_primaryThreadPingSource;
    NSMutableArray *_pendingPrimaryThreadBlocks;
    struct {
        struct _opaque_pthread_t *threadId;
        unsigned int count;
        CDStruct_2a021fcd ticketInfo;
    } _readerInfo[64];
    CDStruct_2a021fcd _primaryThreadTicketInfo;
    unsigned int _readerCount;
    NSMutableArray *_writerQueue;
    NSObject<OS_dispatch_semaphore> *_outstandingTicketReadLock;
    unsigned int _outstandingTicketCount;
    BOOL _writeLockHeld;
    unsigned long long _writeBlockedPrimaryThreadCount;
    unsigned long long _primaryThreadWriteCount;
    _Atomic struct __CFRunLoop *_runLoop;
    _Atomic long long _runLoopReadCount;
    NSThread *_primaryThread;
    struct os_unfair_lock_s _primaryThreadIVarLock;
    _Atomic unsigned int _primaryThreadQualityOfServiceClass;
}

@property (readonly) BOOL hasRead;
@property (readonly) BOOL hasWrite;
@property (readonly) BOOL isPrimaryThread;
@property (readonly) NSThread *primaryThread;
@property (readonly) unsigned int primaryThreadQualityOfServiceClass;
@property struct __CFRunLoop *runLoop;

- (void)assertHasRead;
- (void)assertHasReadOrWrite;
- (void)assertHasWrite;
- (void)dealloc;
- (void)i_finishReadForTicket:(id)arg1;
- (void)i_startReadForTicket:(id)arg1;
- (id)init;
- (id)initWithDelegate:(id)arg1;
- (id)initWithPrimaryRunloop:(struct __CFRunLoop *)arg1 delegate:(id)arg2;
- (void)p_asyncPerformBlockOnPrimaryThread:(CDUnknownBlockType)arg1;
- (void)p_blockPrimaryThread;
- (void)p_blockPrimaryThreadForWrite;
- (void)p_dequeueWrite;
- (void)p_didAcquireReadLock;
- (void)p_didAcquireWriteLock;
- (void)p_enqueueWriteAndBlockAllowingPendingWrites:(BOOL)arg1;
- (void)p_finishReadForTicketInfo:(CDStruct_2a021fcd *)arg1;
- (void)p_flushPendingPrimaryThreadBlocksQueueAcquiringLock:(BOOL)arg1;
- (BOOL)p_hasRead;
- (BOOL)p_hasWrite;
- (void)p_performRead:(CDUnknownBlockType)arg1 eagerlyBlockingPrimaryThread:(BOOL)arg2 thenWrite:(CDUnknownBlockType)arg3 allowingPendingWrites:(BOOL)arg4 thenReadOnPrimaryThread:(CDUnknownBlockType)arg5;
- (void)p_performReadOnPrimaryThread:(CDUnknownBlockType)arg1 result:(BOOL)arg2;
- (void)p_readLock;
- (void)p_readLockTakingRealLock:(BOOL)arg1;
- (void)p_readUnlock;
- (void)p_readUnlockReleasingRealLock:(BOOL)arg1;
- (void)p_releaseRunLoop:(struct __CFRunLoop *)arg1;
- (void)p_schedulePrimaryThreadRead:(CDUnknownBlockType)arg1 result:(BOOL)arg2;
- (void)p_setPrimaryThreadIfNeeded;
- (void)p_signalPrimaryThreadWriteComplete;
- (void)p_signalThread:(id)arg1;
- (struct NSThread *)p_threadIdentifier;
- (CDStruct_2a021fcd *)p_ticketInfoForCurrentThread;
- (CDStruct_2a021fcd *)p_ticketInfoForTicket:(id)arg1;
- (void)p_unblockPrimaryThread;
- (BOOL)p_waitWithCondition:(id)arg1 untilDate:(id)arg2;
- (void)p_willAcquireReadLock;
- (void)p_willAcquireWriteLock;
- (void)p_willRelinquishReadLock;
- (void)p_willRelinquishWriteLock;
- (void)p_writeLockAndBlockPrimaryThread:(BOOL)arg1;
- (void)p_writeUnlock;
- (unsigned long long)p_writerQueueIndexOfThreadIdentifier:(struct NSThread *)arg1;
- (void)performRead:(CDUnknownBlockType)arg1;
- (void)performRead:(CDUnknownBlockType)arg1 thenWrite:(CDUnknownBlockType)arg2 thenReadOnPrimaryThread:(CDUnknownBlockType)arg3;
- (void)performRead:(CDUnknownBlockType)arg1 thenWriteBeforePendingWrites:(CDUnknownBlockType)arg2 thenReadOnPrimaryThread:(CDUnknownBlockType)arg3;
- (void)performReadAllowingOverlappingImplicitRead:(CDUnknownBlockType)arg1 thenWrite:(CDUnknownBlockType)arg2 thenReadOnPrimaryThread:(CDUnknownBlockType)arg3;
- (void)performReadGrantingTicket:(CDUnknownBlockType)arg1;
- (void)performReadWithTicket:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)performWrite:(CDUnknownBlockType)arg1;
- (void)performWrite:(CDUnknownBlockType)arg1 blockPrimaryThread:(BOOL)arg2;
- (void)signalIdentifier:(id)arg1;
- (void)waitOnIdentifier:(id)arg1;
- (BOOL)waitOnIdentifier:(id)arg1 untilDate:(id)arg2 releaseReadWhileWaiting:(BOOL)arg3;

@end

