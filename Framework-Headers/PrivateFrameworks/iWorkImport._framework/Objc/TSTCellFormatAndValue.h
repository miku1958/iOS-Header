//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <iWorkImport/NSCopying-Protocol.h>
#import <iWorkImport/TSSPropertyCommandSerializing-Protocol.h>
#import <iWorkImport/TSTCellDiffing-Protocol.h>

@class NSDate, NSString, TSKFormat, TSWPStorage;

__attribute__((visibility("hidden")))
@interface TSTCellFormatAndValue : NSObject <NSCopying, TSTCellDiffing, TSSPropertyCommandSerializing>
{
    unsigned int _valueType:8;
    BOOL _useAllSpareFormats;
    BOOL _suppressApplyValue;
    BOOL _applySpareFormatOnly;
    int _spareFormatType;
    BOOL _boolValue;
    struct TSUDecimal _decimalValue;
    NSObject *_objValue;
    NSString *_formattedValue;
    TSWPStorage *_formattedRichTextStorage;
    unsigned short _explicitFlags;
    unsigned int _cellFormatKind;
    TSKFormat *_numberFormat;
    TSKFormat *_currencyFormat;
    TSKFormat *_dateFormat;
    TSKFormat *_durationFormat;
    TSKFormat *_booleanFormat;
    TSKFormat *_textFormat;
}

@property (readonly, copy, nonatomic) NSDate *dateValue;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) BOOL isApplySpareFormatOnly;
@property (readonly, nonatomic) BOOL isFormulaSyntaxError;
@property (readonly, nonatomic) struct TSUDecimal numberOrCurrencyDecimalValue;
@property (readonly, nonatomic) TSWPStorage *richTextOrErrorTextStorageValue;
@property (readonly, copy, nonatomic) NSString *stringValue;
@property (readonly) Class superclass;
@property (readonly, nonatomic) int valueType;

+ (id)cellDiffProperties;
+ (id)formatAndValueFromCell:(id)arg1 applySpareFormatOnly:(int)arg2;
+ (id)formatAndValueFromCell:(id)arg1 useAllSpareFormats:(BOOL)arg2;
+ (id)formatAndValueFromCell:(id)arg1 useAllSpareFormats:(BOOL)arg2 forceNoContent:(BOOL)arg3;
+ (id)formatAndValueFromRichTextCell:(id)arg1 updatingStorageWithBlock:(CDUnknownBlockType)arg2;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)applyToCell:(id)arg1;
- (id)cellValueWithLocale:(id)arg1;
- (id)copyForApplyingNoContent;
- (id)copyForApplyingNoContentWithSuppressApplyValue:(BOOL)arg1;
- (id)copyForNotApplyingValue;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)getCurrentFormat;
- (BOOL)hasStringContentMatchingCell:(id)arg1;
- (id)initFromCell:(id)arg1 useAllSpareFormats:(BOOL)arg2;
- (id)initFromCell:(id)arg1 useAllSpareFormats:(BOOL)arg2 forceNoContent:(BOOL)arg3 applySpareFormatOnly:(int)arg4;
- (id)initFromPropertyCommandMessage:(const struct Message *)arg1 unarchiver:(id)arg2;
- (id)objectByRemovingPropertiesInMap:(id)arg1 addingPropertiesInMap:(id)arg2 updateInverseResetPropertyMap:(id)arg3 updateInverseSetPropertyMap:(id)arg4;
- (id)p_copyStorage:(id)arg1;
- (id)p_formatForFormatType:(unsigned int)arg1;
- (void)saveToPropertyCommandMessage:(struct Message *)arg1 archiver:(id)arg2;

@end

