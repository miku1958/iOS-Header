//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AbstractVocabulary;

struct CVNLPCTCCandidate;

struct CVNLPCTCPriorityQueue {
    struct priority_queue<CVNLPCTCCandidate, std::__1::vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>>, CVNLPCTCPriorityQueue::QueueComparison> _field1;
    BOOL _field2;
    struct vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>> _field3;
};

struct CVNLPTextDecodingPruningPolicy {
    long long strategy;
    BOOL shouldSort;
    float threshold;
    unsigned int maxNumberOfCandidates;
};

struct QueueComparison;

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct priority_queue<CVNLPCTCCandidate, std::__1::vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>>, CVNLPCTCPriorityQueue::QueueComparison> {
    struct vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>> _field1;
    struct QueueComparison _field2;
};

struct unique_ptr<cvnlp::AbstractVocabulary, std::__1::default_delete<cvnlp::AbstractVocabulary>> {
    struct __compressed_pair<cvnlp::AbstractVocabulary *, std::__1::default_delete<cvnlp::AbstractVocabulary>> {
        struct AbstractVocabulary *__value_;
    } __ptr_;
};

struct vImage_Buffer {
    void *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
};

struct vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>> {
    struct CVNLPCTCCandidate *_field1;
    struct CVNLPCTCCandidate *_field2;
    struct __compressed_pair<CVNLPCTCCandidate *, std::__1::allocator<CVNLPCTCCandidate>> {
        struct CVNLPCTCCandidate *_field1;
    } _field3;
};

struct vector<double, std::__1::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *__value_;
    } __end_cap_;
};

struct vector<float, std::__1::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *_field1;
    } _field3;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *__begin_;
    unsigned int *__end_;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *__value_;
    } __end_cap_;
};

struct vector<unsigned long, std::__1::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    void *data;
    void *reserved;
    unsigned long long dim[4];
    unsigned long long stride[4];
    unsigned long long width;
    unsigned long long height;
    unsigned long long channels;
    unsigned long long batch_number;
    unsigned long long sequence_length;
    unsigned long long stride_width;
    unsigned long long stride_height;
    unsigned long long stride_channels;
    unsigned long long stride_batch_number;
    unsigned long long stride_sequence_length;
    int storage_type;
} CDStruct_0a65202a;

typedef struct {
    void *plan;
    int network_index;
} CDStruct_2bc666a5;

// Template types
typedef struct vector<float, std::__1::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *_field1;
    } _field3;
} vector_f9ed6fc8;

typedef struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *__begin_;
    unsigned int *__end_;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *__value_;
    } __end_cap_;
} vector_12da65de;

