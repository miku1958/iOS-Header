//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <iTunesStore/ISURLOperation.h>

#import <iTunesStore/ISBiometricSessionDelegate-Protocol.h>

@class ISBiometricAuthenticationContext, NSNumber, NSString, SSURLBagContext, SSVFairPlaySAPSession;
@protocol ISBiometricSessionDelegate, ISStoreURLOperationDelegate;

@interface ISStoreURLOperation : ISURLOperation <ISBiometricSessionDelegate>
{
    long long _activeMachineDataStyle;
    NSNumber *_authenticatedDSID;
    BOOL _canSendGUIDParameter;
    BOOL _ignorePreexistingSecureToken;
    BOOL _isURLBagRequest;
    long long _machineDataStyle;
    BOOL _needsAuthentication;
    BOOL _needsURLBag;
    SSVFairPlaySAPSession *_sapSession;
    BOOL _shouldSendXTokenHeader;
    BOOL _urlKnownToBeTrusted;
    BOOL _useUserSpecificURLBag;
    BOOL _needsTermsAndConditionsAcceptance;
    BOOL _shouldSendDSIDHeader;
    ISBiometricAuthenticationContext *_biometricAuthenticationContext;
    id<ISBiometricSessionDelegate> _biometricSessionDelegate;
}

@property (strong) SSVFairPlaySAPSession *SAPSession;
@property (readonly) SSURLBagContext *URLBagContext;
@property (nonatomic, getter=isURLBagRequest) BOOL URLBagRequest; // @synthesize URLBagRequest=_isURLBagRequest;
@property (strong) NSNumber *authenticatedDSID; // @synthesize authenticatedDSID=_authenticatedDSID;
@property (strong) ISBiometricAuthenticationContext *biometricAuthenticationContext; // @synthesize biometricAuthenticationContext=_biometricAuthenticationContext;
@property id<ISBiometricSessionDelegate> biometricSessionDelegate; // @synthesize biometricSessionDelegate=_biometricSessionDelegate;
@property BOOL canSendGUIDParameter;
@property (readonly, copy) NSString *debugDescription;
@property id<ISStoreURLOperationDelegate> delegate; // @dynamic delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) BOOL ignorePreexistingSecureToken;
@property long long machineDataStyle; // @synthesize machineDataStyle=_machineDataStyle;
@property BOOL needsAuthentication; // @synthesize needsAuthentication=_needsAuthentication;
@property BOOL needsTermsAndConditionsAcceptance; // @synthesize needsTermsAndConditionsAcceptance=_needsTermsAndConditionsAcceptance;
@property BOOL needsURLBag; // @synthesize needsURLBag=_needsURLBag;
@property BOOL performsMachineDataActions;
@property BOOL shouldSendDSIDHeader; // @synthesize shouldSendDSIDHeader=_shouldSendDSIDHeader;
@property BOOL shouldSendXTokenHeader;
@property (readonly) Class superclass;
@property BOOL urlKnownToBeTrusted; // @synthesize urlKnownToBeTrusted=_urlKnownToBeTrusted;
@property BOOL useUserSpecificURLBag; // @synthesize useUserSpecificURLBag=_useUserSpecificURLBag;

+ (void)_addITunesStoreHeadersToRequest:(id)arg1 withURLBag:(id)arg2 account:(id)arg3 clientBundleIdentifier:(id)arg4;
+ (void)_addITunesStoreHeadersToRequest:(id)arg1 withURLBag:(id)arg2 accountIdentifier:(id)arg3 clientBundleIdentifier:(id)arg4;
+ (id)_authKitSession;
+ (id)_restrictionsHeaderValue;
+ (void)addITunesStoreHeadersToRequest:(id)arg1 withAccountIdentifier:(id)arg2;
+ (void)handleITunesStoreResponseHeaders:(id)arg1 request:(id)arg2 withAccountIdentifier:(id)arg3 shouldRetry:(BOOL *)arg4;
+ (id)itemPingOperationWithIdentifier:(unsigned long long)arg1 urlBagKey:(id)arg2;
+ (id)pingOperationWithUrl:(id)arg1;
+ (id)propertyListOperationWithURLBagKey:(id)arg1;
- (void).cxx_destruct;
- (id)_account;
- (void)_addStandardQueryParametersForURL:(id)arg1;
- (BOOL)_authenticateWithContext:(id)arg1 error:(id *)arg2;
- (BOOL)_canSendTokenToURL:(id)arg1;
- (void)_continueTouchIDSession;
- (id)_copyAuthenticationContext;
- (id)_copyAuthenticationContextForAttemptNumber:(long long)arg1;
- (BOOL)_isErrorTokenError:(id)arg1;
- (id)_loadURLBagInterpreterWithRequest:(id)arg1 requestProperties:(id)arg2;
- (BOOL)_performMachineDataRequest:(id)arg1;
- (BOOL)_processResponseData:(id)arg1 error:(id *)arg2;
- (id)_resolvedURLInBagContext:(id)arg1 URLBag:(id *)arg2;
- (void)_runURLOperation;
- (void)_setStoreFrontIdentifier:(id)arg1 isTransient:(BOOL)arg2;
- (BOOL)_shouldRetryForTouchIDChallengeWithError:(id)arg1;
- (id)_urlBagForContext:(id)arg1;
- (void)_willSendRequest:(id)arg1;
- (id)authenticatedAccountDSID;
- (BOOL)handleRedirectFromDataProvider:(id)arg1 error:(id *)arg2;
- (void)handleResponse:(id)arg1;
- (id)init;
- (id)newRequestWithURL:(id)arg1;
- (void)run;
- (void)sender:(id)arg1 didFallbackToPassword:(BOOL)arg2;
- (BOOL)shouldFollowRedirectWithRequest:(id)arg1 returningError:(id *)arg2;

@end

