//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <CloudKitDaemon/CKLoggingProtocol-Protocol.h>

@class CKAccountInfo, CKContainerID, CKDAccount, CKDFlowControlManager, CKDKeyValueDiskCache, CKDMMCS, CKDMescalSession, CKDPCSManager, CKDPublicIdentityLookupService, CKDServerConfiguration, CKDZoneGatekeeper, CKTimeLogger, NSBundle, NSHashTable, NSMutableArray, NSMutableDictionary, NSString, NSURL;
@protocol OS_dispatch_queue;

@interface CKDClientContext : NSObject <CKLoggingProtocol>
{
    BOOL _isForClouddInternalUse;
    BOOL _hasDataContainer;
    BOOL _canAccessProtectionData;
    BOOL _canSetDeviceIdentifier;
    BOOL _allowsPowerNapScheduling;
    BOOL _hasAllowAccessDuringBuddyEntitlement;
    BOOL _sandboxed;
    BOOL _finishedAppProxySetup;
    CKDServerConfiguration *_config;
    NSURL *_publicCloudDBURL;
    NSURL *_publicShareServiceURL;
    NSURL *_publicDeviceServiceURL;
    NSString *_containerScopedUserID;
    NSHashTable *_proxies;
    long long _cachedEnvironment;
    CKContainerID *_containerID;
    NSBundle *_applicationBundle;
    NSString *_applicationBundleID;
    NSString *_sourceApplicationBundleID;
    NSString *_applicationVersion;
    NSURL *_applicationIcon;
    NSString *_applicationDisplayName;
    NSString *_applicationContainerPath;
    NSString *_applicationContainerCloudKitDirectory;
    NSString *_applicationCachesDirectory;
    NSString *_applicationMMCSDirectory;
    NSString *_applicationAssetDbDirectory;
    NSString *_applicationFileDownloadDirectory;
    NSString *_applicationPackageUploadDirectory;
    NSString *_applicationPackageDownloadDirectory;
    NSString *_applicationRecordCacheDirectory;
    NSString *_containerHardwareIDHash;
    long long _type;
    long long _usesAPSPublicToken;
    long long _darkWakeEnabled;
    CKDAccount *_account;
    CKAccountInfo *_accountInfoOverride;
    CKDFlowControlManager *_flowControlManager;
    CKDMMCS *_MMCS;
    CKTimeLogger *_timeLogger;
    CKDPCSManager *_pcsManager;
    CKDKeyValueDiskCache *_publicIdentitiesDiskCache;
    CKDPublicIdentityLookupService *_foregroundPublicIdentityLookupService;
    CKDPublicIdentityLookupService *_backgroundPublicIdentityLookupService;
    CKDZoneGatekeeper *_foregroundZoneGatekeeper;
    CKDZoneGatekeeper *_backgroundZoneGatekeeper;
    CKDMescalSession *_mescalSession;
    NSMutableDictionary *_fakeErrorByClassName;
    NSObject<OS_dispatch_queue> *_setupQueue;
    NSString *_contextID;
    NSMutableArray *_oldApplicationCaches;
}

@property (strong) CKDMMCS *MMCS; // @synthesize MMCS=_MMCS;
@property (strong) CKDAccount *account; // @synthesize account=_account;
@property (readonly, nonatomic) CKAccountInfo *accountInfoOverride; // @synthesize accountInfoOverride=_accountInfoOverride;
@property (nonatomic) BOOL allowsPowerNapScheduling; // @synthesize allowsPowerNapScheduling=_allowsPowerNapScheduling;
@property (strong, nonatomic) NSString *applicationAssetDbDirectory; // @synthesize applicationAssetDbDirectory=_applicationAssetDbDirectory;
@property (readonly, nonatomic) NSBundle *applicationBundle; // @synthesize applicationBundle=_applicationBundle;
@property (readonly, nonatomic) NSString *applicationBundleID; // @synthesize applicationBundleID=_applicationBundleID;
@property (strong, nonatomic) NSString *applicationCachesDirectory; // @synthesize applicationCachesDirectory=_applicationCachesDirectory;
@property (strong, nonatomic) NSString *applicationContainerCloudKitDirectory; // @synthesize applicationContainerCloudKitDirectory=_applicationContainerCloudKitDirectory;
@property (strong, nonatomic) NSString *applicationContainerPath; // @synthesize applicationContainerPath=_applicationContainerPath;
@property (readonly, nonatomic) NSString *applicationDisplayName; // @synthesize applicationDisplayName=_applicationDisplayName;
@property (strong, nonatomic) NSString *applicationFileDownloadDirectory; // @synthesize applicationFileDownloadDirectory=_applicationFileDownloadDirectory;
@property (readonly, nonatomic) NSURL *applicationIcon; // @synthesize applicationIcon=_applicationIcon;
@property (strong, nonatomic) NSString *applicationMMCSDirectory; // @synthesize applicationMMCSDirectory=_applicationMMCSDirectory;
@property (strong, nonatomic) NSString *applicationPackageDownloadDirectory; // @synthesize applicationPackageDownloadDirectory=_applicationPackageDownloadDirectory;
@property (strong, nonatomic) NSString *applicationPackageUploadDirectory; // @synthesize applicationPackageUploadDirectory=_applicationPackageUploadDirectory;
@property (strong, nonatomic) NSString *applicationRecordCacheDirectory; // @synthesize applicationRecordCacheDirectory=_applicationRecordCacheDirectory;
@property (strong, nonatomic) NSString *applicationVersion; // @synthesize applicationVersion=_applicationVersion;
@property (strong, nonatomic, setter=setAPSEnvironmentString:) NSString *apsEnvironmentString;
@property (strong, nonatomic) CKDPublicIdentityLookupService *backgroundPublicIdentityLookupService; // @synthesize backgroundPublicIdentityLookupService=_backgroundPublicIdentityLookupService;
@property (strong, nonatomic) CKDZoneGatekeeper *backgroundZoneGatekeeper; // @synthesize backgroundZoneGatekeeper=_backgroundZoneGatekeeper;
@property long long cachedEnvironment; // @synthesize cachedEnvironment=_cachedEnvironment;
@property (readonly, nonatomic) BOOL canAccessAccount;
@property (nonatomic) BOOL canAccessProtectionData; // @synthesize canAccessProtectionData=_canAccessProtectionData;
@property (nonatomic) BOOL canSetDeviceIdentifier; // @synthesize canSetDeviceIdentifier=_canSetDeviceIdentifier;
@property (strong, nonatomic) CKDServerConfiguration *config; // @synthesize config=_config;
@property (readonly, nonatomic) NSString *containerHardwareIDHash; // @synthesize containerHardwareIDHash=_containerHardwareIDHash;
@property (readonly, nonatomic) CKContainerID *containerID; // @synthesize containerID=_containerID;
@property (strong, nonatomic) NSString *containerScopedUserID; // @synthesize containerScopedUserID=_containerScopedUserID;
@property (readonly, nonatomic) NSString *contextID; // @synthesize contextID=_contextID;
@property (nonatomic) long long darkWakeEnabled; // @synthesize darkWakeEnabled=_darkWakeEnabled;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (strong, nonatomic) NSMutableDictionary *fakeErrorByClassName; // @synthesize fakeErrorByClassName=_fakeErrorByClassName;
@property (nonatomic) BOOL finishedAppProxySetup; // @synthesize finishedAppProxySetup=_finishedAppProxySetup;
@property (strong, nonatomic) CKDFlowControlManager *flowControlManager; // @synthesize flowControlManager=_flowControlManager;
@property (strong, nonatomic) CKDPublicIdentityLookupService *foregroundPublicIdentityLookupService; // @synthesize foregroundPublicIdentityLookupService=_foregroundPublicIdentityLookupService;
@property (strong, nonatomic) CKDZoneGatekeeper *foregroundZoneGatekeeper; // @synthesize foregroundZoneGatekeeper=_foregroundZoneGatekeeper;
@property (nonatomic) BOOL hasAllowAccessDuringBuddyEntitlement; // @synthesize hasAllowAccessDuringBuddyEntitlement=_hasAllowAccessDuringBuddyEntitlement;
@property (nonatomic) BOOL hasDataContainer; // @synthesize hasDataContainer=_hasDataContainer;
@property (nonatomic, setter=setHasSystemServiceEntitlement:) BOOL hasSystemServiceEntitlement;
@property (readonly) unsigned long long hash;
@property (nonatomic) BOOL isForClouddInternalUse; // @synthesize isForClouddInternalUse=_isForClouddInternalUse;
@property (strong, nonatomic) CKDMescalSession *mescalSession; // @synthesize mescalSession=_mescalSession;
@property (strong, nonatomic) NSMutableArray *oldApplicationCaches; // @synthesize oldApplicationCaches=_oldApplicationCaches;
@property (strong, nonatomic) CKDPCSManager *pcsManager; // @synthesize pcsManager=_pcsManager;
@property (strong, nonatomic) NSHashTable *proxies; // @synthesize proxies=_proxies;
@property (strong, nonatomic) NSURL *publicCloudDBURL; // @synthesize publicCloudDBURL=_publicCloudDBURL;
@property (strong, nonatomic) NSURL *publicDeviceServiceURL; // @synthesize publicDeviceServiceURL=_publicDeviceServiceURL;
@property (strong, nonatomic) CKDKeyValueDiskCache *publicIdentitiesDiskCache; // @synthesize publicIdentitiesDiskCache=_publicIdentitiesDiskCache;
@property (strong, nonatomic) NSURL *publicShareServiceURL; // @synthesize publicShareServiceURL=_publicShareServiceURL;
@property (nonatomic, getter=isSandboxed) BOOL sandboxed; // @synthesize sandboxed=_sandboxed;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *setupQueue; // @synthesize setupQueue=_setupQueue;
@property (readonly, nonatomic) NSString *sourceApplicationBundleID; // @synthesize sourceApplicationBundleID=_sourceApplicationBundleID;
@property (readonly) Class superclass;
@property (strong, nonatomic) CKTimeLogger *timeLogger; // @synthesize timeLogger=_timeLogger;
@property (readonly, nonatomic) long long type; // @synthesize type=_type;
@property (nonatomic) long long usesAPSPublicToken; // @synthesize usesAPSPublicToken=_usesAPSPublicToken;

+ (id)_sharedContextWithAppContainerTuple:(id)arg1 accountInfoOverride:(id)arg2 proxy:(id)arg3 forInternalUse:(BOOL)arg4;
+ (id)applicationContainerPathForBundleID:(id)arg1 bundleURL:(id *)arg2 type:(long long *)arg3;
+ (id)contextWithAppContainerTuple:(id)arg1 accountInfoOverride:(id)arg2 proxy:(id)arg3;
+ (id)sharedContextForInternalUseWithAppContainerTuple:(id)arg1;
+ (id)sharedContextWithAppContainerTuple:(id)arg1 accountInfoOverride:(id)arg2 proxy:(id)arg3;
+ (id)sharedContextWithAppContainerTuple:(id)arg1 accountInfoOverride:(id)arg2 proxy:(id)arg3 forInternalUse:(BOOL)arg4;
+ (id)sharedContexts;
- (void).cxx_destruct;
- (id)CKPropertiesDescription;
- (void)_determineHardwareInfo;
- (id)_issueSandboxExtensionForPath:(id)arg1 error:(id *)arg2;
- (void)_loadApplicationContainerPathAndType;
- (void)_purgeOldCacheDirectories;
- (void)_reloadAccount;
- (BOOL)_setupDirectoriesWithClientProxy:(id)arg1 sandboxExtensions:(id *)arg2 error:(id *)arg3;
- (void)addClientProxy:(id)arg1;
- (void)clearAssetCache;
- (void)clearAssetCacheWithDatabaseScope:(long long)arg1;
- (void)clearAuthTokensForRecordWithID:(id)arg1 databaseScope:(long long)arg2;
- (void)clearRecordCacheWithDatabaseScope:(long long)arg1;
- (void)dealloc;
- (void)finishSetupWithClientProxy:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)initWithAppContainerTuple:(id)arg1 accountInfoOverride:(id)arg2 proxy:(id)arg3;
- (void)logWithFile:(const char *)arg1 function:(const char *)arg2 line:(int)arg3 level:(int)arg4 section:(id)arg5 format:(id)arg6;
- (void)performRequest:(id)arg1;
- (double)publicIdentitiesExpirationTimeout;
- (void)removeClientProxy:(id)arg1;
- (void)setFakeError:(id)arg1 forNextRequestOfClassName:(id)arg2;
- (BOOL)setupAssetTransfersWithClientProxy:(id)arg1 error:(id *)arg2;
- (BOOL)setupMMCSWrapperWithError:(id *)arg1;
- (void)showUserNotification:(struct __CFUserNotification *)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)startSetupWithClientProxy:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)tearDownAssetTransfers;

@end

