//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <MessageLegacy/EFCancelable-Protocol.h>

@class MFAttachmentManager, MFAttachmentPlaceholder, MFMimePart, NSProgress, NSString, NSURL;
@protocol MFDataConsumer;

@interface MFAttachment : NSObject <EFCancelable>
{
    MFAttachmentManager *_attachmentManager;
    BOOL _isDataAvailableLocally;
    MFAttachmentPlaceholder *_placeholder;
    NSProgress *_downloadProgress;
    BOOL _isAutoArchive;
    BOOL _wantsCompletionBlockOffMainThread;
    NSURL *_url;
    MFMimePart *_part;
    NSString *_disposition;
    CDUnknownBlockType _fetchCompletionBlock;
    id<MFDataConsumer> _customConsumer;
    unsigned long long _lastProgressBytes;
    double _lastProgressTime;
}

@property (nonatomic) MFAttachmentManager *attachmentManager; // @synthesize attachmentManager=_attachmentManager;
@property (copy) NSString *contentID;
@property (strong, nonatomic) id<MFDataConsumer> customConsumer; // @synthesize customConsumer=_customConsumer;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned long long decodedFileSize;
@property (readonly, copy) NSString *description;
@property (copy, nonatomic) NSString *disposition; // @synthesize disposition=_disposition;
@property (strong, nonatomic) NSProgress *downloadProgress; // @synthesize downloadProgress=_downloadProgress;
@property (nonatomic) unsigned long long encodedFileSize;
@property (copy, nonatomic) CDUnknownBlockType fetchCompletionBlock; // @synthesize fetchCompletionBlock=_fetchCompletionBlock;
@property (copy, nonatomic) NSString *fileName; // @dynamic fileName;
@property (readonly) NSString *fileUTType;
@property (readonly) unsigned long long hash;
@property (readonly) NSString *inferredMimeType;
@property (readonly) BOOL isAutoArchive; // @synthesize isAutoArchive=_isAutoArchive;
@property (readonly) BOOL isContainedInCompose;
@property (readonly) BOOL isContainedInRFC822;
@property (readonly) BOOL isDataAvailableLocally;
@property BOOL isPlaceholder; // @dynamic isPlaceholder;
@property (nonatomic) unsigned long long lastProgressBytes; // @synthesize lastProgressBytes=_lastProgressBytes;
@property (nonatomic) double lastProgressTime; // @synthesize lastProgressTime=_lastProgressTime;
@property (copy, nonatomic) NSString *mimeType; // @dynamic mimeType;
@property (strong, nonatomic) MFMimePart *part; // @synthesize part=_part;
@property (readonly) NSString *path; // @dynamic path;
@property (strong, nonatomic) MFAttachmentPlaceholder *placeholder; // @synthesize placeholder=_placeholder;
@property (copy, nonatomic) NSString *remoteImageFileName;
@property (readonly) Class superclass;
@property (copy, nonatomic) NSURL *url; // @synthesize url=_url;
@property (nonatomic) BOOL wantsCompletionBlockOffMainThread; // @synthesize wantsCompletionBlockOffMainThread=_wantsCompletionBlockOffMainThread;

- (id)_dataProvider;
- (id)_fileUTTypeForFileName:(id)arg1;
- (id)attachmentContentTypeForFileName:(id)arg1;
- (void)cancel;
- (BOOL)conformsToType:(id)arg1;
- (BOOL)contentTypeConformsToEvent;
- (BOOL)contentTypeConformsToEventICS;
- (BOOL)contentTypeConformsToEventVCS;
- (BOOL)contentTypeConformsToIWork;
- (BOOL)contentTypeConformsToMarkup;
- (BOOL)contentTypeConformsToPassbook;
- (BOOL)contentTypeConformsToProvisionment;
- (BOOL)contentTypeConformsToVCard;
- (void)dealloc;
- (id)decodeFilterWithDataConsumer:(id)arg1;
- (void)fetchData;
- (id)fetchDataSynchronously:(id *)arg1;
- (id)fetchDataSynchronously:(id *)arg1 stripPrivateMetadata:(BOOL)arg2;
- (id)fetchDataToURL:(id *)arg1;
- (id)fetchLocalData;
- (id)fetchLocalData:(id *)arg1 stripPrivateMetadata:(BOOL)arg2;
- (id)fetchPlaceholderData;
- (id)fileAttributes;
- (id)fileNameByStrippingZipIfNeeded:(BOOL)arg1;
- (id)fileURL;
- (id)filterData:(id)arg1;
- (id)filterICSData:(id)arg1;
- (id)filterVCSData:(id)arg1;
- (id)initWithURL:(id)arg1 attachmentManager:(id)arg2;
- (BOOL)isAvailable;
- (BOOL)isCached;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isImageFile;
- (BOOL)isMailDrop;
- (BOOL)isMailDropPhotoArchive;
- (id)metadataValueForKey:(id)arg1;
- (id)readFromDisk;
- (void)resetProgress;
- (void)setMetadataValue:(id)arg1 forKey:(id)arg2;
- (unsigned long long)sizeOnDisk;
- (id)textEncodingGuessWithData:(id)arg1;
- (id)textEncodingNameForData:(id)arg1 mimeType:(id)arg2;
- (void)updateProgressWithCurrentBytes:(unsigned long long)arg1;
- (void)writeToDiskWithData:(id)arg1;

@end

