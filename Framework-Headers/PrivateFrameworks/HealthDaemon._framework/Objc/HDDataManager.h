//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <HealthDaemon/HDDiagnosticObject-Protocol.h>
#import <HealthDaemon/HDHealthDataManager-Protocol.h>

@class NSMutableDictionary, NSMutableSet, NSNumber, NSString;
@protocol HDHealthDaemon, OS_dispatch_queue;

@interface HDDataManager : NSObject <HDDiagnosticObject, HDHealthDataManager>
{
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_notificationQueue;
    NSMutableDictionary *_observersByDataType;
    unsigned long long _openTransactions;
    unsigned long long _sourceObserverCount;
    NSMutableDictionary *_pendingObjectsBySampleType;
    NSMutableDictionary *_pendingObjectsBySource;
    NSMutableSet *_pendingSources;
    NSNumber *_lastAnchor;
    id<HDHealthDaemon> _daemon;
}

@property (weak, nonatomic) id<HDHealthDaemon> daemon; // @synthesize daemon=_daemon;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_callObservers:(id)arg1 forType:(id)arg2 source:(id)arg3 withAnchor:(id)arg4;
- (void)_callObservers:(id)arg1 withObjects:(id)arg2 type:(id)arg3 anchor:(id)arg4;
- (void)_callObserversIfPossible;
- (BOOL)_deleteObjectsWithTypes:(id)arg1 sourceIdentifier:(id)arg2 error:(id *)arg3;
- (BOOL)_insertDataObjects:(id)arg1 intoDatabase:(id)arg2 withProvenance:(id)arg3 creationDate:(double)arg4 skipInsertionFilter:(BOOL)arg5 error:(id *)arg6;
- (id)_medicalIDURL;
- (void)_notificationQueue_notifyObserversSamplesWithTypesWereRemoved:(id)arg1 anchor:(id)arg2;
- (void)_notifyObserversSamplesWithTypesWereRemoved:(id)arg1 anchor:(id)arg2;
- (void)_notifyObserversWithAddedObjectsBySampleType:(id)arg1 objectsBySource:(id)arg2 pendingSources:(id)arg3 lastAnchor:(id)arg4;
- (id)_observersForAllTypes;
- (id)_observersForDataType:(id)arg1;
- (id)_observersForDataType:(id)arg1 sourceBundleIdentifier:(id)arg2;
- (id)_queue_observersAllTypesCreateIfNil:(BOOL)arg1;
- (id)_queue_observersForDataType:(id)arg1 createIfNil:(BOOL)arg2;
- (id)_queue_observersForDataType:(id)arg1 sourceBundleIdentifier:(id)arg2 createIfNil:(BOOL)arg3;
- (id)_queue_observersForKey:(id)arg1 createIfNil:(BOOL)arg2;
- (void)addObserver:(id)arg1 forDataType:(id)arg2;
- (void)addObserver:(id)arg1 forDataType:(id)arg2 sourceBundleIdentifier:(id)arg3;
- (void)addObserverForAllTypes:(id)arg1;
- (void)closeObserverTransaction;
- (BOOL)containsAnyDataObjectInArray:(id)arg1;
- (BOOL)containsDataObject:(id)arg1;
- (BOOL)deleteDataObjects:(id)arg1 restrictedSourceEntity:(id)arg2 failIfNotFound:(BOOL)arg3 error:(id *)arg4;
- (BOOL)deleteDataObjects:(id)arg1 sourceBundleIdentifier:(id)arg2 error:(id *)arg3;
- (BOOL)deleteDataObjectsOfClass:(Class)arg1 predicate:(id)arg2 limit:(unsigned long long)arg3 deletedSampleCount:(unsigned long long *)arg4 notifyObservers:(BOOL)arg5 generateDeletedObjects:(BOOL)arg6 error:(id *)arg7;
- (BOOL)deleteMedicalIDData:(id *)arg1;
- (BOOL)deleteSamplesWithSourceIdentifier:(id)arg1 error:(id *)arg2;
- (BOOL)deleteSamplesWithTypes:(id)arg1 sourceBundleIdentifier:(id)arg2 error:(id *)arg3;
- (BOOL)deleteSamplesWithTypes:(id)arg1 sourceID:(id)arg2 error:(id *)arg3;
- (BOOL)deleteSamplesWithUUIDs:(id)arg1 error:(id *)arg2;
- (BOOL)deleteSamplesWithUUIDs:(id)arg1 generateDeletedObjects:(BOOL)arg2 database:(id)arg3 error:(id *)arg4;
- (id)diagnosticDescription;
- (id)initWithDaemon:(id)arg1;
- (BOOL)insertDataObjects:(id)arg1 sourceEntity:(id)arg2 deviceEntity:(id)arg3 sourceVersion:(id)arg4 creationDate:(double)arg5 error:(id *)arg6;
- (BOOL)insertDataObjects:(id)arg1 withProvenance:(id)arg2 creationDate:(double)arg3 error:(id *)arg4;
- (BOOL)insertDataObjects:(id)arg1 withProvenance:(id)arg2 creationDate:(double)arg3 skipInsertionFilter:(BOOL)arg4 error:(id *)arg5;
- (id)medicalIDDataCreateIfNecessary:(BOOL)arg1;
- (void)openObserverTransaction;
- (void)removeObserver:(id)arg1 forDataType:(id)arg2;
- (void)removeObserver:(id)arg1 forDataType:(id)arg2 sourceBundleIdentifier:(id)arg3;
- (void)removeObserverForAllTypes:(id)arg1;
- (void)setBackgroundObserverFrequency:(id)arg1 forDataType:(id)arg2 frequency:(long long)arg3 completion:(CDUnknownBlockType)arg4;
- (BOOL)updateMedicalIDData:(id)arg1 error:(id *)arg2;

@end

