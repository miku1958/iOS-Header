//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <HealthDaemon/HDDataCollectionManagerDelegate-Protocol.h>
#import <HealthDaemon/HDDiagnosticObject-Protocol.h>
#import <HealthDaemon/HDHealthDaemon-Protocol.h>
#import <HealthDaemon/NSXPCListenerDelegate-Protocol.h>

@class HDAWDSubmissionManager, HDAchievementAssetManager, HDAchievementDefinitionAlertManager, HDAchievementDoctorManager, HDAppLauncher, HDAppSubscriptionManager, HDAuthorizationManager, HDBackgroundTaskScheduler, HDCoachingDiagnosticManager, HDCompanionWorkoutCreditManager, HDContentProtectionManager, HDCurrentActivitySummaryHelper, HDDataProvenanceManager, HDDatabase, HDDemoDataGenerator, HDDeviceManager, HDFitnessAppBadgeManager, HDFitnessFriendsManager, HDHealthServiceManager, HDNanoSyncManager, HDPluginManager, HDPrimaryProfile, HDProcessStateManager, HDRoutineGateway, HDServiceConnectionManager, HDUserCharacteristicsManager, NSMutableArray, NSMutableSet, NSString, NSURL, NSXPCListener, _HKBehavior;
@protocol HDAchievementDefinitionAlertNotifier, HDAchievementDefinitionAlertSuppressor, HDDaemonTester, HDHealthDatabase, HDNanoAlertSuppressionService, HDViewOnWakeService, OS_dispatch_queue;

@interface HDDaemon : NSObject <HDDataCollectionManagerDelegate, HDDiagnosticObject, NSXPCListenerDelegate, HDHealthDaemon>
{
    NSString *_homeDirectoryPath;
    NSMutableSet *_endpoints;
    NSObject<OS_dispatch_queue> *_mainQueue;
    int _languageChangeNotifyToken;
    HDContentProtectionManager *_contentProtectionManager;
    HDUserCharacteristicsManager *_userCharacteristicsManager;
    HDBackgroundTaskScheduler *_backgroundTaskScheduler;
    HDProcessStateManager *_processStateManager;
    HDPluginManager *_pluginManager;
    HDAWDSubmissionManager *_awdSubmissionManager;
    HDAchievementDefinitionAlertManager *_achievementDefinitionAlertManager;
    id<HDAchievementDefinitionAlertSuppressor> _achievementDefinitionAlertSuppressor;
    id<HDAchievementDefinitionAlertNotifier> _achievementDefinitionAlertNotifier;
    HDFitnessFriendsManager *_fitnessFriendsManager;
    HDRoutineGateway *_routineGateway;
    HDPrimaryProfile *_primaryProfile;
    HDDemoDataGenerator *_demoDataFactory;
    struct MGNotificationTokenStruct *_deviceNameChangesToken;
    NSXPCListener *_serviceListener;
    NSMutableArray *_daemonLaunchObservers;
    BOOL _daemonReady;
    int _didStart;
    _HKBehavior *_behavior;
    HDAchievementAssetManager *_achievementAssetManager;
    HDAchievementDoctorManager *_achievementDoctorManager;
    HDAppLauncher *_appLauncher;
    HDAuthorizationManager *_authorizationManager;
    HDCompanionWorkoutCreditManager *_companionWorkoutCreditManager;
    HDDatabase *_database;
    HDHealthServiceManager *_serviceManager;
    HDServiceConnectionManager *_serviceConnectionManager;
    HDDeviceManager *_deviceManager;
    HDAppSubscriptionManager *_subscriptionManager;
    HDNanoSyncManager *_nanoSyncManager;
    id<HDViewOnWakeService> _viewOnWakeService;
    HDCoachingDiagnosticManager *_coachingDiagnosticManager;
    HDFitnessAppBadgeManager *_fitnessAppBadgeManager;
    HDCurrentActivitySummaryHelper *_currentActivitySummaryHelper;
    id<HDNanoAlertSuppressionService> _alertSuppressionService;
    id<HDDaemonTester> _daemonTester;
    NSObject<OS_dispatch_queue> *_queue;
}

@property (strong, nonatomic) HDAchievementAssetManager *achievementAssetManager; // @synthesize achievementAssetManager=_achievementAssetManager;
@property (strong, nonatomic) HDAchievementDefinitionAlertManager *achievementDefinitionAlertManager; // @synthesize achievementDefinitionAlertManager=_achievementDefinitionAlertManager;
@property (strong, nonatomic) HDAchievementDoctorManager *achievementDoctorManager; // @synthesize achievementDoctorManager=_achievementDoctorManager;
@property (strong, nonatomic) id<HDNanoAlertSuppressionService> alertSuppressionService; // @synthesize alertSuppressionService=_alertSuppressionService;
@property (strong, nonatomic) HDAppLauncher *appLauncher; // @synthesize appLauncher=_appLauncher;
@property (strong, nonatomic) HDAuthorizationManager *authorizationManager; // @synthesize authorizationManager=_authorizationManager;
@property (strong, nonatomic) HDAWDSubmissionManager *awdSubmissionManager; // @synthesize awdSubmissionManager=_awdSubmissionManager;
@property (readonly) HDBackgroundTaskScheduler *backgroundTaskScheduler;
@property (strong, nonatomic) _HKBehavior *behavior; // @synthesize behavior=_behavior;
@property (strong, nonatomic) HDCoachingDiagnosticManager *coachingDiagnosticManager; // @synthesize coachingDiagnosticManager=_coachingDiagnosticManager;
@property (strong, nonatomic) HDCompanionWorkoutCreditManager *companionWorkoutCreditManager; // @synthesize companionWorkoutCreditManager=_companionWorkoutCreditManager;
@property (readonly) HDContentProtectionManager *contentProtectionManager;
@property (strong, nonatomic) HDCurrentActivitySummaryHelper *currentActivitySummaryHelper; // @synthesize currentActivitySummaryHelper=_currentActivitySummaryHelper;
@property (weak, nonatomic) id<HDDaemonTester> daemonTester; // @synthesize daemonTester=_daemonTester;
@property (readonly) HDDataProvenanceManager *dataProvenanceManager;
@property (strong, nonatomic) HDDatabase *database; // @synthesize database=_database;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (strong, nonatomic) HDDeviceManager *deviceManager; // @synthesize deviceManager=_deviceManager;
@property (strong, nonatomic) HDFitnessAppBadgeManager *fitnessAppBadgeManager; // @synthesize fitnessAppBadgeManager=_fitnessAppBadgeManager;
@property (strong, nonatomic) HDFitnessFriendsManager *fitnessFriendsManager; // @synthesize fitnessFriendsManager=_fitnessFriendsManager;
@property (readonly) unsigned long long hash;
@property (readonly) id<HDHealthDatabase> healthDatabase;
@property (readonly) HDDeviceManager *healthDeviceManager;
@property (readonly) HDHealthServiceManager *healthServiceManager;
@property (readonly) NSString *homeDirectoryPath;
@property (readonly) NSURL *homeDirectoryURL;
@property (readonly) BOOL isAppleWatch;
@property (readonly) NSObject<OS_dispatch_queue> *mainQueue;
@property (strong, nonatomic) HDNanoSyncManager *nanoSyncManager; // @synthesize nanoSyncManager=_nanoSyncManager;
@property (readonly) HDPluginManager *pluginManager;
@property (strong, nonatomic) HDPrimaryProfile *primaryProfile; // @synthesize primaryProfile=_primaryProfile;
@property (readonly) HDProcessStateManager *processStateManager;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property (strong, nonatomic) HDRoutineGateway *routineGateway; // @synthesize routineGateway=_routineGateway;
@property (strong, nonatomic) HDServiceConnectionManager *serviceConnectionManager; // @synthesize serviceConnectionManager=_serviceConnectionManager;
@property (strong, nonatomic) HDHealthServiceManager *serviceManager; // @synthesize serviceManager=_serviceManager;
@property (strong, nonatomic) HDAppSubscriptionManager *subscriptionManager; // @synthesize subscriptionManager=_subscriptionManager;
@property (readonly) Class superclass;
@property (readonly) HDUserCharacteristicsManager *userCharacteristicsManager;
@property (strong, nonatomic) id<HDViewOnWakeService> viewOnWakeService; // @synthesize viewOnWakeService=_viewOnWakeService;

- (void).cxx_destruct;
- (id)IDSServiceWithIdentifier:(id)arg1;
- (void)_applyPPTUpdatesWithDatabase:(id)arg1;
- (void)_handleSigterm;
- (void)_localeOrLanguageChanged:(id)arg1;
- (BOOL)_motionTrackingAvailable;
- (id)_newAWDSubmissionManager;
- (id)_newBehavior;
- (id)_newCompanionWorkoutCreditManager;
- (id)_newContentProtectionMangaer;
- (id)_newFitnessFriendsManager;
- (id)_newMainQueue;
- (id)_newNanoSyncManager;
- (id)_newPluginManager;
- (id)_newPrimaryProfile;
- (id)_newProcessStateManager;
- (void)_notifyDaemonLaunchObservers;
- (void)_periodicUpdates;
- (BOOL)_persistDataAndNotify:(id)arg1 provenance:(id)arg2 error:(id *)arg3;
- (id)_queryServersByUUID;
- (void)_registerForDeviceNameChanges;
- (void)_registerLaunchEventDynamicallyForNotification:(const char *)arg1;
- (void)_resetPrivacySettings;
- (void)_setUpDistnotedEventHandler;
- (void)_setUpLaunchEventHandlers;
- (void)_setUpNotifydEventHandler;
- (void)_setUpPedometerLaunchEventHandler;
- (void)_setUpSignalHandlers;
- (void)_setupMemoryWarningHandler;
- (id)_setupSignal:(int)arg1 handler:(CDUnknownBlockType)arg2;
- (BOOL)_shouldInitializeDaemon;
- (void)_terminationCleanup;
- (void)_unregisterLaunchEventDynamicallyForNotification:(const char *)arg1;
- (void)_updateCurrentDeviceName;
- (id)containerWithIdentifier:(id)arg1;
- (void)dealloc;
- (id)diagnosticDescription;
- (void)didUpdateActiveWorkoutServers;
- (void)exitImmediately:(BOOL)arg1 reason:(id)arg2;
- (id)firstPartyWorkoutSnapshot;
- (BOOL)hasAnyActiveWorkouts;
- (BOOL)healthDataReceived:(id)arg1 provenance:(id)arg2 error:(id *)arg3;
- (id)healthDirectorySizeInBytes;
- (id)healthDomainAccessorWithPairedDevice:(id)arg1;
- (id)healthLiteUserDefaultsDomain;
- (id)init;
- (id)initWithHomeDirectoryPath:(id)arg1;
- (void)invalidateAndWait;
- (BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (id)nanoPairedDeviceRegistry;
- (id)newClientWithConnection:(id)arg1;
- (void)obliterateAndTerminateAsyncWithReason:(id)arg1;
- (id)pairedSyncCoordinatorWithServiceName:(id)arg1;
- (void)pauseAllActiveWorkoutsWithCompletion:(CDUnknownBlockType)arg1;
- (void)performBlockWithPowerAssertionIdentifier:(id)arg1 transactionName:(id)arg2 powerAssertionInterval:(double)arg3 block:(CDUnknownBlockType)arg4;
- (BOOL)persistAndNotifyDataObject:(id)arg1 device:(id)arg2 error:(id *)arg3;
- (BOOL)persistAndNotifyDataObjects:(id)arg1 device:(id)arg2 error:(id *)arg3;
- (id)pluginDataCollectorsForCollectionManager:(id)arg1;
- (void)registerForDaemonReady:(id)arg1;
- (void)registerForLaunchNotification:(const char *)arg1;
- (void)setCurrentActivityCacheOverrideDate:(id)arg1 timeZone:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)setDataCollectionOptions:(id)arg1 forKey:(id)arg2 type:(id)arg3 clientUUID:(id)arg4;
- (void)start;
- (id)syncEngine;
- (id)temporaryProfile;
- (void)terminateWithReason:(id)arg1;
- (void)unregisterForLaunchNotification:(const char *)arg1;

@end

