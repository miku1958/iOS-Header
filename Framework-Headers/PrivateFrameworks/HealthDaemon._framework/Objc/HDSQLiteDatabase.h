//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSMutableArray, NSMutableDictionary, NSURL;

@interface HDSQLiteDatabase : NSObject
{
    struct sqlite3 *_db;
    BOOL _isInTransaction;
    long long _transactionType;
    struct __CFDictionary *_statementCache;
    NSMutableDictionary *_attachedDatabaseURLsByName;
    struct unordered_set<sqlite3_stmt *, std::__1::hash<sqlite3_stmt *>, std::__1::equal_to<sqlite3_stmt *>, std::__1::allocator<sqlite3_stmt *>> _activeStatements;
    NSMutableArray *_onCommitBlocks;
    NSMutableArray *_onRollbackBlocks;
    BOOL _checkpointRequired;
    NSURL *_fileURL;
}

@property (nonatomic) BOOL checkpointRequired; // @synthesize checkpointRequired=_checkpointRequired;
@property (readonly, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;

+ (BOOL)_stepStatement:(struct sqlite3_stmt *)arg1 hasRow:(BOOL *)arg2 resultCode:(int *)arg3 error:(id *)arg4;
+ (BOOL)deleteDatabaseAtURL:(id)arg1 reason:(id)arg2 preserveCopy:(BOOL)arg3;
+ (id)virtualFilesystemModule;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_assertNoActiveStatements;
- (BOOL)_executeSQL:(id)arg1 cache:(BOOL)arg2 error:(id *)arg3 bindingHandler:(CDUnknownBlockType)arg4 enumerationHandler:(CDUnknownBlockType)arg5;
- (BOOL)_integerValueForPragma:(id)arg1 databaseName:(id)arg2 value:(long long *)arg3 error:(id *)arg4;
- (BOOL)_prepareStatementForSQL:(id)arg1 cache:(BOOL)arg2 error:(id *)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)_resetStatement:(struct sqlite3_stmt *)arg1 finalize:(BOOL)arg2;
- (id)_schemaForDatabaseWithName:(id)arg1 error:(id *)arg2;
- (id)_schemaForIndexWithName:(id)arg1 database:(id)arg2 error:(id *)arg3;
- (id)_schemaForTableWithName:(id)arg1 database:(id)arg2 error:(id *)arg3;
- (BOOL)_setPragma:(id)arg1 integerValue:(long long)arg2 withDatabaseName:(id)arg3 error:(id *)arg4;
- (struct sqlite3_stmt *)_statementForSQL:(id)arg1 cache:(BOOL)arg2 error:(id *)arg3;
- (void)accessDatabaseUsingBlock:(CDUnknownBlockType)arg1;
- (BOOL)attachDatabaseWithName:(id)arg1 fileURL:(id)arg2 error:(id *)arg3;
- (BOOL)columnIsNullable:(id)arg1 inTable:(id)arg2 error:(id *)arg3;
- (void)dealloc;
- (BOOL)detachDatabaseWithName:(id)arg1 error:(id *)arg2;
- (id)dumpSchemaWithError:(id *)arg1;
- (BOOL)enableIncrementalAutovacuumWithError:(id *)arg1;
- (BOOL)executeSQL:(id)arg1 error:(id *)arg2;
- (BOOL)executeSQL:(id)arg1 error:(id *)arg2 bindingHandler:(CDUnknownBlockType)arg3 enumerationHandler:(CDUnknownBlockType)arg4;
- (BOOL)executeSQL:(id)arg1 error:(id *)arg2 retryIfBusy:(BOOL)arg3;
- (BOOL)executeUncachedSQL:(id)arg1 error:(id *)arg2 bindingHandler:(CDUnknownBlockType)arg3 enumerationHandler:(CDUnknownBlockType)arg4;
- (BOOL)foreignKeyExistsFromTable:(id)arg1 column:(id)arg2 toTable:(id)arg3 column:(id)arg4 error:(id *)arg5;
- (id)getLastErrorWithResultCode:(int)arg1;
- (BOOL)incrementalVacuumDatabaseIfNeeded:(id)arg1 error:(id *)arg2;
- (id)initWithDatabaseURL:(id)arg1;
- (BOOL)isDatabaseWithNameAttached:(id)arg1;
- (id)lastInsertRowID;
- (void)onCommit:(CDUnknownBlockType)arg1 orRollback:(CDUnknownBlockType)arg2;
- (int)openWithError:(id *)arg1;
- (BOOL)performTransactionWithType:(long long)arg1 error:(id *)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (BOOL)setUserVersion:(long long)arg1 withDatabaseName:(id)arg2 error:(id *)arg3;
- (BOOL)table:(id)arg1 hasColumnWithName:(id)arg2 error:(id *)arg3;
- (id)typeOfColumn:(id)arg1 inTable:(id)arg2 error:(id *)arg3;
- (long long)userVersionWithDatabaseName:(id)arg1 error:(id *)arg2;
- (BOOL)validateForeignKeysForTable:(id)arg1 databaseName:(id)arg2 error:(id *)arg3;

@end

