//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class HDSQLiteStatementCache, HDSQLiteVFS, NSError, NSMutableArray, NSMutableDictionary, NSNumber, NSString, NSURL;
@protocol HDSQLiteDatabaseDelegate;

@interface HDSQLiteDatabase : NSObject
{
    struct sqlite3 *_db;
    BOOL _isInTransaction;
    BOOL _requiresRollback;
    long long _transactionType;
    NSMutableDictionary *_attachedDatabaseURLsByName;
    _Atomic BOOL _transactionInterruptRequested;
    BOOL _isHandlingTransactionEnd;
    NSMutableArray *_beforeCommitBlocks;
    NSMutableArray *_onCommitBlocks;
    NSMutableArray *_onRollbackBlocks;
    struct os_unfair_lock_s _interruptionLock;
    BOOL _writer;
    BOOL _checkpointRequired;
    int _corruptionResultCode;
    NSURL *_fileURL;
    HDSQLiteVFS *_virtualFileSystem;
    NSString *_fileProtectionType;
    id<HDSQLiteDatabaseDelegate> _delegate;
    long long _cacheScope;
    HDSQLiteStatementCache *_statementCache;
    NSError *_corruptionError;
}

@property (nonatomic) long long cacheScope; // @synthesize cacheScope=_cacheScope;
@property (nonatomic) BOOL checkpointRequired; // @synthesize checkpointRequired=_checkpointRequired;
@property (readonly, copy, nonatomic) NSError *corruptionError; // @synthesize corruptionError=_corruptionError;
@property (readonly, nonatomic) int corruptionResultCode; // @synthesize corruptionResultCode=_corruptionResultCode;
@property (weak, nonatomic) id<HDSQLiteDatabaseDelegate> delegate; // @synthesize delegate=_delegate;
@property (copy, nonatomic) NSString *fileProtectionType; // @synthesize fileProtectionType=_fileProtectionType;
@property (readonly, copy, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property (readonly, copy, nonatomic) NSNumber *lastInsertRowID;
@property (readonly, nonatomic, getter=isOpen) BOOL open;
@property (readonly, nonatomic) HDSQLiteStatementCache *statementCache; // @synthesize statementCache=_statementCache;
@property BOOL transactionInterruptRequested;
@property (strong, nonatomic) HDSQLiteVFS *virtualFileSystem; // @synthesize virtualFileSystem=_virtualFileSystem;
@property (nonatomic, getter=isWriter) BOOL writer; // @synthesize writer=_writer;

+ (int)_copyContentsFromDatabase:(struct sqlite3 *)arg1 toDatabase:(struct sqlite3 *)arg2;
+ (BOOL)databaseSchemas:(id)arg1 containTable:(id)arg2;
+ (id)highFrequencyDatabaseURLWithProfileDirectoryPath:(id)arg1;
+ (id)mainDatabaseURLWithProfileDirectoryPath:(id)arg1;
+ (id)memoryDatabaseFromURL:(id)arg1;
+ (id)protectedDatabaseURLWithProfileDirectoryPath:(id)arg1;
- (void).cxx_destruct;
- (BOOL)_executeSQL:(id)arg1 cache:(BOOL)arg2 error:(id *)arg3 bindingHandler:(CDUnknownBlockType)arg4 enumerationHandler:(CDUnknownBlockType)arg5;
- (BOOL)_executeStatementWithError:(id *)arg1 statementProvider:(CDUnknownBlockType)arg2 bindingHandler:(CDUnknownBlockType)arg3 enumerationHandler:(CDUnknownBlockType)arg4;
- (BOOL)_executeUncachedSQL:(id)arg1 error:(id *)arg2;
- (BOOL)_executeUncachedSQL:(id)arg1 error:(id *)arg2 retryIfBusy:(BOOL)arg3 interruptible:(BOOL)arg4;
- (BOOL)_handleInterruptionWithError:(id *)arg1;
- (BOOL)_integerValueForPragma:(id)arg1 databaseName:(id)arg2 value:(long long *)arg3 error:(id *)arg4;
- (int)_openForWriting:(BOOL)arg1 additionalFlags:(int)arg2 error:(id *)arg3;
- (id)_schemaForDatabaseWithName:(id)arg1 error:(id *)arg2;
- (id)_schemaForIndexWithName:(id)arg1 database:(id)arg2 error:(id *)arg3;
- (id)_schemaForTableWithName:(id)arg1 database:(id)arg2 error:(id *)arg3;
- (BOOL)_setPragma:(id)arg1 integerValue:(long long)arg2 withDatabaseName:(id)arg3 error:(id *)arg4;
- (id)_statementCache;
- (BOOL)_stepStatement:(struct sqlite3_stmt *)arg1 hasRow:(BOOL *)arg2 error:(id *)arg3;
- (id)_tableNamesForDatabaseWithName:(id)arg1 error:(id *)arg2;
- (BOOL)_verifyDatabaseOpenAndReturnError:(id *)arg1;
- (void)accessDatabaseUsingBlock:(CDUnknownBlockType)arg1;
- (BOOL)accessHFDForReadingWithError:(id *)arg1 block:(CDUnknownBlockType)arg2;
- (BOOL)accessHFDForWritingWithError:(id *)arg1 block:(CDUnknownBlockType)arg2;
- (BOOL)attachDatabaseWithName:(id)arg1 fileURL:(id)arg2 error:(id *)arg3;
- (BOOL)attachProtectedDatabaseWithURL:(id)arg1 error:(id *)arg2;
- (void)beforeCommit:(CDUnknownBlockType)arg1;
- (void)close;
- (BOOL)columnIsNullable:(id)arg1 inTable:(id)arg2 error:(id *)arg3;
- (BOOL)correlationCountForDataEntitySubclassTable:(id)arg1 count:(long long *)arg2 error:(id *)arg3;
- (void)dealloc;
- (BOOL)deleteDataEntitySubclassTable:(id)arg1 intermediateTables:(id)arg2 error:(id *)arg3;
- (BOOL)deleteDataEntitySubclassTablesIfExist:(id)arg1 intermediateTables:(id)arg2 error:(id *)arg3;
- (BOOL)deleteRowsFromDataEntitySubclassTable:(id)arg1 intermediateTables:(id)arg2 error:(id *)arg3;
- (BOOL)detachDatabaseWithName:(id)arg1 error:(id *)arg2;
- (BOOL)detachProtectedDatabaseWithError:(id *)arg1;
- (id)dumpSchemaWithError:(id *)arg1;
- (BOOL)enableIncrementalAutovacuumForDatabaseWithName:(id)arg1 error:(id *)arg2;
- (BOOL)executeCachedStatementForKey:(const char *)arg1 error:(id *)arg2 SQLGenerator:(CDUnknownBlockType)arg3 bindingHandler:(CDUnknownBlockType)arg4 enumerationHandler:(CDUnknownBlockType)arg5;
- (BOOL)executeSQL:(id)arg1 error:(id *)arg2 bindingHandler:(CDUnknownBlockType)arg3 enumerationHandler:(CDUnknownBlockType)arg4;
- (BOOL)executeSQLStatements:(id)arg1 error:(id *)arg2;
- (BOOL)executeUncachedSQL:(id)arg1 error:(id *)arg2;
- (BOOL)executeUncachedSQL:(id)arg1 error:(id *)arg2 bindingHandler:(CDUnknownBlockType)arg3 enumerationHandler:(CDUnknownBlockType)arg4;
- (BOOL)foreignKeyExistsFromTable:(id)arg1 column:(id)arg2 toTable:(id)arg3 column:(id)arg4 error:(id *)arg5;
- (int)getChangesCount;
- (id)getLastErrorWithResultCode:(int)arg1;
- (BOOL)incrementalVacuumDatabaseIfNeeded:(id)arg1 error:(id *)arg2;
- (id)initMemoryDatabase;
- (id)initWithDatabaseURL:(id)arg1;
- (BOOL)isDatabaseWithNameAttached:(id)arg1;
- (BOOL)isProtectedDatabaseAttached;
- (void)onCommit:(CDUnknownBlockType)arg1 orRollback:(CDUnknownBlockType)arg2;
- (int)openForReadingWithError:(id *)arg1;
- (int)openWithError:(id *)arg1;
- (BOOL)performIntegrityCheckOnDatabase:(id)arg1 error:(id *)arg2 integrityErrorHandler:(CDUnknownBlockType)arg3;
- (BOOL)performTransactionWithType:(long long)arg1 error:(id *)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (id)queryPlanForSQL:(id)arg1 error:(id *)arg2;
- (void)requireRollback;
- (BOOL)setUserVersion:(long long)arg1 withDatabaseName:(id)arg2 error:(id *)arg3;
- (id)statementsForDeleteRowsFromDataEntitySubclassTable:(id)arg1 intermediateTables:(id)arg2 error:(id *)arg3;
- (BOOL)table:(id)arg1 hasColumnWithName:(id)arg2 error:(id *)arg3;
- (id)typeOfColumn:(id)arg1 inTable:(id)arg2 error:(id *)arg3;
- (long long)userVersionWithDatabaseName:(id)arg1 error:(id *)arg2;
- (long long)validateForeignKeysForTable:(id)arg1 databaseName:(id)arg2 error:(id *)arg3;

@end

