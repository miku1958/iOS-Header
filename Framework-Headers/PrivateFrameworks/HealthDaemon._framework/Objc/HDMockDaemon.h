//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <HealthDaemon/HDHealthDaemon-Protocol.h>

@class HDAuthorizationManager, HDBackgroundTaskScheduler, HDContentProtectionManager, HDDataProvenanceManager, HDDatabasePruningManager, HDDeviceManager, HDNanoSyncManager, HDPluginManager, HDProcessStateManager, HDSourceManager, HDUnitPreferencesManager, HDUserCharacteristicsManager, HDWorkoutManager, NSString;
@protocol HDDaemonDeviceManager, HDHealthDataCollectionManager, HDHealthDataManager, HDHealthDatabase, HDHealthMetadataManager, HDSyncEngine, HDViewOnWakeService;

@interface HDMockDaemon : NSObject <HDHealthDaemon>
{
    HDProcessStateManager *processStateManager;
    HDDataProvenanceManager *dataProvenanceManager;
    HDUnitPreferencesManager *unitPreferencesManager;
    HDNanoSyncManager *nanoSyncManager;
    HDAuthorizationManager *authorizationManager;
    HDWorkoutManager *workoutManager;
    id<HDViewOnWakeService> viewOnWakeService;
    HDDatabasePruningManager *databasePruningManager;
    id<HDHealthDatabase> _healthDatabase;
    id<HDHealthDataCollectionManager> _healthDataCollectionManager;
    id<HDHealthDataManager> _healthDataManager;
    id<HDSyncEngine> _syncEngine;
    HDSourceManager *_healthSourceManager;
    HDDeviceManager *_healthSourceDeviceManager;
    id<HDHealthMetadataManager> _healthMetadataManager;
    id<HDDaemonDeviceManager> _healthDeviceManager;
    HDUserCharacteristicsManager *_userCharacteristicsManager;
    HDContentProtectionManager *_contentProtectionManager;
    HDBackgroundTaskScheduler *_backgroundTaskScheduler;
    HDPluginManager *_pluginManager;
}

@property (readonly, nonatomic) HDAuthorizationManager *authorizationManager; // @synthesize authorizationManager;
@property (strong) HDBackgroundTaskScheduler *backgroundTaskScheduler; // @synthesize backgroundTaskScheduler=_backgroundTaskScheduler;
@property (strong) HDContentProtectionManager *contentProtectionManager; // @synthesize contentProtectionManager=_contentProtectionManager;
@property (readonly) HDDataProvenanceManager *dataProvenanceManager; // @synthesize dataProvenanceManager;
@property (readonly, nonatomic) HDDatabasePruningManager *databasePruningManager; // @synthesize databasePruningManager;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (strong) id<HDHealthDataCollectionManager> healthDataCollectionManager; // @synthesize healthDataCollectionManager=_healthDataCollectionManager;
@property (strong) id<HDHealthDataManager> healthDataManager; // @synthesize healthDataManager=_healthDataManager;
@property (strong) id<HDHealthDatabase> healthDatabase; // @synthesize healthDatabase=_healthDatabase;
@property (strong) id<HDDaemonDeviceManager> healthDeviceManager; // @synthesize healthDeviceManager=_healthDeviceManager;
@property (strong) id<HDHealthMetadataManager> healthMetadataManager; // @synthesize healthMetadataManager=_healthMetadataManager;
@property (strong) HDDeviceManager *healthSourceDeviceManager; // @synthesize healthSourceDeviceManager=_healthSourceDeviceManager;
@property (strong) HDSourceManager *healthSourceManager; // @synthesize healthSourceManager=_healthSourceManager;
@property (readonly) NSString *homeDirectoryPath;
@property (readonly) BOOL isAppleWatch;
@property (readonly, nonatomic) HDNanoSyncManager *nanoSyncManager; // @synthesize nanoSyncManager;
@property (strong) HDPluginManager *pluginManager; // @synthesize pluginManager=_pluginManager;
@property (readonly) HDProcessStateManager *processStateManager; // @synthesize processStateManager;
@property (readonly) Class superclass;
@property (strong) id<HDSyncEngine> syncEngine; // @synthesize syncEngine=_syncEngine;
@property (readonly, nonatomic) HDUnitPreferencesManager *unitPreferencesManager; // @synthesize unitPreferencesManager;
@property (strong) HDUserCharacteristicsManager *userCharacteristicsManager; // @synthesize userCharacteristicsManager=_userCharacteristicsManager;
@property (strong, nonatomic) id<HDViewOnWakeService> viewOnWakeService; // @synthesize viewOnWakeService;
@property (strong, nonatomic) HDWorkoutManager *workoutManager; // @synthesize workoutManager;

- (void).cxx_destruct;
- (void)beginTransaction:(id)arg1;
- (void)didUpdateActiveWorkoutServers;
- (void)endTransaction:(id)arg1;
- (BOOL)hasAnyActiveWorkouts;
- (void)invalidateActivityAlertSuppressionForIdentifier:(id)arg1;
- (void)pauseAllActiveWorkoutsWithCompletion:(CDUnknownBlockType)arg1;
- (void)performBlockWithPowerAssertionIdentifier:(id)arg1 transactionName:(id)arg2 powerAssertionInterval:(double)arg3 block:(CDUnknownBlockType)arg4;
- (BOOL)persistAndNotifyDataObject:(id)arg1 device:(id)arg2 error:(id *)arg3;
- (BOOL)persistAndNotifyDataObjects:(id)arg1 device:(id)arg2 error:(id *)arg3;
- (void)registerForDaemonReady:(id)arg1;
- (void)registerForLaunchNotification:(const char *)arg1;
- (void)setDataCollectionOptions:(id)arg1 forKey:(id)arg2 type:(id)arg3 clientUUID:(id)arg4;
- (void)setPairedWatchBundleIdentifierProvider:(id)arg1;
- (void)suppressActivityAlertsForIdentifier:(id)arg1 suppressionReason:(long long)arg2 timeoutUntilDate:(id)arg3;
- (void)syncImmediatelyWithReason:(id)arg1;
- (void)terminate;
- (void)unregisterForLaunchNotification:(const char *)arg1;
- (void)updateActivityCacheForNewWorkoutSamples;

@end

