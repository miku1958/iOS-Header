//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <Navigation/MNTimeballInternalProvider-Protocol.h>

@class MNObserverHashTable, MNTimeballCache, MNTimeballLocationManager, MNTimeballRoutingProvider, MNXPCTransactionCounter, NSDate, NSMutableDictionary, NSString;
@protocol MNRouteRefreshPolicySchedulerTimedActivity, OS_dispatch_queue, OS_dispatch_source;

@interface MNRouteRefreshPolicyScheduler : NSObject <MNTimeballInternalProvider>
{
    NSMutableDictionary *_refreshPolicyByDestination;
    NSMutableDictionary *_optionsByDestination;
    NSMutableDictionary *_auditTokenByDestination;
    struct os_unfair_lock_s _lock;
    MNTimeballRoutingProvider *_routingProvider;
    NSDate *_deferredRefreshDate;
    NSObject<OS_dispatch_queue> *_handlerQueue;
    NSObject<OS_dispatch_source> *_deferTimer;
    MNTimeballCache *_cache;
    MNTimeballLocationManager *_locationManager;
    MNXPCTransactionCounter *_transactionCounter;
    MNObserverHashTable *_observers;
    CDUnknownBlockType _refreshCompletion;
    double _tolerance;
    id<MNRouteRefreshPolicySchedulerTimedActivity> _timedActivity;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (copy, nonatomic) CDUnknownBlockType refreshCompletion; // @synthesize refreshCompletion=_refreshCompletion;
@property (readonly) Class superclass;
@property (strong, nonatomic) id<MNRouteRefreshPolicySchedulerTimedActivity> timedActivity; // @synthesize timedActivity=_timedActivity;
@property (nonatomic) double tolerance; // @synthesize tolerance=_tolerance;

- (void).cxx_destruct;
- (void)_deferRefreshForScheduledDestinationsAfter:(id)arg1;
- (void)_enterActiveWorkload;
- (void)_handleCompletionOfRefresh;
- (void)_handleRefreshingCacheEntries:(id)arg1 atDate:(id)arg2;
- (void)_handleRefreshingCacheEntries:(id)arg1 atDate:(id)arg2 userLocation:(id)arg3;
- (void)_handleSchedulingThisDestinationAndRefreshAllDestinations:(id)arg1 nextRefreshDate:(id)arg2;
- (void)_handleSchedulingUpdatesForDestination:(id)arg1 options:(long long)arg2 policy:(unsigned long long)arg3 auditToken:(id)arg4;
- (void)_leaveActiveWorkload;
- (id)_newActivityFromRefreshPolicyRules:(id)arg1;
- (void)_performDeferredRefresh;
- (void)_refreshAllDestinationsAtDate:(id)arg1;
- (id)_refreshPolicyForDestination:(id)arg1;
- (void)_scheduleNextRefreshDateForDestination:(id)arg1 routeUpdate:(id)arg2 fromDate:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (double)_timeIntervalForRefreshOfDestination:(id)arg1 routeUpdate:(id)arg2 atDate:(id)arg3;
- (void)_updateNextRefreshDate:(id)arg1 destination:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)addObserver:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)initWithRoutingProvider:(id)arg1 cache:(id)arg2 locationManager:(id)arg3;
- (void)refreshScheduledDestinations;
- (void)removeObserver:(id)arg1;
- (void)scheduleUpdatesForDestination:(id)arg1 options:(long long)arg2 policy:(unsigned long long)arg3 auditToken:(id)arg4;
- (void)unscheduleUpdateForDestination:(id)arg1;

@end

