//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <FrontBoard/FBProcess.h>

#import <FrontBoard/BKSProcessDelegate-Protocol.h>

@class BKSProcess, BKSProcessAssertion, BSMachPortSendRight, FBApplicationInfo, FBApplicationProcessExitContext, FBProcessCPUStatistics, FBProcessExecutionContext, FBProcessWatchdog, FBSProcessWatchdogPolicy, NSMutableArray, NSMutableSet, NSString;
@protocol FBApplicationProcessDelegate;

@interface FBApplicationProcess : FBProcess <BKSProcessDelegate>
{
    FBApplicationInfo *_applicationInfo;
    FBApplicationProcessExitContext *_exitContext;
    FBProcessExecutionContext *_executionContext;
    NSMutableSet *_allowedLockedFilePaths;
    NSMutableArray *_queuedSceneBlocksToExecuteAfterLaunch;
    NSMutableArray *_queue_terminateRequestCompletionBlocks;
    BOOL _bootstrapped;
    BOOL _bootstrapFailed;
    BOOL _performedLaunch;
    BOOL _finishedLaunching;
    BOOL _pendingExit;
    BOOL _beingDebugged;
    BSMachPortSendRight *_gsEventPort;
    FBProcessWatchdog *_watchdog;
    FBSProcessWatchdogPolicy *_sceneCreateWatchdogPolicy;
    long long _terminationReason;
    int _defaultSceneSuspendType;
    FBProcessCPUStatistics *_cpuStatistics;
    double _execTime;
    BKSProcess *_bksProcess;
    BKSProcessAssertion *_launchProcessAssertion;
    BKSProcessAssertion *_continuousProcessAssertion;
    BOOL _supportsBackgroundTaskAssertions;
    BOOL _supportsSuspendOnLock;
    BOOL _recordingAudio;
    BOOL _nowPlayingWithAudio;
    BOOL _connectedToExternalAccessory;
}

@property (readonly, strong, nonatomic) FBApplicationInfo *applicationInfo; // @synthesize applicationInfo=_applicationInfo;
@property (nonatomic, getter=isBeingDebugged) BOOL beingDebugged; // @synthesize beingDebugged=_beingDebugged;
@property (nonatomic, getter=isConnectedToExternalAccessory) BOOL connectedToExternalAccessory; // @synthesize connectedToExternalAccessory=_connectedToExternalAccessory;
@property (readonly, strong, nonatomic, getter=_queue_cpuStatistics) FBProcessCPUStatistics *cpuStatistics; // @synthesize cpuStatistics=_cpuStatistics;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic, getter=_queue_defaultSuspendType) int defaultSuspendType;
@property (nonatomic) id<FBApplicationProcessDelegate> delegate; // @dynamic delegate;
@property (readonly, copy) NSString *description;
@property (readonly, nonatomic) double elapsedCPUTime;
@property (readonly, nonatomic, getter=_queue_execTime) double execTime;
@property (readonly, copy, nonatomic) FBProcessExecutionContext *executionContext; // @synthesize executionContext=_executionContext;
@property (readonly, strong, nonatomic) FBApplicationProcessExitContext *exitContext;
@property (readonly, nonatomic) BOOL finishedLaunching; // @synthesize finishedLaunching=_finishedLaunching;
@property (readonly) unsigned long long hash;
@property (nonatomic, getter=isNowPlayingWithAudio) BOOL nowPlayingWithAudio; // @synthesize nowPlayingWithAudio=_nowPlayingWithAudio;
@property (readonly, nonatomic, getter=isPendingExit) BOOL pendingExit; // @synthesize pendingExit=_pendingExit;
@property (nonatomic, getter=isRecordingAudio) BOOL recordingAudio; // @synthesize recordingAudio=_recordingAudio;
@property (readonly) Class superclass;
@property (readonly, nonatomic, getter=_queue_supportsBackgroundTaskAssertions) BOOL supportsBackgroundTaskAssertions; // @synthesize supportsBackgroundTaskAssertions=_supportsBackgroundTaskAssertions;
@property (readonly, nonatomic, getter=_queue_supportsSuspendOnLock) BOOL supportsSuspendOnLock; // @synthesize supportsSuspendOnLock=_supportsSuspendOnLock;
@property (readonly, nonatomic, getter=_queue_terminationReason) long long terminationReason;

+ (void)deleteAllJobs;
- (id)GSEventPort;
- (id)_applicationWorkspace;
- (id)_createWorkspace;
- (long long)_exceptionCodeForKillReason:(int)arg1;
- (void)_queue_addAllowedLockedFilePath:(id)arg1;
- (int)_queue_bksVisibilityForVisibility:(int)arg1;
- (BOOL)_queue_bootstrapAndExecWithContext:(id)arg1;
- (int)_queue_calculateDefaultSceneSuspendType;
- (void)_queue_callExitObservers;
- (void)_queue_cancelWatchdogTimer;
- (BOOL)_queue_consideredUnderLock;
- (void)_queue_doGracefulKillWithDeliveryConfirmation:(CDUnknownBlockType)arg1;
- (void)_queue_dropContinuousProcessAssertion;
- (void)_queue_dropLaunchProcessAssertion;
- (int)_queue_effectiveVisibilityForSceneSettings:(id)arg1;
- (int)_queue_effectiveVisibilityForVisibility:(int)arg1;
- (int)_queue_effectiveVisibilityForVisibility:(int)arg1 underLock:(BOOL)arg2;
- (void)_queue_enumerateApplicationObserversWithBlock:(CDUnknownBlockType)arg1;
- (void)_queue_executeBlockAfterLaunchCompletes:(CDUnknownBlockType)arg1;
- (void)_queue_executeKillForRequest:(id)arg1;
- (void)_queue_executeLaunchCompletionBlocks;
- (void)_queue_executeTerminateRequestCompletionBlocksIfNecessaryForSucccess:(BOOL)arg1;
- (void)_queue_finishLaunch;
- (id)_queue_internalDebugEnvironmentVariables;
- (void)_queue_invalidateBKSProcess;
- (BOOL)_queue_isAllowedLockedFilePath:(id)arg1 standardizedPath:(out id *)arg2;
- (BOOL)_queue_isSystemApplication;
- (void)_queue_killForReason:(long long)arg1 andReport:(BOOL)arg2 withDescription:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_queue_killWithSignal:(int)arg1;
- (void)_queue_launchIfNecessary;
- (id)_queue_lockedFilePathsIgnoringAllowed;
- (id)_queue_name;
- (id)_queue_newWatchdogForContext:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (unsigned long long)_queue_noteExitedForForceQuit:(BOOL)arg1;
- (int)_queue_ourTaskStateForBKSTaskState:(int)arg1;
- (void)_queue_processDidExit;
- (void)_queue_processReallyDidExit;
- (void)_queue_sceneLifecycleStateChanged:(id)arg1;
- (void)_queue_sceneNeedsGracefulExit:(id)arg1 withDeliveryConfirmation:(CDUnknownBlockType)arg2;
- (void)_queue_setSupportsBackgroundTaskAssertions:(BOOL)arg1;
- (void)_queue_setSupportsSuspendOnLock:(BOOL)arg1;
- (void)_queue_setTaskState:(int)arg1;
- (void)_queue_setVisibility:(int)arg1;
- (void)_queue_setupBKSProcess;
- (BOOL)_queue_shouldWatchdogWithDeclineReason:(id *)arg1;
- (void)_queue_startWatchdogTimerForContext:(id)arg1;
- (BOOL)_queue_supportsContinuousBackgroundMode;
- (void)_queue_takeLaunchProcessAssertion;
- (void)_queue_terminateWithRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_queue_waitToExecOrExit;
- (void)_terminateWithRequest:(id)arg1 forWatchdog:(id)arg2;
- (BOOL)_watchdog:(id)arg1 shouldTerminateWithDeclineReason:(out id *)arg2;
- (id)_watchdog:(id)arg1 terminationRequestForViolatedProvision:(id)arg2 error:(id)arg3;
- (id)_watchdogProvider;
- (long long)_watchdogReportType;
- (void)_watchdogStarted:(id)arg1;
- (void)_watchdogStopped:(id)arg1;
- (id)_workspace;
- (id)_workspaceServer;
- (BOOL)bootstrapWithContext:(id)arg1;
- (void)dealloc;
- (void)executeBlockAfterLaunchCompletes:(CDUnknownBlockType)arg1;
- (id)initWithApplicationInfo:(id)arg1 callOutQueue:(id)arg2;
- (id)initWithApplicationInfo:(id)arg1 handle:(id)arg2 callOutQueue:(id)arg3;
- (id)initWithBundleID:(id)arg1 pid:(int)arg2 callOutQueue:(id)arg3;
- (BOOL)isApplicationProcess;
- (BOOL)isSystemApplicationProcess;
- (void)killForReason:(long long)arg1 andReport:(BOOL)arg2 withDescription:(id)arg3;
- (void)killForReason:(long long)arg1 andReport:(BOOL)arg2 withDescription:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)launchIfNecessary;
- (void)noteWorkspaceLocked:(BOOL)arg1;
- (void)process:(id)arg1 isBeingDebugged:(BOOL)arg2;
- (void)process:(id)arg1 taskStateDidChange:(int)arg2;
- (void)processWillExpire:(id)arg1;
- (void)setFinishedLaunching:(BOOL)arg1;
- (void)setPendingExit:(BOOL)arg1;
- (void)stop;

@end

