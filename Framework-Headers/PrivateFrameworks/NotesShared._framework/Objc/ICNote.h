//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <NotesShared/ICCloudSyncingObject.h>

#import <NotesShared/ICCloudObject-Protocol.h>
#import <NotesShared/ICSearchIndexableNote-Protocol.h>
#import <NotesShared/NSTextStorageDelegate-Protocol.h>
#import <NotesShared/TTTextStorageDelegate-Protocol.h>

@class ICAccount, ICGroup, ICNoteData, NSDate, NSMutableSet, NSNumber, NSSet, NSString, NSUUID, TTTextStorage, TTVectorMultiTimestamp;

@interface ICNote : ICCloudSyncingObject <ICCloudObject, ICSearchIndexableNote, TTTextStorageDelegate, NSTextStorageDelegate>
{
    TTTextStorage *_textStorage;
    NSMutableSet *_connectedSockets;
    NSMutableSet *_connectedDevices;
    NSUUID *_uuid;
    BOOL needsRefresh;
    TTVectorMultiTimestamp *archivedTimestamp;
}

@property (strong, nonatomic) ICAccount *account; // @dynamic account;
@property (copy, nonatomic) TTVectorMultiTimestamp *archivedTimestamp; // @synthesize archivedTimestamp;
@property (strong, nonatomic) NSSet *attachments; // @dynamic attachments;
@property (strong, nonatomic) NSDate *creationDate; // @dynamic creationDate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *description;
@property (strong, nonatomic) NSSet *folders; // @dynamic folders;
@property (strong, nonatomic) NSDate *foldersModificationDate; // @dynamic foldersModificationDate;
@property (strong, nonatomic) ICGroup *group; // @dynamic group;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) NSNumber *integerId; // @dynamic integerId;
@property (strong, nonatomic) NSString *legacyContentHashAtImport; // @dynamic legacyContentHashAtImport;
@property (strong, nonatomic) NSString *legacyImportDeviceIdentifier; // @dynamic legacyImportDeviceIdentifier;
@property (strong, nonatomic) NSString *legacyManagedObjectIDURIRepresentation; // @dynamic legacyManagedObjectIDURIRepresentation;
@property (strong, nonatomic) NSDate *legacyModificationDateAtImport; // @dynamic legacyModificationDateAtImport;
@property (strong, nonatomic) NSNumber *legacyNoteIntegerId; // @dynamic legacyNoteIntegerId;
@property (strong, nonatomic) NSNumber *legacyNoteWasPlainText; // @dynamic legacyNoteWasPlainText;
@property (strong, nonatomic) NSDate *modificationDate; // @dynamic modificationDate;
@property (nonatomic) BOOL needsRefresh; // @synthesize needsRefresh;
@property (strong, nonatomic) ICNoteData *noteData; // @dynamic noteData;
@property (strong, nonatomic) NSNumber *noteHasChanges; // @dynamic noteHasChanges;
@property (strong, nonatomic) NSString *snippet; // @dynamic snippet;
@property (readonly) Class superclass;
@property (readonly) Class superclass;
@property (readonly) Class superclass;
@property (strong, nonatomic) TTTextStorage *textStorage;
@property (strong, nonatomic) NSString *thumbnailAttachmentIdentifier; // @dynamic thumbnailAttachmentIdentifier;
@property (strong, nonatomic) NSString *title; // @dynamic title;
@property (strong, nonatomic) NSNumber *type; // @dynamic type;

+ (id)allCloudObjects;
+ (id)attributedStringFromHTMLString:(id)arg1;
+ (id)attributedStringFromHTMLString:(id)arg1 readerDelegate:(id)arg2;
+ (id)defaultTitleForEmptyNote;
+ (id)existingCloudObjectForRecordID:(id)arg1;
+ (void)fixDashedListsInAttributedString:(id)arg1;
+ (void)fixFontsInAttributedString:(id)arg1;
+ (void)fixUnwantedCharactersInAttributedString:(id)arg1;
+ (id)hexStringForColor:(struct UIColor *)arg1;
+ (id)htmlObjectAttributesForAttachmentWithContentID:(id)arg1;
+ (id)htmlStringByFixingDashedListsInHTMLString:(id)arg1;
+ (id)htmlStringFromAttributedString:(id)arg1 attachmentConversionHandler:(CDUnknownBlockType)arg2;
+ (BOOL)isDefaultColor:(struct UIColor *)arg1;
+ (unsigned long long)maxNoteTextLength;
+ (id)mutableAttributedStringFromHTMLString:(id)arg1;
+ (id)mutableAttributedStringFromHTMLString:(id)arg1 readerDelegate:(id)arg2;
+ (id)newCloudObjectForRecord:(id)arg1;
+ (id)recordType;
+ (id)tagDictionariesForAttributes:(id)arg1 attachmentConversionHandler:(CDUnknownBlockType)arg2;
+ (id)tagDictionaryForWrapperAroundParagraphStyle:(id)arg1;
- (void).cxx_destruct;
- (BOOL)allowsNewTextLength:(unsigned long long)arg1;
- (id)appURLForIndexerContext:(id)arg1;
- (id)attachmentActivityItemsForSharing;
- (BOOL)attachmentExceedsMaxSizeAllowed:(unsigned long long)arg1;
- (id)attachmentForWebThumbnail;
- (id)attachmentFromLegacyAttachmentFileWrapper:(id)arg1;
- (id)attachmentFromObject:(id)arg1 createIfNecessary:(BOOL)arg2;
- (id)attachmentFromRemoteFileWrapper:(id)arg1;
- (id)attachmentFromStandardFileWrapper:(id)arg1;
- (id)attachmentWithIdentifier:(id)arg1;
- (BOOL)canAddAttachment;
- (BOOL)canAddAttachments:(unsigned long long)arg1;
- (id)connectedDevices;
- (id)connectedSockets;
- (id)contentInfoText;
- (void)deduplicateSelfAndCreateNewObjectFromRecord:(id)arg1;
- (void)deleteFromLocalDatabase;
- (void)deleteFromNoteContextUsingIndexerContext:(id)arg1;
- (void)didChangeNoteText;
- (void)didTurnIntoFault;
- (void)fetchThumbnailImageWithMinSize:(struct CGSize)arg1 scale:(double)arg2 cache:(id)arg3 cacheKey:(id)arg4 processingBlock:(CDUnknownBlockType)arg5 completionBlock:(CDUnknownBlockType)arg6;
- (void)filterAttachmentsInTextStorage:(id)arg1 range:(struct _NSRange)arg2;
- (void)fixBrokenReferences;
- (id)folder;
- (BOOL)hasAllMandatoryFields;
- (BOOL)hasThumbnailImage;
- (id)htmlString;
- (id)htmlStringWithAttachmentConversionHandler:(CDUnknownBlockType)arg1;
- (id)htmlStringWithAttachments:(BOOL)arg1;
- (BOOL)isDeletedOrInTrash;
- (BOOL)isEditable;
- (BOOL)isEmpty;
- (BOOL)isHiddenFromSearch;
- (BOOL)isInICloudAccount;
- (BOOL)isVisible;
- (id)loggingDescriptionValues;
- (void)markForDeletion;
- (void)mergeDataFromRecord:(id)arg1;
- (void)mergeDataFromRecord:(id)arg1 withMergePolicy:(long long)arg2;
- (void)mergeFoldersFromRecord:(id)arg1;
- (long long)mergePolicyForRecord:(id)arg1;
- (unsigned long long)mergeWithNoteData:(id)arg1;
- (unsigned long long)mergeWithNoteDocument:(id)arg1;
- (id)noteAsPlainText;
- (id)noteAsPlainTextWithoutTitle;
- (id)noteContextForIndexerContext:(id)arg1;
- (unsigned long long)noteType;
- (id)objectIdentifier;
- (void)objectWasFetchedFromCloudWithRecord:(id)arg1;
- (id)objectsToBeDeletedBeforeThisObject;
- (struct _NSRange)rangeForAttachment:(id)arg1;
- (struct _NSRange)rangeForSnippet;
- (struct _NSRange)rangeForTitle:(BOOL *)arg1;
- (id)recordName;
- (id)recordZoneID;
- (void)refreshNoteTextFromDataStore;
- (void)regenerateSnippet;
- (void)regenerateTitle;
- (void)replaceWithDocument:(id)arg1;
- (BOOL)requiresLegacyTombstoneAfterDeletion;
- (void)resetUniqueIdentifier;
- (void)save;
- (void)saveNoteData;
- (id)searchIndexStringsOutHasAdditionalStrings:(BOOL *)arg1;
- (id)searchIndexableTitleUsingContentTextIfNecessary:(id)arg1;
- (BOOL)searchResultCanBeDeletedFromNoteContext;
- (unsigned long long)searchResultsSection;
- (id)searchableContentKeyPaths;
- (void)setFolder:(id)arg1;
- (void)setLegacyManagedObjectID:(id)arg1;
- (void)setNeedsInitialFetchFromCloud:(BOOL)arg1;
- (void)setNeedsSave;
- (void)setNoteType:(unsigned long long)arg1;
- (BOOL)shouldUpdateIndexForChangedValues:(id)arg1;
- (BOOL)supportsDeletionByTTL;
- (void)textStorage:(id)arg1 didProcessEditing:(unsigned long long)arg2 range:(struct _NSRange)arg3 changeInLength:(long long)arg4;
- (void)textStorage:(id)arg1 willProcessEditing:(unsigned long long)arg2 range:(struct _NSRange)arg3 changeInLength:(long long)arg4;
- (void)textStorageDidPerformUndo:(id)arg1;
- (id)threadUnsafeNewlyCreatedRecord;
- (struct UIImage *)thumbnailImageWithMinSize:(struct CGSize)arg1 scale:(double)arg2 imageScaling:(unsigned long long *)arg3 showAsFileIcon:(BOOL *)arg4 isMovie:(BOOL *)arg5 movieDuration:(CDStruct_198678f7 *)arg6;
- (void)unmarkForDeletion;
- (id)uuid;
- (long long)visibilityTestingType;
- (id)visibleAttachments;
- (void)willSave;

@end

