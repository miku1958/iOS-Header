//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <TrialServer/TRITaskQueueStateProviding-Protocol.h>
#import <TrialServer/TRITaskQueuing-Protocol.h>

@class TRIClient, TRIServerContext, _PASLock;
@protocol OS_dispatch_group, OS_dispatch_queue;

@interface TRITaskQueue : NSObject <TRITaskQueuing, TRITaskQueueStateProviding>
{
    _PASLock *_lock;
    TRIServerContext *_serverContext;
    NSObject<OS_dispatch_queue> *_opQueue;
    NSObject<OS_dispatch_group> *_opGroup;
    NSObject<OS_dispatch_queue> *_asyncQueue;
    TRIClient *_client;
}

- (void).cxx_destruct;
- (BOOL)_addTask:(id)arg1 options:(id)arg2 guardedData:(id)arg3;
- (id)_addTask:(id)arg1 options:(id)arg2 guardedData:(id)arg3 accumulatedNewTaskRecords:(id)arg4;
- (id)_addTask:(id)arg1 withDependencies:(id)arg2 guardedData:(id)arg3;
- (BOOL)_cancelDependenciesAndTaskWithId:(id)arg1 guardedData:(id)arg2;
- (BOOL)_cancelTask:(id)arg1 guardedData:(id)arg2;
- (BOOL)_cancelTaskWithId:(id)arg1 guardedData:(id)arg2 persistCancel:(BOOL)arg3;
- (id)_createOperationWithTask:(id)arg1 withId:(id)arg2 dependencies:(id)arg3 taskMap:(id)arg4;
- (void)_evaluateRunConditionsWithGuardedData:(id)arg1 shouldContinueWork:(BOOL *)arg2;
- (void)_finalizeTask:(id)arg1 withId:(id)arg2 runResult:(id)arg3;
- (BOOL)_isTaskWithId:(id)arg1 inTaskGroup:(id)arg2 runnableGivenCapabilities:(unsigned long long)arg3 atDate:(id)arg4 cachedRunnability:(id)arg5 visitedPath:(id)arg6 topoSortedRunnable:(id)arg7 allowOnlyRootTasksRunnable:(BOOL)arg8;
- (void)_partitionTaskGroup:(id)arg1 byRunnabilityGivenCapabilities:(unsigned long long)arg2 runnableAtDate:(id)arg3 topoSortedCurrentlyRunnable:(id *)arg4 blocked:(id *)arg5 allowOnlyRootTasksRunnable:(BOOL)arg6;
- (void)_registerRetryActivityForDate:(id)arg1;
- (void)_registerTaskQueueActivityForDate:(id)arg1;
- (BOOL)_removeTaskWithId:(id)arg1 guardedData:(id)arg2 persistRemove:(BOOL)arg3;
- (id)_runTask:(id)arg1;
- (void)_scheduleFutureActivitiesWithGuardedData:(id)arg1;
- (void)_startImmediateTasksIfNotAlreadyQueued:(id)arg1 guardedData:(id)arg2 didStartNewWork:(BOOL *)arg3;
- (void)_startRunnableTasksIfNecessaryWithGuardedData:(id)arg1;
- (id)activeActivityGrantingCapability:(unsigned long long)arg1;
- (BOOL)addTask:(id)arg1 options:(id)arg2;
- (BOOL)cancelTask:(id)arg1;
- (BOOL)cancelTasksWithTag:(id)arg1;
- (BOOL)cancelTasksWithTag:(id)arg1 excludingTasks:(id)arg2;
- (unsigned long long)count;
- (id)debugDescription;
- (BOOL)enumerateTasksWithTagsIntersectingTagSet:(id)arg1 block:(CDUnknownBlockType)arg2;
- (BOOL)finishXPCActivitiesWithGuardedData:(id)arg1;
- (BOOL)ifNotPresentAddTask:(id)arg1;
- (id)init;
- (id)initWithServerContext:(id)arg1 operationQueue:(id)arg2 operationGroup:(id)arg3 asyncQueue:(id)arg4;
- (BOOL)resumeWithXPCActivityDescriptor:(id)arg1 executeWhenSuspended:(CDUnknownBlockType)arg2;
- (BOOL)updateActivity:(id)arg1 withStartDate:(id)arg2;
- (void)waitForAsyncQueue;

@end

