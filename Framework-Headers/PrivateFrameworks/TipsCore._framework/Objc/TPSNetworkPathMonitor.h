//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSMapTable;
@protocol OS_dispatch_queue, OS_dispatch_source, OS_nw_path, OS_nw_path_monitor;

@interface TPSNetworkPathMonitor : NSObject
{
    BOOL _networkReachable;
    BOOL _networkConstrained;
    BOOL _networkExpensive;
    BOOL _networkPathMonitorActive;
    BOOL _shouldNotify;
    NSMapTable *_observers;
    NSObject<OS_dispatch_queue> *_monitorQueue;
    NSObject<OS_dispatch_source> *_notifyTimer;
    NSObject<OS_nw_path_monitor> *_pathMonitor;
    NSObject<OS_nw_path> *_currentPath;
}

@property (strong, nonatomic) NSObject<OS_nw_path> *currentPath; // @synthesize currentPath=_currentPath;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *monitorQueue; // @synthesize monitorQueue=_monitorQueue;
@property (nonatomic, getter=isNetworkConstrained) BOOL networkConstrained; // @synthesize networkConstrained=_networkConstrained;
@property (nonatomic, getter=isNetworkExpensive) BOOL networkExpensive; // @synthesize networkExpensive=_networkExpensive;
@property (nonatomic) BOOL networkPathMonitorActive; // @synthesize networkPathMonitorActive=_networkPathMonitorActive;
@property (nonatomic, getter=isNetworkReachable) BOOL networkReachable; // @synthesize networkReachable=_networkReachable;
@property (strong, nonatomic) NSObject<OS_dispatch_source> *notifyTimer; // @synthesize notifyTimer=_notifyTimer;
@property (strong, nonatomic) NSMapTable *observers; // @synthesize observers=_observers;
@property (strong, nonatomic) NSObject<OS_nw_path_monitor> *pathMonitor; // @synthesize pathMonitor=_pathMonitor;
@property (nonatomic) BOOL shouldNotify; // @synthesize shouldNotify=_shouldNotify;

+ (id)sharedMonitor;
- (void).cxx_destruct;
- (void)_cancelPendingNotifications;
- (void)_initializeMonitor;
- (void)_initializeMonitorIfNeeded;
- (void)_networkPathUpdated:(id)arg1;
- (void)_notifyObserversWithDelay:(double)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)_uninitializeMonitor;
- (void)addObserver:(id)arg1 selector:(SEL)arg2;
- (void)dealloc;
- (id)description;
- (id)init;
- (BOOL)isNetworkError:(id)arg1;
- (void)removeObserver:(id)arg1;
- (void)start;
- (void)stop;
- (BOOL)usesCellularConnection;
- (BOOL)usesWifiConnection;

@end

