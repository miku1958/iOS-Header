//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <ChatKit/AVVoiceControllerRecordDelegate-Protocol.h>

@class AVVoiceController, CKAudioAnalyzer, NSDictionary, NSString;
@protocol CKVoiceControllerDelegate, OS_dispatch_queue, OS_dispatch_source;

@interface CKVoiceController : NSObject <AVVoiceControllerRecordDelegate>
{
    id<CKVoiceControllerDelegate> _delegate;
    long long __activationMode;
    NSDictionary *_recordSettings;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_source> *_powerUpdateTimer;
    AVVoiceController *_voiceController;
    CKAudioAnalyzer *_audioAnalyzer;
}

@property (nonatomic, setter=_setActivationMode:) long long _activationMode; // @synthesize _activationMode=__activationMode;
@property (strong, nonatomic) CKAudioAnalyzer *audioAnalyzer; // @synthesize audioAnalyzer=_audioAnalyzer;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<CKVoiceControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) NSObject<OS_dispatch_source> *powerUpdateTimer; // @synthesize powerUpdateTimer=_powerUpdateTimer;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property (copy, nonatomic) NSDictionary *recordSettings; // @synthesize recordSettings=_recordSettings;
@property (readonly) Class superclass;
@property (strong, nonatomic) AVVoiceController *voiceController; // @synthesize voiceController=_voiceController;

- (void).cxx_destruct;
- (void)cleanup;
- (void)dealloc;
- (id)initWithActivationMode:(long long)arg1 recordSettings:(id)arg2 queue:(id)arg3;
- (void)messageSent:(id)arg1;
- (void)playAlertSoundForType:(int)arg1;
- (void)record;
- (void)releaseAudioSession;
- (void)setActivationMode:(long long)arg1;
- (void)startUpdatingPower;
- (void)stop;
- (void)stopUpdatingPower;
- (void)voiceControllerDidDetectStartpoint:(id)arg1;
- (void)voiceControllerDidStartRecording:(id)arg1 successfully:(BOOL)arg2;
- (void)voiceControllerDidStopRecording:(id)arg1 forReason:(long long)arg2;
- (void)voiceControllerDidStopRecordingForClientError;
- (void)voiceControllerRecordBufferAvailable:(id)arg1 buffer:(id)arg2;

@end

