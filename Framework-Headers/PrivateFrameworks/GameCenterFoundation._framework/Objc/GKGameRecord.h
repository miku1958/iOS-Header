//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <GameCenterFoundation/GKGame.h>

@class GKGameRecordInternal, GKPlayer, NSDate, NSString;

@interface GKGameRecord : GKGame
{
    GKPlayer *_player;
}

@property (readonly, nonatomic) unsigned long long achievementPoints; // @dynamic achievementPoints;
@property (readonly, nonatomic) unsigned long long achievements; // @dynamic achievements;
@property (readonly, nonatomic) NSString *defaultLeaderboardIdentifier; // @dynamic defaultLeaderboardIdentifier;
@property (readonly, nonatomic) unsigned long long friendRank; // @dynamic friendRank;
@property (readonly, strong) GKGameRecordInternal *internal; // @dynamic internal;
@property (readonly, nonatomic) NSDate *lastPlayedDate; // @dynamic lastPlayedDate;
@property (readonly, nonatomic) unsigned long long maxAchievementPoints; // @dynamic maxAchievementPoints;
@property (readonly, nonatomic) unsigned long long maxAchievements; // @dynamic maxAchievements;
@property (readonly, nonatomic) unsigned long long maxFriendRank; // @dynamic maxFriendRank;
@property (readonly, nonatomic) unsigned long long maxRank; // @dynamic maxRank;
@property (readonly, nonatomic) unsigned long long numberOfCategories; // @dynamic numberOfCategories;
@property (readonly, nonatomic) unsigned long long numberOfLeaderboardSets; // @dynamic numberOfLeaderboardSets;
@property (readonly, nonatomic) unsigned long long numberOfLeaderboards; // @dynamic numberOfLeaderboards;
@property (readonly, nonatomic) BOOL played;
@property (strong, nonatomic) GKPlayer *player; // @synthesize player=_player;
@property (readonly, nonatomic) NSDate *purchaseDate; // @dynamic purchaseDate;
@property (readonly, nonatomic) unsigned long long rank; // @dynamic rank;
@property (readonly, nonatomic) BOOL supportsAchievements; // @dynamic supportsAchievements;
@property (readonly, nonatomic) BOOL supportsLeaderboardSets; // @dynamic supportsLeaderboardSets;
@property (readonly, nonatomic) BOOL supportsLeaderboards; // @dynamic supportsLeaderboards;

+ (id)cacheKeyForPlayer:(id)arg1 bundleIdentifier:(id)arg2;
+ (id)cacheKeyForPlayer:(id)arg1 game:(id)arg2;
+ (id)cacheKeyForPlayer:(id)arg1 internal:(id)arg2;
+ (id)gameRecordForPlayer:(id)arg1 game:(id)arg2;
+ (id)internalRepresentationCache;
+ (id)internalRepresentationForPlayer:(id)arg1 game:(id)arg2;
+ (void)invalidateCaches;
+ (void)loadGameRecordForPlayer:(id)arg1 game:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
+ (void)loadGameRecordsForPlayer:(id)arg1 bundleIDs:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
+ (void)loadGameRecordsForPlayer:(id)arg1 games:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
+ (void)partitionGameRecords:(id)arg1 returniOS:(id *)arg2 returnMac:(id *)arg3;
+ (BOOL)supportsSecureCoding;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)hash;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1 player:(id)arg2;
- (BOOL)isEqual:(id)arg1;

@end

