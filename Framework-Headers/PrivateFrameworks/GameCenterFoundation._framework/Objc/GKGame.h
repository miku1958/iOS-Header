//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <Foundation/NSObject.h>

#import <GameCenterFoundation/NSCoding-Protocol.h>
#import <GameCenterFoundation/NSSecureCoding-Protocol.h>

@class GKGameInternal, GKStoreItemInternal, NSDictionary, NSNumber, NSString;

@interface GKGame : NSObject <NSCoding, NSSecureCoding>
{
    GKGameInternal *_internal;
    long long _environment;
}

@property (readonly, nonatomic) NSNumber *adamID; // @dynamic adamID;
@property (readonly, nonatomic) NSString *bundleIdentifier; // @dynamic bundleIdentifier;
@property (readonly, nonatomic) NSString *bundleVersion; // @dynamic bundleVersion;
@property (readonly, nonatomic) NSString *cacheKey;
@property (readonly, nonatomic) NSString *defaultCategory; // @dynamic defaultCategory;
@property (readonly, nonatomic, getter=isDownloading) BOOL downloading;
@property (strong, nonatomic) NSString *engineID; // @dynamic engineID;
@property (nonatomic) long long environment; // @synthesize environment=_environment;
@property (readonly, nonatomic) NSNumber *externalVersion; // @dynamic externalVersion;
@property (readonly, nonatomic) NSDictionary *gameDescriptor;
@property (readonly, nonatomic) struct GKGameInfo gameInfo;
@property (readonly, nonatomic, getter=isInstalled) BOOL installedGame;
@property (strong) GKGameInternal *internal; // @synthesize internal=_internal;
@property (readonly, nonatomic) BOOL isGameRecommendation; // @dynamic isGameRecommendation;
@property (readonly, nonatomic) NSString *name; // @dynamic name;
@property (nonatomic) unsigned char platform; // @dynamic platform;
@property (nonatomic, getter=isPrerendered) BOOL prerendered; // @dynamic prerendered;
@property (strong, nonatomic) NSString *reason; // @dynamic reason;
@property (strong, nonatomic) GKStoreItemInternal *storeItem; // @dynamic storeItem;
@property (readonly, nonatomic) BOOL supportsMultiplayer; // @dynamic supportsMultiplayer;
@property (readonly, nonatomic) BOOL supportsTurnBasedMultiplayer; // @dynamic supportsTurnBasedMultiplayer;

+ (id)currentGame;
+ (id)currentGameIncludingGameCenter:(BOOL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (BOOL)instancesRespondToSelector:(SEL)arg1;
+ (BOOL)isGameCenter;
+ (BOOL)isPreferences;
+ (void)loadGamesWithBundleIDs:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadTopGamesWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)markGameRecommendationsDisplayed:(id)arg1 complete:(CDUnknownBlockType)arg2;
+ (void)markGameRecommendationsViewed:(id)arg1 complete:(CDUnknownBlockType)arg2;
+ (void)setCurrentGameFromInternal:(id)arg1 serverEnvironment:(long long)arg2;
+ (BOOL)supportsSecureCoding;
+ (void)updateGames:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (void)getFriendPlayersForAchievement:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)getFriendPlayersForLeaderboard:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)getFriendPlayersIncludingCompatibleGames:(BOOL)arg1 handler:(CDUnknownBlockType)arg2;
- (unsigned long long)hash;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isGameCenter;
- (BOOL)isStoreItemUnexpired;
- (void)loadGameRatingWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadTellAFriendMessageWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (BOOL)respondsToSelector:(SEL)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (void)submitRating:(float)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)valueForUndefinedKey:(id)arg1;

@end

