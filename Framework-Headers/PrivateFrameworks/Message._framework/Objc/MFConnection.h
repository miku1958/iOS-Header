//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <Message/ECAuthenticatableConnection-Protocol.h>
#import <Message/MFDiagnosticsGenerator-Protocol.h>

@class MFConnectionSettings, NSArray, NSString;
@protocol ECNWConnectionWrapper, ECSASLSecurityLayer;

@interface MFConnection : NSObject <ECAuthenticatableConnection, MFDiagnosticsGenerator>
{
    id<ECSASLSecurityLayer> _securityLayer;
    MFConnectionSettings *_connectionSettings;
    id<ECNWConnectionWrapper> _socket;
    double _lastUsedTime;
    char *_buffer;
    long long _bufferRemainingBytes;
    unsigned long long _bufferStart;
    unsigned long long _bufferLength;
    unsigned long long _desiredBufferLength;
    struct z_stream_s *_deflater;
    struct z_stream_s *_inflater;
    char *_zbuffer;
    unsigned int _readBytesNotLogged;
    unsigned int _isFetching:1;
    unsigned int _allowFallbacks:1;
    unsigned int _compressionEnabled:1;
    NSString *_accountLogString;
}

@property (readonly, nonatomic) NSString *accountLogString; // @synthesize accountLogString=_accountLogString;
@property (readonly, nonatomic) NSArray *authenticationMechanisms;
@property (readonly, nonatomic) NSArray *capabilities;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly, nonatomic) BOOL hasBytesAvailable;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) BOOL isCellularConnection;
@property (nonatomic) BOOL isFetching;
@property (readonly, nonatomic) BOOL isValid;
@property (readonly, nonatomic) double lastUsedTime;
@property (readonly, nonatomic) BOOL loginDisabled;
@property (readonly, nonatomic) NSString *securityProtocol;
@property (readonly) Class superclass;
@property (readonly, nonatomic) BOOL usesOpportunisticSockets;

+ (void)flushLog;
+ (void)initialize;
+ (id)logActivityOnHosts;
+ (id)logActivityOnPorts;
+ (BOOL)logAllSocketActivity;
+ (id)logClasses;
+ (void)logConnection:(id)arg1 type:(long long)arg2 data:(id)arg3;
+ (void)readLoggingDefaults;
+ (void)setLogActivityOnHosts:(id)arg1;
+ (void)setLogActivityOnPorts:(id)arg1;
+ (void)setLogAllSocketActivity:(BOOL)arg1;
+ (void)setLogClasses:(id)arg1;
+ (BOOL)shouldTryFallbacksAfterError:(id)arg1;
- (void).cxx_destruct;
- (BOOL)_certificateIsTrustedForAccount:(id)arg1;
- (BOOL)_evaluateTrust:(struct __SecTrust *)arg1 errorPtr:(id *)arg2;
- (void)_setCertificateIsTrusted:(BOOL)arg1 forAccount:(id)arg2;
- (void)_setupSocketWithSettings:(id)arg1;
- (BOOL)authenticateUsingAccount:(id)arg1;
- (BOOL)authenticateUsingAccount:(id)arg1 authenticator:(id)arg2;
- (BOOL)connectUsingAccount:(id)arg1;
- (BOOL)connectUsingFallbacksForAccount:(id)arg1;
- (BOOL)connectUsingSettings:(id)arg1;
- (id)connectionSettings;
- (id)copyDiagnosticInformation;
- (void)dealloc;
- (void)disconnect;
- (void)enableThroughputMonitoring:(BOOL)arg1;
- (void)endCompression;
- (id)init;
- (void)logReadChars:(const char *)arg1 length:(unsigned long long)arg2;
- (BOOL)readBytesIntoData:(id)arg1 desiredLength:(unsigned long long)arg2;
- (BOOL)readLineIntoData:(id)arg1;
- (void)setAllowsFallbacks:(BOOL)arg1;
- (void)setConnectionSettings:(id)arg1;
- (void)setDesiredReadBufferLength:(unsigned long long)arg1;
- (BOOL)startCompression;
- (BOOL)startTLSForAccount:(id)arg1;
- (BOOL)writeBytes:(const char *)arg1 length:(unsigned long long)arg2 dontLogBytesInRange:(struct _NSRange)arg3;
- (BOOL)writeData:(id)arg1;
- (BOOL)writeData:(id)arg1 dontLogBytesInRange:(struct _NSRange)arg2;

@end

