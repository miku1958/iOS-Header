//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <CoreDAV/CoreDAVTaskGroup.h>

#import <CoreDAV/CoreDAVDeleteTaskDelegate-Protocol.h>
#import <CoreDAV/CoreDAVGetTaskDelegate-Protocol.h>
#import <CoreDAV/CoreDAVPutTaskDelegate-Protocol.h>

@class NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, NSURL;
@protocol CoreDAVLocalDBInfoProvider;

@interface CoreDAVContainerSyncTaskGroup : CoreDAVTaskGroup <CoreDAVDeleteTaskDelegate, CoreDAVPutTaskDelegate, CoreDAVGetTaskDelegate>
{
    int _phase;
    NSURL *_folderURL;
    NSString *_previousCTag;
    NSString *_nextCTag;
    BOOL _ensureUpdatedCTag;
    BOOL _useSyncCollection;
    NSString *_previousSyncToken;
    NSString *_nextSyncToken;
    NSMutableArray *_actions;
    unsigned long long _multiGetBatchSize;
    NSMutableArray *_unsubmittedTasks;
    unsigned long long _maxIndependentTasks;
    NSURL *_addMemberURL;
    BOOL _useMultiGet;
    NSDictionary *_bulkRequests;
    NSString *_bulkChangeCheckCTag;
    NSMutableSet *_syncReportDeletedURLs;
    NSMutableDictionary *_urlToETag;
    Class _appSpecificDataItemClass;
    BOOL _syncItemOrder;
    NSMutableArray *_localItemURLOrder;
    NSMutableDictionary *_remainingUUIDsToAddActions;
    NSMutableDictionary *_remainingHREFsToModDeleteActions;
    BOOL _actionsOnly;
}

@property (nonatomic) BOOL actionsOnly; // @synthesize actionsOnly=_actionsOnly;
@property (strong, nonatomic) NSURL *addMemberURL; // @synthesize addMemberURL=_addMemberURL;
@property (strong, nonatomic) NSString *bulkChangeCheckCTag; // @synthesize bulkChangeCheckCTag=_bulkChangeCheckCTag;
@property (strong, nonatomic) NSDictionary *bulkRequests; // @synthesize bulkRequests=_bulkRequests;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<CoreDAVLocalDBInfoProvider> delegate; // @dynamic delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL ensureUpdatedCTag; // @synthesize ensureUpdatedCTag=_ensureUpdatedCTag;
@property (readonly, nonatomic) NSURL *folderURL; // @synthesize folderURL=_folderURL;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) NSArray *localItemURLOrder; // @synthesize localItemURLOrder=_localItemURLOrder;
@property (nonatomic) unsigned long long maxIndependentTasks; // @synthesize maxIndependentTasks=_maxIndependentTasks;
@property (nonatomic) unsigned long long multiGetBatchSize; // @synthesize multiGetBatchSize=_multiGetBatchSize;
@property (strong, nonatomic) NSString *nextCTag; // @synthesize nextCTag=_nextCTag;
@property (strong, nonatomic) NSString *previousCTag; // @synthesize previousCTag=_previousCTag;
@property (strong, nonatomic) NSString *previousSyncToken; // @synthesize previousSyncToken=_previousSyncToken;
@property (readonly) Class superclass;
@property (nonatomic) BOOL useMultiGet; // @synthesize useMultiGet=_useMultiGet;
@property (nonatomic) BOOL useSyncCollection; // @synthesize useSyncCollection=_useSyncCollection;

- (void).cxx_destruct;
- (void)_bulkChange;
- (void)_bulkChangeTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)_configureMultiGet:(id)arg1;
- (void)_getCTag;
- (void)_getDataPayloads;
- (void)_getETags;
- (void)_getOrder;
- (void)_getTask:(id)arg1 finishedWithParsedContents:(id)arg2 deletedItems:(id)arg3 error:(id)arg4;
- (void)_postTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)_pushActions;
- (void)_sendNextBatch;
- (unsigned long long)_submitTasks;
- (void)_syncReportTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)_tearDownAllUnsubmittedTasks;
- (void)applyAdditionalPropertiesFromPostTask:(id)arg1;
- (void)applyAdditionalPropertiesFromPutTask:(id)arg1;
- (void)bailWithError:(id)arg1;
- (Class)bulkChangeTaskClass;
- (void)cancelTaskGroup;
- (id)copyAdditionalResourcePropertiesToFetch;
- (id)copyGetEtagTaskWithPropertiesToFind:(id)arg1;
- (id)copyGetTaskWithURL:(id)arg1;
- (id)copyMultiGetTaskWithURLs:(id)arg1;
- (id)copyPostTaskWithPayloadItem:(id)arg1 forAction:(id)arg2;
- (id)copyPutTaskWithPayloadItem:(id)arg1 forAction:(id)arg2;
- (id)dataContentType;
- (void)deleteResourceURLs:(id)arg1;
- (void)deleteTask:(id)arg1 completedWithError:(id)arg2;
- (void)getTask:(id)arg1 data:(id)arg2 error:(id)arg3;
- (id)initWithFolderURL:(id)arg1 previousCTag:(id)arg2 previousSyncToken:(id)arg3 actions:(id)arg4 syncItemOrder:(BOOL)arg5 context:(id)arg6 accountInfoProvider:(id)arg7 taskManager:(id)arg8;
- (BOOL)isWhitelistedError:(id)arg1;
- (void)propFindTask:(id)arg1 parsedResponses:(id)arg2 error:(id)arg3;
- (void)putTask:(id)arg1 completedWithNewETag:(id)arg2 error:(id)arg3;
- (void)receivedPropertiesToValues:(id)arg1 forURL:(id)arg2;
- (BOOL)shouldDownloadResource:(id)arg1 localETag:(id)arg2 serverETag:(id)arg3;
- (BOOL)shouldFetchMoreETags;
- (BOOL)shouldFetchResourceWithEtag:(id)arg1 propertiesToValues:(id)arg2;
- (void)startTaskGroup;
- (void)syncAway;
- (void)task:(id)arg1 didFinishWithError:(id)arg2;
- (void)taskGroupWillCancelWithError:(id)arg1;

@end

