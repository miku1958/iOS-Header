//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSMutableSet;
@protocol BCSConfigCacheSkipping, BCSConfigCaching, BCSConfigRemoteFetching, BCSFeatureFlagArbitrating, BCSMetricFactoryProtocol, BCSUserDefaultsProviding;

@interface BCSConfigPrefetcher : NSObject
{
    id<BCSConfigCaching> _configCache;
    id<BCSConfigCacheSkipping> _configCacheSkipper;
    id<BCSFeatureFlagArbitrating> _featureFlagArbiter;
    id<BCSConfigRemoteFetching> _chatSuggestConfigRemoteFetcher;
    id<BCSConfigRemoteFetching> _businessLinkConfigRemoteFetcher;
    id<BCSUserDefaultsProviding> _userDefaults;
    id<BCSMetricFactoryProtocol> _metricFactory;
    NSMutableSet *_triggers;
}

@property (strong, nonatomic) id<BCSConfigRemoteFetching> businessLinkConfigRemoteFetcher; // @synthesize businessLinkConfigRemoteFetcher=_businessLinkConfigRemoteFetcher;
@property (strong, nonatomic) id<BCSConfigRemoteFetching> chatSuggestConfigRemoteFetcher; // @synthesize chatSuggestConfigRemoteFetcher=_chatSuggestConfigRemoteFetcher;
@property (strong, nonatomic) id<BCSConfigCaching> configCache; // @synthesize configCache=_configCache;
@property (strong, nonatomic) id<BCSConfigCacheSkipping> configCacheSkipper; // @synthesize configCacheSkipper=_configCacheSkipper;
@property (strong, nonatomic) id<BCSFeatureFlagArbitrating> featureFlagArbiter; // @synthesize featureFlagArbiter=_featureFlagArbiter;
@property (strong, nonatomic) id<BCSMetricFactoryProtocol> metricFactory; // @synthesize metricFactory=_metricFactory;
@property (strong, nonatomic) NSMutableSet *triggers; // @synthesize triggers=_triggers;
@property (strong, nonatomic) id<BCSUserDefaultsProviding> userDefaults; // @synthesize userDefaults=_userDefaults;

- (void).cxx_destruct;
- (long long)_hoursSinceLastSuccessfulPrefetchForType:(long long)arg1;
- (void)_notePrefetchForType:(long long)arg1 finishedSuccessfully:(BOOL)arg2;
- (void)_prefetchConfigsIfNecessaryWithXCPActivity:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (BOOL)_shouldPrefetchType:(long long)arg1;
- (void)addPrefetchTrigger:(id)arg1;
- (id)initWithConfigCache:(id)arg1 configCacheSkipper:(id)arg2 featureFlagArbiter:(id)arg3 chatSuggestConfigRemoteFetcher:(id)arg4 businessLinkConfigRemoteFetcher:(id)arg5 userDefaults:(id)arg6 metricFactory:(id)arg7;

@end

