//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

@class GEOFeatureStyleAttributes, VKRouteContext;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AlphaAtlas {
    unsigned int _field1;
    BOOL _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    float _field6;
    struct Texture2D *_field7;
};

struct AltitudeDebugSettings {
    BOOL altitudePauseLoading;
    BOOL altitudeFreezeViewNode;
    BOOL altitudeTexturePaging;
    BOOL altitudeShowTileBounds;
    BOOL altitudeThreadDrawing;
    BOOL altitudeHighResSatellite;
    BOOL altitudeMipmapSatellite;
    BOOL altitudeMipmapFlyover;
    BOOL altitudeMipmapObjectTree;
    BOOL altitudeShowNightLight;
    float lodScale;
    float tileQualityThreshold;
    float hideMeshTime;
    float fadeSpeed;
    BOOL tourSpeedup;
    float tourSpeedupFactor;
};

struct AnchorContext;

struct AnchorManagerPrivate;

struct AnimationManager {
    struct AnimationTimer _field1;
    double _field2;
    struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder>> _field3;
};

struct AnimationObjectHolder;

struct AnimationReferenceTimer {
    double _field1;
    double _field2;
    double _field3;
};

struct AnimationTimer {
    struct AnimationReferenceTimer *_field1;
    double _field2;
    double _field3;
    double _field4;
};

struct AnnotationPipelineStates {
    struct shared_ptr<ggl::TextureWithBrightness::MeshPipelineState> _field1;
    struct shared_ptr<ggl::TextureAlphaMask::MeshPipelineState> _field2;
};

struct BaseMesh {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct MeshCReflection *_field6;
    struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData>>> _field7;
    struct shared_ptr<ggl::IndexData> _field8;
};

struct BasePipelineSetup {
    CDUnknownFunctionPointerType *_field1;
    struct PipelineDataCReflection *_field2;
    struct shared_ptr<ggl::PipelineState> _field3;
    struct vector<ggl::ConstantDataElement, std::__1::allocator<ggl::ConstantDataElement>> _field4;
    struct vector<ggl::Texture *, std::__1::allocator<ggl::Texture *>> _field5;
    struct Mesh *_field6;
};

struct BasePipelineState;

struct BasicViewNode;

struct BitmapData;

struct BitmapDataBase;

struct Box<double, 2> {
    Matrix_2bdd42a3 _minimum;
    Matrix_2bdd42a3 _maximum;
};

struct Box<float, 2> {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
};

struct Box<float, 3> {
    Matrix_811b2232 _minimum;
    Matrix_811b2232 _maximum;
};

struct Box<unsigned int, 2> {
    struct Matrix<unsigned int, 2, 1> _field1;
    struct Matrix<unsigned int, 2, 1> _field2;
};

struct BufferData;

struct BufferLoadItem;

struct BufferMemory {
    struct BufferData *_user;
    struct ResourceAccessor *_accessor;
    struct Range _range;
    int _access;
    int _sync;
    char *_data;
};

struct BuildingFlatStrokeMesh;

struct BuildingFlatStrokePipelineState;

struct BuildingMesh;

struct BuildingPipelineSetup {
    CDUnknownFunctionPointerType *_field1;
    struct PipelineDataCReflection *_field2;
    struct shared_ptr<ggl::PipelineState> _field3;
    struct vector<ggl::ConstantDataElement, std::__1::allocator<ggl::ConstantDataElement>> _field4;
    struct vector<ggl::Texture *, std::__1::allocator<ggl::Texture *>> _field5;
    struct Mesh *_field6;
};

struct BuildingPipelineState;

struct C3bRequestManager;

struct C3mmRequestManager;

struct CGColor;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CGVector {
    double _field1;
    double _field2;
};

struct CameraFrame<geo::Radians, double> {
    Mercator3_d8bb135c _target;
    struct Unit<MeterUnitDescription, double> _distanceFromTarget;
    Unit_3d259e8a _pitch;
    Unit_3d259e8a _heading;
};

struct CameraManager {
    CDUnknownFunctionPointerType *_vptr$CameraManager;
    BOOL _panBegin;
    BOOL _panInProgress;
    BOOL _panEnd;
    Matrix_443f5d51 _panCurrentCursor;
    Matrix_443f5d51 _panPreviousCursor;
    Matrix_443f5d51 _panStartCursor;
    struct Coordinate3D<Radians, double> _panStartPosition;
    double _panDistance;
    BOOL _panAtStartPosition;
    BOOL _rotateBegin;
    BOOL _rotateInProgress;
    BOOL _rotateEnd;
    struct Position3d _rotateStartPosition;
    Matrix_443f5d51 _rotateCurrentCursor;
    double _rotateAngle;
    BOOL _tiltBegin;
    BOOL _tiltInProgress;
    BOOL _tiltEnd;
    struct Position3d _tiltStartPosition;
    Matrix_443f5d51 _tiltCurrentCursor;
    Matrix_443f5d51 _tiltPreviousCursor;
    double _tiltAngle;
    BOOL _zoomBegin;
    BOOL _zoomInProgress;
    BOOL _zoomEnd;
    struct Position3d _zoomStartPosition;
    Matrix_443f5d51 _zoomCurrentCursor;
    double _zoomFactor;
    double _zoomStartDistance;
    BOOL _zoomRotateToNorth;
    BOOL _useTiltLimit;
    int _tiltLimitMode;
    BOOL _tiltLimitPushDownEnabled;
    BOOL _tiltLimitTransferInProgress;
    BOOL _tiltLimitPushDown;
    double _startPushDownTilt;
    double _tiltLimitTransferFraction;
    double _startTiltLimitTilt;
    struct PositionGeo3d _startTiltLimitPosition;
    Matrix_6e1d3589 _startTiltLimitDirection;
    double _fullZoomTiltLimitFactor;
};

struct CartoStyle<gss::PropertyID>;

struct ClearItem {
    unsigned char colorMask;
    Matrix_5173352a color;
    BOOL clearDepthBuffer;
    float depth;
    unsigned char clearStencilBuffer;
    unsigned int stencil;
};

struct ClusterTreeClusterNode {
    CDUnknownFunctionPointerType *_field1;
    struct Range<float> _field2;
    Mercator2_57ec32b6 _field3;
    struct ClusterTreeClusterNode *_field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned char _field7;
    struct _retain_ptr<id<VKCustomFeatureAnnotation>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field8;
    struct ClusterTreeNode *_field9[2];
    struct ClusterTreeFeatureNode *_field10;
    double _field11;
    unsigned int _field12;
    BOOL _field13;
    BOOL _field14;
};

struct ClusterTreeFeatureNode;

struct ClusterTreeNode;

struct CommandBuffer {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    unsigned char _field3;
    struct RenderQueue *_field4;
    struct ClearItem *_field5;
    struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *>> _field6;
    struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem>> _field7;
    struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem>> _field8;
    struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>>> _field9;
    struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery>> _field10;
    id _field11;
};

struct CommandBufferIdSet {
    struct vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId>> _ids;
};

struct CommonLibrary;

struct CompleteGlobeTileSetCullingGraph;

struct CompleteGlobeTileSetLoader;

struct CompressedMeshMesh;

struct CompressedMeshPipelineSetup {
    CDUnknownFunctionPointerType *_field1;
    struct PipelineDataCReflection *_field2;
    struct shared_ptr<ggl::PipelineState> _field3;
    struct vector<ggl::ConstantDataElement, std::__1::allocator<ggl::ConstantDataElement>> _field4;
    struct vector<ggl::Texture *, std::__1::allocator<ggl::Texture *>> _field5;
    struct Mesh *_field6;
};

struct CompressedMeshPipelineState;

struct ConstantDataElement;

struct ConstantDataTyped<ggl::AnimatableTexture::Variant>;

struct ConstantDataTyped<ggl::Building::Fade>;

struct ConstantDataTyped<ggl::Building::Lighting>;

struct ConstantDataTyped<ggl::Fog::Skyfog>;

struct ConstantDataTyped<ggl::Grid::Style>;

struct ConstantDataTyped<ggl::GridBase::GridView>;

struct ConstantDataTyped<ggl::PolygonFill::Fill>;

struct ConstantDataTyped<ggl::SimpleGrid::Style>;

struct ConstantDataTyped<ggl::Sky::Style>;

struct ConstantDataTyped<ggl::Tile::View>;

struct ConstantDataTyped<ggl::TransitNode::Settings>;

struct Context;

struct Coordinate2D<Degrees, double> {
    struct Unit<DegreeUnitDescription, double> latitude;
    struct Unit<DegreeUnitDescription, double> longitude;
};

struct Coordinate3D<Radians, double> {
    Unit_3d259e8a latitude;
    Unit_3d259e8a longitude;
    struct Unit<MeterUnitDescription, double> altitude;
};

struct CullingGridWithHeight {
    float _heights[16];
};

struct CullingNode;

struct DashTextureCache {
    struct unordered_map<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>, md::DashTextureCache::KeyHasher, std::__1::equal_to<md::DashTextureCache::Key>, std::__1::allocator<std::__1::pair<const md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>>> _field1;
};

struct DataOverrideManager;

struct DataWrite<ggl::BuildingFlatStroke::DefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::ColoredText::My>;

struct DataWrite<ggl::PolygonBase::CompressedVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::PolygonCommonStroke::DefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<unsigned short> {
    struct BufferMemory _memory;
};

struct DebugConsole {
    CDUnknownFunctionPointerType *_field1;
    Matrix_8746f91e _field2;
    Matrix_8746f91e _field3;
    Matrix_8746f91e _field4;
    Matrix_8746f91e _field5;
    unsigned long long _field6;
    struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> _field7;
    struct unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My>>> _field8;
    unsigned long long _field9;
    Matrix_8746f91e *_field10;
    struct Matrix<unsigned char, 4, 1> _field11;
    struct Matrix<unsigned char, 4, 1> _field12;
    float _field13;
    struct CommonLibrary *_field14;
    struct RenderTargetFormat _field15;
};

struct DebugConsoleManager;

struct DepthState {
    int _field1;
    int _field2;
    int _field3;
    float _field4;
    float _field5;
};

struct DeviceAPIProperties {
    int _field1;
    double _field2;
};

struct DeviceCapabilities {
    BOOL _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct DeviceVersion {
    unsigned int _field1;
    unsigned int _field2;
};

struct DisplayStyle {
    unsigned char timePeriod;
    unsigned char overlayType;
    unsigned char applicationState;
    unsigned char searchResultsType;
    unsigned char mapHasLabels;
};

struct DistanceAtlas {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    struct Texture2D *_field5;
};

struct DtmCacheNode;

struct DtmRequestManager;

struct EarthAdjustedViewNode;

struct FeatureAttributePair;

struct FeatureAttributeSet {
    struct vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair>> _attributes;
};

struct FeatureMarker;

struct FixedPointVector<unsigned char, 4> {
    unsigned char _e[4];
};

struct Flow {
    long long _field1;
    float _field2;
    float _field3;
    int _field4;
};

struct FlyoverLibrary;

struct FlyoverTour;

struct FogInfo {
    shared_ptr_c062e934 _fogConstantData;
};

struct FogPipelineSetup;

struct FogPipelineState;

struct FragmentedPool<ggl::BuildingFacadeDepth::BuildingPipelineSetup>;

struct FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>;

struct FragmentedPool<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup>;

struct FragmentedPool<ggl::BuildingPointyRoofDepth::BuildingPipelineSetup>;

struct FragmentedPool<ggl::BuildingShadow::MeshPipelineSetup>;

struct FragmentedPool<ggl::BuildingTopDepth::CompressedMeshPipelineSetup>;

struct FragmentedPool<ggl::Debug::BaseMesh>;

struct FragmentedPool<ggl::Debug::BasePipelineSetup>;

struct FragmentedPool<ggl::DebugPoints::BasePipelineSetup>;

struct FragmentedPool<ggl::DiffuseBuilding::BuildingPipelineSetup>;

struct FragmentedPool<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup>;

struct FragmentedPool<ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup>;

struct FragmentedPool<ggl::DiffuseLandmark::BuildingPipelineSetup>;

struct FragmentedPool<ggl::FoggedDiffuseBuilding::BuildingPipelineSetup>;

struct FragmentedPool<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup>;

struct FragmentedPool<ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup>;

struct FragmentedPool<ggl::FoggedSpecularBuilding::BuildingPipelineSetup>;

struct FragmentedPool<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup>;

struct FragmentedPool<ggl::FoggedSpecularLandmark::LandmarkPipelineSetup>;

struct FragmentedPool<ggl::Glow::MeshPipelineSetup>;

struct FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>;

struct FragmentedPool<ggl::LandmarkDepth::BuildingPipelineSetup>;

struct FragmentedPool<ggl::LandmarkFlat::LandmarkPipelineSetup>;

struct FragmentedPool<ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup>;

struct FragmentedPool<ggl::PolygonAnimatableStroke::MeshPipelineSetup>;

struct FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>;

struct FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup>;

struct FragmentedPool<ggl::PolygonStroke::MeshPipelineSetup>;

struct FragmentedPool<ggl::PrefilteredLine::PrefilteredLinePipelineSetup>;

struct FragmentedPool<ggl::RenderItem>;

struct FragmentedPool<ggl::SpecularBuilding::BuildingPipelineSetup>;

struct FragmentedPool<ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup>;

struct FragmentedPool<ggl::SpecularBuildingTop::CompressedMeshPipelineSetup>;

struct FragmentedPool<ggl::SpecularLandmark::LandmarkPipelineSetup>;

struct FrameLatLon {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    struct PositionLatLonAlt _field5;
};

struct FreeList;

struct FreezeViewNode;

struct FunctionEntry;

struct GenericShieldStyleInfo;

struct GeoCoordinates {
    struct Longitude _field1;
    struct Latitude _field2;
};

struct GeoServicesLoadJob;

struct GeoServicesLoader;

struct Geocentric<double> {
    double _field1[3];
};

struct GlobeAdapter {
    struct shared_ptr<md::GlobeAdapterData> _field1;
    struct GlobeView *_field2;
    struct Geocentric<double> _field3;
    struct {
        double _field1;
        double _field2;
    } _field4;
    struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile>>> _field5;
    shared_ptr_e1d4bd06 _field6;
    BOOL _field7;
    BOOL _field8;
};

struct GlobeAdapterData;

struct GlobeCleanupLoader;

struct GlobeDispatch;

struct GlobeMainViewNode;

struct GlobeOverlayContainer {
    weak_ptr_96fca551 _field1;
    struct GlobeView *_field2;
    struct NSMutableArray *_field3;
    struct mutex _field4;
    double _field5;
};

struct GlobeTileRenderManager;

struct GlobeView {
    CDUnknownFunctionPointerType *_field1;
    struct AnchorManagerPrivate *_field2;
    struct Scene *_field3;
    struct Context *_field4;
    struct DtmCacheNode *_field5;
    struct DtmRequestManager *_field6;
    struct FreezeViewNode *_field7;
    struct Projection _field8;
    struct FrameLatLon _field9;
    BOOL _field10;
    basic_string_805fe43b _field11;
    basic_string_805fe43b _field12;
    struct vector<altitude::TileBound, std::__1::allocator<altitude::TileBound>> _field13;
    struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey>> _field14;
    BOOL _field15;
    unsigned int _field16;
    unsigned int _field17;
    unsigned int _field18;
    unsigned int _field19;
    struct VKClassicGlobeCanvas *_field20;
    BOOL _field21;
    BOOL _field22;
    int _field23;
    struct AnimationManager _field24;
    struct Timer _field25;
    double _field26;
    BOOL _field27;
    double _field28;
    double _field29;
    double _field30;
    struct FrameLatLon _field31;
    struct C3mmRequestManager *_field32;
    struct RenderableGroup *_field33;
    unsigned int _field34;
    double _field35;
    BOOL _field36;
    BOOL _field37;
    struct LabelDataManagerPrivate *_field38;
    BOOL _field39;
    BOOL _field40;
    BOOL _field41;
    BOOL _field42;
    struct RouteLineManager *_field43;
    struct GlobeCleanupLoader *_field44;
    struct CompleteGlobeTileSetCullingGraph *_field45;
    struct CompleteGlobeTileSetLoader *_field46;
    struct TileSetNode *_field47;
    struct GlobeTileRenderManager *_field48;
    struct CullingNode *_field49;
    struct EarthAdjustedViewNode *_field50;
    struct UserViewNode *_field51;
    struct View *_field52;
    struct BasicViewNode *_field53;
    struct GlobeMainViewNode *_field54;
    struct C3bRequestManager *_field55;
    float _field56;
    BOOL _field57;
    struct shared_ptr<bool> _field58;
    struct HeightRequestManager *_field59;
    struct map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>>>> _field60;
    struct Mutex _field61;
    struct shared_ptr<altitude::Stylesheet> _field62;
    struct FlyoverTour *_field63;
    BOOL _field64;
    struct TriggerManager *_field65;
    struct Viewport _field66;
    struct AnimationReferenceTimer _field67;
    BOOL _field68;
    struct set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *>> _field69;
    struct GeoServicesLoader *_field70;
    struct ManifestManager *_field71;
    struct GlobeDispatch *_field72;
};

struct GridMesh;

struct GridPipelineSetup;

struct GridPipelineState;

struct HeightRequestManager;

struct HighlightHelper {
    id _field1;
    Matrix_08d701e4 *_field2;
};

struct Incident {
    struct GeoCoordinates _field1;
    struct String _field2;
    struct String _field3;
    int _field4;
    struct String _field5;
    struct String _field6;
    long long _field7;
    long long _field8;
    long long _field9;
    long long _field10;
    int _field11;
    unsigned char _field12;
    BOOL _field13;
    int _field14;
    unsigned char _field15;
    unsigned char _field16;
};

struct IndexData;

struct IndexDataTyped<unsigned short>;

struct IsoAlphaAtlas {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    float _field5;
    struct Texture2D *_field6;
    shared_ptr_cedd5232 _field7;
};

struct LRUCache<unsigned long, CGImage *>;

struct LRUCache<unsigned long, VKRoadSignArtwork *>;

struct LabelClusterProvider;

struct LabelClusterTree;

struct LabelCustomFeatureProvider {
    struct LabelCustomFeatureSupport *_field1;
    struct LabelManager *_field2;
    struct _retain_ptr<VKCustomFeatureDataSourceObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field3;
    struct _retain_ptr<id<VKCustomFeatureDataSource>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field4;
    struct map<VKTileKey, md::LabelCustomFeatureProvider::TileInfo, md::LabelCustomFeatureProvider::TileKeyLess, std::__1::allocator<std::__1::pair<const VKTileKey, md::LabelCustomFeatureProvider::TileInfo>>> _field5;
    struct _retain_ptr<id<VKCustomFeatureAnnotation>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field6;
    struct shared_ptr<md::LabelScene> _field7;
    struct map<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo, std::__1::less<id<VKCustomFeatureAnnotation>>, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>>> _field8;
    struct unique_ptr<md::LabelClusterProvider, std::__1::default_delete<md::LabelClusterProvider>> _field9;
    BOOL _field10;
    unsigned char _field11;
    unsigned char _field12;
};

struct LabelCustomFeatureSupport;

struct LabelDataManagerPrivate;

struct LabelExternalIconRenderer;

struct LabelExternalObjectsModerator {
    struct fast_shared_ptr<md::unsynchronized_weak_interface_ptr<md::LabelExternalObjectsModerator>> _field1;
    struct LabelExternalIconRenderer *_field2;
    unordered_set_65896b03 _field3;
    struct unordered_map<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>, std::__1::hash<const GEOTransitLink *>, std::__1::equal_to<const GEOTransitLink *>, std::__1::allocator<std::__1::pair<const GEOTransitLink *const, std::__1::weak_ptr<md::LabelExternalTransitLink>>>> _field4;
    struct unordered_map<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>>> _field5;
};

struct LabelExternalPointFeature;

struct LabelFeatureMarker;

struct LabelImageKey;

struct LabelManager;

struct LabelMapTile;

struct LabelMarker;

struct LabelMarkerFeatureHandle {
    unsigned char featureType;
    long long featureIndex;
    struct VKTileKey key;
    int tileStyle;
    unsigned int tileVersion;
    GEOFeatureStyleAttributes *styleAttributes;
};

struct LabelNavJunctionInfo;

struct LabelScene;

struct LabelTile;

struct LabelTransitRoute;

struct LabelTransitRouteLine;

struct LabelTransitSupport {
    struct LabelManager *_field1;
    shared_ptr_887a193f _field2;
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field3;
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field4;
    struct _retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field5;
    BOOL _field6;
    BOOL _field7;
    BOOL _field8;
    BOOL _field9;
    double _field10;
    struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature>>> _field11;
    struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature>>> _field12;
    unordered_set_65896b03 _field13;
    struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>>> _field14;
    struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature>>> _field15;
    struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>>> _field16;
    struct _retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field17;
    struct shared_ptr<md::LabelTransitRoute> _field18;
    struct shared_ptr<md::LabelTransitRouteLine> _field19;
    unsigned int _field20;
    struct unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>>> _field21;
};

struct LandmarkPipelineState;

struct Latitude {
    unsigned int _field1;
};

struct LayoutContext {
    id _field1;
    struct shared_ptr<md::ViewTransform> _field2;
    struct shared_ptr<md::AnchorContext> _field3;
    long long _field4;
    id _field5;
    id _field6;
    struct VKEdgeInsets _field7;
    struct VKEdgeInsets _field8;
    unsigned char _field9;
    struct shared_ptr<ggl::PolygonBase::MeshMesh> _field10;
    struct shared_ptr<ggl::PolygonBase::MeshMesh> _field11;
    struct shared_ptr<ggl::TextureMesh::MeshMesh> _field12;
    struct StencilManager _field13;
    shared_ptr_807ec9ac _field14;
    struct Loader _field15;
    double _field16;
    double _field17;
    BOOL _field18;
    BOOL _field19;
    BOOL _field20;
    BOOL _field21;
    BOOL _field22;
    Mercator3_d8bb135c _field23;
    float _field24;
    float _field25;
    float _field26;
    int _field27;
    struct View *_field28;
    struct View *_field29;
    struct Viewport *_field30;
    struct shared_ptr<ggl::ConstantDataTyped<ggl::Building::Lighting>> _field31;
};

struct Loader {
    struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl>> _field1;
};

struct LoaderImpl;

struct Longitude {
    unsigned int _field1;
};

struct MITManager;

struct ManeveuverDistancesRange {
    double _immediate;
    double _extremlyNear;
    double _veryNear;
    double _near;
    double _medium;
    double _far;
    double _veryFar;
};

struct ManifestManager;

struct Matrix<double, 2, 1> {
    double _e[2];
};

struct Matrix<double, 3, 1> {
    double _e[3];
};

struct Matrix<double, 3, 3> {
    double _e[9];
};

struct Matrix<double, 4, 4> {
    double _e[16];
};

struct Matrix<float, 2, 1> {
    float _e[2];
};

struct Matrix<float, 3, 1> {
    float _e[3];
};

struct Matrix<float, 4, 1> {
    float _e[4];
};

struct Matrix<float, 4, 4> {
    float _e[16];
};

struct Matrix<int, 2, 1> {
    int _e[2];
};

struct Matrix<unsigned char, 4, 1> {
    unsigned char _field1[4];
};

struct Matrix<unsigned int, 2, 1> {
    unsigned int _field1[2];
};

struct Mercator2<double> {
    double _e[2];
};

struct Mercator3<double> {
    double _e[3];
};

struct Mesh {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct MeshCReflection *_field6;
    struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData>>> _field7;
    struct shared_ptr<ggl::IndexData> _field8;
};

struct MeshCReflection;

struct MeshMesh;

struct MeshPipelineSetup;

struct MeshPipelineState;

struct MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_8a1db405 _meshes;
    struct DataWrite<ggl::BuildingFlatStroke::DefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_3f17ee4c _meshes;
    struct DataWrite<ggl::PolygonBase::CompressedVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_83cbb261 _meshes;
    struct DataWrite<ggl::PolygonCommonStroke::DefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshVendor<ggl::BuildingFacade::BuildingMesh> {
    struct vector<ggl::BuildingFacade::BuildingMesh *, std::__1::allocator<ggl::BuildingFacade::BuildingMesh *>> _field1;
    struct BuildingMesh *_field2;
};

struct MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> {
    struct vector<ggl::BuildingPointyRoof::BuildingMesh *, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *>> _field1;
    struct BuildingMesh *_field2;
};

struct MeshVendor<ggl::Glow::MeshMesh> {
    struct vector<ggl::Glow::MeshMesh *, std::__1::allocator<ggl::Glow::MeshMesh *>> _field1;
    struct MeshMesh *_field2;
};

struct MeshVendor<ggl::PolygonShadowedStroke::ShadowPathMesh> {
    struct vector<ggl::PolygonShadowedStroke::ShadowPathMesh *, std::__1::allocator<ggl::PolygonShadowedStroke::ShadowPathMesh *>> _field1;
    struct ShadowPathMesh *_field2;
};

struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> {
    struct vector<ggl::PrefilteredLine::PrefilteredLineMesh *, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *>> _field1;
    struct PrefilteredLineMesh *_field2;
};

struct MultiRange;

struct Mutex {
    void *mMutex;
};

struct NSMutableArray;

struct NavContext {
    CDUnknownFunctionPointerType *_field1;
    struct LabelManager *_field2;
};

struct NavCurrentRoadSign {
    CDUnknownFunctionPointerType *_field1;
    basic_string_805fe43b _field2;
    shared_ptr_c5d816ee _field3;
    struct {
        BOOL _field1;
        BOOL _field2;
        float _field3;
        float _field4;
    } _field4;
    struct unique_ptr<md::NavLabelPart, std::__1::default_delete<md::NavLabelPart>> _field5;
    Mercator2_57ec32b6 _field6;
    Matrix_8746f91e _field7;
    Matrix_8746f91e _field8;
    Box_3fb92e00 _field9;
    BOOL _field10;
    BOOL _field11;
    BOOL _field12;
    float _field13;
    BOOL _field14;
    BOOL _field15;
    float _field16;
};

struct NavLabel;

struct NavLabelPart;

struct OESContext;

struct OESDevice;

struct ObjectGroup;

struct OffscreenQueue;

struct OnscreenTimestampData;

struct Ortho {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct Pass;

struct PatternedBatch;

struct PatternedLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::PatternedBatch *, std::__1::allocator<md::PatternedBatch *>> _field2;
    struct vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
    shared_ptr_696716c4 _field5;
    unsigned long long _field6;
    struct PatternedSharedResources *_field7;
};

struct PatternedSharedResources;

struct PendingQuery;

struct Perspective {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct PerspectiveView<double> {
    struct RigidTransform<double> _transform;
    Matrix_08d701e4 _projectionMatrix;
    double _verticalFOV;
    double _aspectRatio;
    double _near;
    double _far;
    double _ndcZNear;
    Matrix_08d701e4 _inverseProjection;
};

struct PilledTrafficBatch;

struct PilledTrafficLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::PilledTrafficBatch *, std::__1::allocator<md::PilledTrafficBatch *>> _field2;
    struct vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> _field3;
    struct RenderState *_field4[1];
    shared_ptr_696716c4 _field5;
    unsigned long long _field6;
    struct TrafficSharedResources *_field7;
};

struct PipelineDataCReflection;

struct PipelineSetup;

struct PipelineState;

struct PolygonRouteAttributes {
    unsigned int routeSignificance;
    unsigned char routeProximity;
    BOOL hasRouteSignificance;
};

struct PolylineCoordinate {
    unsigned int index;
    float offset;
};

struct Pool<ggl::RenderItem> {
    struct set<void *, std::__1::less<void *>, std::__1::allocator<void *>> mAllocatedSlabs;
    unsigned long long mElementsPerSlab;
    unsigned long long mSlabSize;
    struct FreeList *mFreeElement;
};

struct Pos2DUVMesh {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct MeshCReflection *_field6;
    struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData>>> _field7;
    struct shared_ptr<ggl::IndexData> _field8;
};

struct Pos2DUVPipelineSetup;

struct Pos2DUVPipelineState;

struct Position3d {
    double _latitude;
    double _longitude;
    double _height;
};

struct PositionGeo3d {
    double _x;
    double _y;
    double _z;
};

struct PositionLatLonAlt {
    double _field1;
    double _field2;
    double _field3;
};

struct PrefilteredLineMesh;

struct PrefilteredLinePipelineState;

struct Projection {
    struct Perspective _field1;
    struct Ortho _field2;
    BOOL _field3;
    BOOL _field4;
};

struct QueryOverrides {
    BOOL _field1;
    BOOL _field2;
    BOOL _field3;
    BOOL _field4;
    BOOL _field5;
    BOOL _field6;
    BOOL _field7;
    unsigned char _field8;
    struct DisplayStyle _field9;
    unsigned char _field10;
    BOOL _field11;
    unsigned char _field12;
    basic_string_805fe43b _field13;
    BOOL _field14;
};

struct Range {
    unsigned long long _start;
    unsigned long long _count;
};

struct Range<float> {
    float _field1;
    float _field2;
};

struct RasterOverlayData;

struct RasterizerState {
    int _field1;
    int _field2;
    unsigned int _field3;
    struct Box<unsigned int, 2> _field4;
};

struct Record {
    unsigned int _field1;
    unsigned int _field2;
    float _field3;
    float _field4;
    long long _field5;
    int _field6;
    float _field7;
    float _field8;
    int _field9;
};

struct RenderBuffer;

struct RenderItem {
    CDUnknownFunctionPointerType *_vptr$RenderItem;
    char *_name;
    struct RenderState *_renderState;
    struct PipelineSetup *_pipelineSetup;
    unsigned int _stencilRefValue;
    unsigned int _renderOrder;
    float _lineWidth;
    struct Mesh *_mesh;
    struct Range _range;
    struct Range *_ranges;
    unsigned long long _rangeCount;
};

struct RenderItemBatcher {
    struct vector<ggl::Range, std::__1::allocator<ggl::Range>> _activeRanges;
    unsigned long long _rangePoolCount;
    struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange>> _rangePool;
    struct vector<ggl::Range, std::__1::allocator<ggl::Range>> _activeRanges;
    struct RenderItem *_prototype;
    struct Pool<ggl::RenderItem> _pool;
    unsigned long long _rangePoolCount;
    struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange>> _rangePool;
};

struct RenderResource;

struct RenderResourceFences;

struct RenderState {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct DepthState _field6;
    struct StencilState _field7;
    struct RasterizerState _field8;
    BOOL _field9;
};

struct RenderTarget {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    CDUnknownFunctionPointerType *_field4;
    char *_field5;
    struct RenderTargetFormat _field6;
    struct Texture *_field7[4];
    struct Texture *_field8[4];
    struct Texture *_field9;
    unsigned int _field10;
    unsigned int _field11;
    BOOL _field12;
    BOOL _field13;
};

struct RenderTargetFormat {
    int colorFormats[4];
    unsigned long long colorFormatsCount;
    unsigned int samples;
    int depthStencilFormat;
};

struct RenderTransaction;

struct RenderTree {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct RenderableGroup;

struct Renderer {
    CDUnknownFunctionPointerType *_field1;
    struct Device *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    BOOL _field6;
    float _field7;
    struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer>>> _field8;
    struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> _field9;
    struct shared_ptr<ggl::CommonLibrary> _field10;
    struct unique_ptr<ggl::RenderResourceFences, std::__1::default_delete<ggl::RenderResourceFences>> _field11;
    struct Texture2D *_field12;
    struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>> _field13;
};

struct ResourceAccessor {
    CDUnknownFunctionPointerType *_field1;
};

struct ResourceManager;

struct RibbonBatch<ggl::RoadRibbonDescriptor>;

struct RibbonBatch<ggl::TransitRibbonDescriptor>;

struct RibbonLayer<ggl::RoadRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*, std::__1::allocator<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*>> _field2;
    struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> _field3;
    struct RenderState *_field4[8];
};

struct RibbonLayer<ggl::TransitRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*, std::__1::allocator<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>> _field2;
    struct vector<ggl::TransitLineRibbon::BaseMesh *, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
};

struct RigidTransform<double> {
    struct Matrix<double, 3, 3> _rotation;
    Matrix_6e1d3589 _translation;
};

struct RoadBatch;

struct RoadLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::RoadBatch *, std::__1::allocator<md::RoadBatch *>> _field2;
    struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> _field3;
    struct RenderState *_field4[8];
    shared_ptr_696716c4 _field5;
    unsigned long long _field6;
    struct RoadSharedResources *_field7;
    struct TrafficSpeedStyling *_field8;
};

struct RoadLayoutContext {
    struct LayoutContext *_field1;
    float _field2;
    float _field3;
    char _field4;
    char _field5;
    float _field6;
    float _field7;
    struct CGSize _field8;
    struct CGSize _field9;
    BOOL _field10;
    unsigned char _field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    Matrix_5173352a _field16[5];
    BOOL _field17;
};

struct RoadSharedResources;

struct RoadSignColoring {
    BOOL _hasFillColor;
    BOOL _hasStrokeColor;
    BOOL _hasShadowColor;
    BOOL _hasTextColor;
    struct array<double, 4> _fillColorComponents;
    struct array<double, 4> _strokeColorComponents;
    struct array<double, 4> _shadowColorComponents;
    struct array<double, 4> _textColorComponents;
};

struct RoadSignGeneratedMetrics {
    struct RoadSignPartMetrics _leftRoadSignPartMetrics;
    struct RoadSignPartMetrics _rightRoadSignPartMetrics;
    struct RoadSignPartMetrics _stretchedRoadSignPartMetrics;
    struct RoadSignPartMetrics _middleRoadSignPartMetrics;
    BOOL _hasMiddleSignPart;
    struct CGSize _imageSize;
    struct CGRect _signBaseRect;
    double _stretchedRoadSignPartWidth;
    struct CGPoint _arrowTipPosition;
    struct CGPoint _textPosition;
    struct CGRect _leftPartRect;
    struct CGRect _rightPartRect;
    struct CGRect _stretchedPartRect;
    struct CGRect _middlePartRect;
    struct CGRect _middleLeftStretchedPartRect;
    struct CGRect _middleRightStretchedPartRect;
};

struct RoadSignMetrics {
    unsigned char _orientation;
    double _scale;
    double _contentScale;
    double _arrowWeight;
    double _arrowLength;
    struct CGSize _shadowOffset;
    double _shadowRadius;
    double _strokeWeight;
    double _signHeight;
    double _signMargin;
    double _horizontalMargin;
    double _verticalMargin;
    double _cornerRadius;
};

struct RoadSignPartMetrics {
    unsigned char _type;
    struct CGSize _imageSize;
    struct CGRect _signBaseRect;
    double _topEmptySpaceHeight;
    double _bottomEmptySpaceHeight;
    double _leftEmptySpaceWidth;
    double _rightEmptySpaceWidth;
    double _outsideImagePathExtension;
    BOOL _hasArrows;
    struct CGPoint _arrowWingMin;
    struct CGPoint _arrowWingMax;
    struct CGPoint _arrowTip;
};

struct RoadSignTextMetrics {
    double _scale;
    double _contentScale;
    double _horizontalMargin;
    double _verticalOffset;
    double _textSize;
    basic_string_805fe43b _fontFamily;
    double _textDrawWidth;
};

struct RouteJunctionInfo;

struct RouteLineArrowSharedPipelineStates {
    struct shared_ptr<ggl::RouteLineArrow::BasePipelineState> _field1;
};

struct RouteLineArrowSharedRenderStates {
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field1;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field2;
};

struct RouteLineArrowSharedResources {
    struct RouteLineArrowSharedPipelineStates _field1;
    struct RouteLineArrowSharedRenderStates _field2;
    shared_ptr_479d1306 _field3;
};

struct RouteLineLayer;

struct RouteLineManager;

struct RouteLineSharedPipelineStates {
    struct shared_ptr<ggl::RouteLine::BasePipelineState> _field1;
    struct shared_ptr<ggl::PatternedRibbon::RoutePipelineState> _field2;
    struct shared_ptr<ggl::RouteLineAlphaReset::BasePipelineState> _field3;
    struct shared_ptr<ggl::RouteLineTraffic::BasePipelineState> _field4;
};

struct RouteLineSharedRenderStates {
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field1;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field2;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field3;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field4;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field5;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field6;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field7;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field8;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field9;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field10;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field11;
};

struct RouteLineSharedResources {
    struct RouteLineSharedRenderStates _field1;
    struct RouteLineSharedPipelineStates _field2;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> _field3;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> _field4;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> _field5;
    struct AlphaAtlas *_field6;
    struct DashTextureCache _field7;
};

struct RoutePipelineState;

struct RouteSegment;

struct SamplerState;

struct Scene;

struct ShaderEntry;

struct ShaderLibraryData;

struct ShaderLibraryDescriptor;

struct ShadowPathMesh;

struct ShadowPathPipelineState;

struct SharedDeviceResources;

struct SimpleTileKey;

struct SkyMesh;

struct SkyPipelineSetup;

struct SkyPipelineState;

struct SolidTrafficBatch;

struct SolidTrafficLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::SolidTrafficBatch *, std::__1::allocator<md::SolidTrafficBatch *>> _field2;
    struct vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
    shared_ptr_696716c4 _field5;
    unsigned long long _field6;
    struct TrafficSharedResources *_field7;
};

struct Spring<double, md::SpringType::Angular> {
    double _position;
    double _velocity;
    double _restingPosition;
    double _kSpring;
    double _kDamper;
    int _type;
};

struct Spring<double, md::SpringType::Linear> {
    double _position;
    double _velocity;
    double _restingPosition;
    double _kSpring;
    double _kDamper;
    int _type;
};

struct Spring<gm::Matrix<double, 2, 1>, md::SpringType::Linear> {
    Matrix_2bdd42a3 _position;
    Matrix_2bdd42a3 _velocity;
    Matrix_2bdd42a3 _restingPosition;
    double _kSpring;
    double _kDamper;
    int _type;
};

struct StandardLibrary {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    struct ShaderLibraryDescriptor *_field4;
    struct vector<ggl::ShaderLibrary::FunctionEntry, std::__1::allocator<ggl::ShaderLibrary::FunctionEntry>> _field5;
    struct vector<ggl::ShaderLibrary::ShaderEntry, std::__1::allocator<ggl::ShaderLibrary::ShaderEntry>> _field6;
    struct vector<std::__1::shared_ptr<ggl::Shader>, std::__1::allocator<std::__1::shared_ptr<ggl::Shader>>> _field7;
    struct shared_ptr<ggl::ShaderLibraryData> _field8;
};

struct StencilManager {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    struct ClearItem _field4;
};

struct StencilState {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
};

struct String {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> _field1;
};

struct StyleSheet<gss::PropertyID>;

struct StyleTexture<md::TransitLineSegment::StylePixel>;

struct Stylesheet;

struct StylesheetManager<gss::PropertyID>;

struct StylesheetManager<gss::ScenePropertyID>;

struct StylesheetQuery<gss::PropertyID>;

struct StylesheetVendor;

struct TexelRun {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
};

struct Texture {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    CDUnknownFunctionPointerType *_field4;
    char *_field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
};

struct Texture2D {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    CDUnknownFunctionPointerType *_field4;
    char *_field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    unsigned int _field10;
    struct shared_ptr<const ggl::TextureDataAbstract> _field11;
    BOOL _field12;
    BOOL _field13;
    unsigned int _field14;
    unsigned int _field15;
    BOOL _field16;
    shared_ptr_cedd5232 _field17;
};

struct Texture2DLoadItem;

struct TextureData2D;

struct TextureDataAbstract;

struct TexturePool;

struct TileBound;

struct TileExclusionArea;

struct TileSetNode;

struct Timer {
    double _field1;
};

struct TrafficDynamicTile;

struct TrafficMeshStyle {
    int _style[4];
};

struct TrafficSegment {
    unsigned int _field1;
    unsigned char _field2;
};

struct TrafficSegmentsAlongRoute {
    struct vector<md::TrafficSegment, std::__1::allocator<md::TrafficSegment>> _field1;
};

struct TrafficSharedPipelineStates {
    struct shared_ptr<ggl::SolidTraffic::BasePipelineState> _field1;
    struct shared_ptr<ggl::TrafficGlow::BasePipelineState> _field2;
    struct shared_ptr<ggl::OptimizedTraffic::BasePipelineState> _field3;
};

struct TrafficSharedRenderStates {
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field1;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field2;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field3;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field4;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field5;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field6;
};

struct TrafficSharedResources {
    struct TrafficSharedPipelineStates _field1;
    struct TrafficSharedRenderStates _field2;
    struct IsoAlphaAtlas *_field3;
};

struct TrafficSkeletonTile {
    struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record>> m_records;
};

struct TrafficSpeedStyling;

struct TrafficStream {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    float _field4;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> _field5;
    float _field6;
    struct TexelRun _field7;
    struct unordered_map<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun, md::TrafficStream::SectionKeyHash, std::__1::equal_to<md::TrafficStream::SectionKey>, std::__1::allocator<std::__1::pair<const md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>>> _field8;
};

struct TransitInterTileMediator;

struct TransitItemMarker;

struct TransitJunctionManager;

struct TransitLine;

struct TransitLineSharedResources {
    struct shared_ptr<ggl::TransitLineRibbon::BasePipelineState> _field1;
    struct shared_ptr<ggl::SolidRibbon::PipelineState> _field2;
};

struct TransitLink;

struct TransitNodeFeaturePool {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field3;
    struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field4;
    struct fast_shared_ptr<md::unsynchronized_weak_interface_ptr<md::TransitNodeFeaturePool>> _field5;
    struct LabelExternalObjectsModerator *_field6;
    struct unordered_map<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>>> _field7;
    struct unordered_map<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>>> _field8;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field9;
    struct unique_ptr<md::TransitNodeTextureAtlas, std::__1::default_delete<md::TransitNodeTextureAtlas>> _field10;
    struct unique_ptr<md::TransitNodeTextureAtlas, std::__1::default_delete<md::TransitNodeTextureAtlas>> _field11;
    struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> _field12[4];
    struct unique_ptr<ggl::TransitNode::BaseMesh, std::__1::default_delete<ggl::TransitNode::BaseMesh>> _field13[4];
    struct shared_ptr<ggl::ConstantDataTyped<ggl::TransitNode::Settings>> _field14;
    struct unique_ptr<ggl::TransitNodeColorized::BasePipelineSetup, std::__1::default_delete<ggl::TransitNodeColorized::BasePipelineSetup>> _field15;
    struct unique_ptr<ggl::TransitNodeRGB::BasePipelineSetup, std::__1::default_delete<ggl::TransitNodeRGB::BasePipelineSetup>> _field16;
    struct shared_ptr<ggl::IndexDataTyped<unsigned short>> _field17;
    struct shared_ptr<ggl::IndexDataTyped<unsigned short>> _field18;
    float _field19;
    struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field20;
};

struct TransitNodeTextureAtlas;

struct TriggerManager;

struct Unit<DegreeUnitDescription, double> {
    double _value;
};

struct Unit<MeterUnitDescription, double> {
    double _value;
};

struct Unit<RadianUnitDescription, double> {
    double _value;
};

struct UserViewNode;

struct VKCacheKey {
    unsigned int a;
    unsigned int b;
    unsigned int c;
    unsigned int d;
};

struct VKCameraState {
    Matrix_6e1d3589 position;
    Matrix_08d701e4 orientation;
    double aspectRatio;
    double verticalFieldOfView;
    double horizontalOffset;
};

struct VKClassicGlobeCanvas;

struct VKEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct VKFootprintConvexHull_struct {
    int edgeCount;
    Matrix_6e1d3589 edgeOrigin[6];
    Matrix_6e1d3589 edgeNormal[6];
};

struct VKGlobeRouteSplit {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct VKGlobeStylesheet;

struct VKGuidanceManeuverArrowMetrics {
    struct CGSize _field1;
    double _field2;
    double _field3;
    double _field4;
    struct CGSize _field5;
    double _field6;
    double _field7;
    double _field8;
    unsigned char _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
    double _field21;
    double _field22;
    double _field23;
    double _field24;
    double _field25;
    BOOL _field26;
    double _field27;
    double _field28;
    double _field29;
    BOOL _field30;
    BOOL _field31;
};

struct VKIconStyleDescriptor {
    struct VKIconStyleInfo _field1;
    unsigned int _field2;
    basic_string_805fe43b _field3;
};

struct VKIconStyleInfo {
    unsigned char iconStyle;
    Matrix_5173352a iconBadgeColor;
    Matrix_5173352a iconGradientColor[2];
    Matrix_5173352a iconBadgeLightColor;
    unsigned char iconBadgeLightBlendMode;
    Matrix_5173352a iconGlyphColor;
    unsigned char iconGlyphStyle;
    unsigned char iconGlyphBlendMode;
    float iconHaloSize;
    Matrix_5173352a iconHaloColor;
    Matrix_8746f91e iconDropShadowOffset;
    float iconDropShadowSize;
    Matrix_5173352a iconDropShadowColor;
    float iconCornerRadius;
    float iconBevelAmount;
};

struct VKLabelNavArtworkCache {
    struct unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *>, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *>>> _field1;
    struct unique_ptr<LRUCache<unsigned long, CGImage *>, std::__1::default_delete<LRUCache<unsigned long, CGImage *>>> _field2;
    struct CGColor *_field3;
    struct CGColor *_field4;
    struct VKGuidanceManeuverArrowMetrics _field5;
};

struct VKLabelNavRouteRoadEdge {
    struct PolylineCoordinate _field1;
    struct PolylineCoordinate _field2;
    CDStruct_183601bc *_field3;
};

struct VKPerformanceTestResult_struct {
    char *_field1;
    float _field2[5];
};

struct VKRasterTileKey {
    unsigned int x;
    unsigned int y;
    unsigned int z;
    unsigned int pointSize;
};

struct VKRequestKey {
    struct {
        struct {
            double _field1;
            double _field2;
        } _field1;
        struct {
            double _field1;
            double _field2;
        } _field2;
    } _field1;
    long long _field2;
    struct CGSize _field3;
    id _field4;
    unsigned short _field5;
};

struct VKTileKey {
    unsigned int z;
    int x;
    int y;
    unsigned int pointSize;
};

struct VehicleState {
    BOOL _isParked;
};

struct View;

struct ViewTransform;

struct Viewport {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
};

struct ZoomRange {
    float min;
    float max;
};

struct _GEOGenericContainer<md::GenericShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
    struct mutex _lock;
    struct list<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>>> _list;
    struct unordered_map<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> _map;
    unsigned long long _maxCapacity;
    unsigned long long _maxCost;
    unsigned long long _currentCost;
    unsigned long long _currentCount;
};

struct _GEOGenericContainer<md::IconCacheKey, id, std::__1::hash<md::IconCacheKey>, std::__1::equal_to<md::IconCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
    struct mutex _lock;
    struct list<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>>> _list;
    struct unordered_map<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>, std::__1::hash<md::IconCacheKey>, std::__1::equal_to<md::IconCacheKey>, std::__1::allocator<std::__1::pair<const md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>>> _map;
    unsigned long long _maxCapacity;
    unsigned long long _maxCost;
    unsigned long long _currentCost;
    unsigned long long _currentCount;
};

struct _GEOGenericContainer<md::ShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
    struct mutex _lock;
    struct list<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>>> _list;
    struct unordered_map<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> _map;
    unsigned long long _maxCapacity;
    unsigned long long _maxCost;
    unsigned long long _currentCost;
    unsigned long long _currentCount;
};

struct _GEOTileKey {
    unsigned int z:6;
    unsigned int x:26;
    unsigned int y:26;
    unsigned int type:6;
    unsigned int pixelSize:8;
    unsigned int textScale:8;
    unsigned int provider:8;
    unsigned int expires:1;
    unsigned int reserved1:7;
    unsigned char reserved2[4];
};

struct _MDRenderTargetRef {
    id ptr;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
    struct __rep {
        union {
            struct __long {
                unsigned long long __cap_;
                unsigned long long __size_;
                char *__data_;
            } __l;
            struct __short {
                union {
                    unsigned char __size_;
                    char __lx;
                } ;
                char __data_[23];
            } __s;
            struct __raw {
                unsigned long long __words[3];
            } __r;
        } ;
    } __first_;
};

struct __hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> *__next_;
};

struct __list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> {
    struct __list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__prev_;
    struct __list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__next_;
};

struct __list_node_base<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> {
    struct __list_node_base<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> *__prev_;
    struct __list_node_base<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> *__next_;
};

struct __list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> {
    struct __list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__prev_;
    struct __list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__next_;
};

struct __list_node_base<md::TransitDisplayConnection, void *> {
    struct __list_node_base<md::TransitDisplayConnection, void *> *__prev_;
    struct __list_node_base<md::TransitDisplayConnection, void *> *__next_;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct _fast_shared_ptr_control;

struct _geo_weak_ptr<id> {
    id _p;
};

struct _release_objc;

struct _retain_objc;

struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct _retain_objc _field3;
    struct _release_objc _field4;
};

struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKRouteContext *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct _retain_ptr<id<VKCustomFeatureAnnotation>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct _retain_objc _field3;
    struct _release_objc _field4;
};

struct _retain_ptr<id<VKCustomFeatureDataSource>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    id _obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct array<double, 4> {
    double __elems_[4];
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> __r_;
};

struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>>> {
    struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem>*, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>*>> {
        struct fast_shared_ptr<ggl::QueryItem> **_field1;
        struct fast_shared_ptr<ggl::QueryItem> **_field2;
        struct fast_shared_ptr<ggl::QueryItem> **_field3;
        struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem>**, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>*>> {
            struct fast_shared_ptr<ggl::QueryItem> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery>> {
    struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *>> {
        struct PendingQuery **_field1;
        struct PendingQuery **_field2;
        struct PendingQuery **_field3;
        struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *>> {
            struct PendingQuery **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery>> {
        unsigned long long _field1;
    } _field3;
};

struct fast_shared_ptr<ggl::QueryItem>;

struct fast_shared_ptr<md::RouteLineSection> {
    struct _fast_shared_ptr_control *_control;
};

struct fast_shared_ptr<md::unsynchronized_weak_interface_ptr<md::LabelExternalObjectsModerator>> {
    struct _fast_shared_ptr_control *_field1;
};

struct fast_shared_ptr<md::unsynchronized_weak_interface_ptr<md::TransitNodeFeaturePool>> {
    struct _fast_shared_ptr_control *_field1;
};

struct function<void (const md::RoadPiece &)> {
    struct type _field1;
    struct __base<void (const md::RoadPiece &)> *_field2;
};

struct list<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>>> {
    struct __list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct list<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>>> {
    struct __list_node_base<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct list<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>>> {
    struct __list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct list<md::TransitDisplayConnection, std::__1::allocator<md::TransitDisplayConnection>> {
    struct __list_node_base<md::TransitDisplayConnection, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::TransitDisplayConnection, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, std::__1::allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData>>>> {
    struct __tree<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::less<VKPolylineOverlay *>, true>, std::__1::allocator<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::less<VKPolylineOverlay *>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<VKTileKey, md::LabelCustomFeatureProvider::TileInfo, md::LabelCustomFeatureProvider::TileKeyLess, std::__1::allocator<std::__1::pair<const VKTileKey, md::LabelCustomFeatureProvider::TileInfo>>> {
    struct __tree<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, md::LabelCustomFeatureProvider::TileKeyLess, true>, std::__1::allocator<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, md::LabelCustomFeatureProvider::TileKeyLess, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> {
    struct __tree<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyComp, true>, std::__1::allocator<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyComp, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>, NSStringMapComparison, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>>> {
    struct __tree<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, NSStringMapComparison, true>, std::__1::allocator<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, NSStringMapComparison, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>>>> {
    struct __tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>>, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>>, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>>, altitude::GlobeView::LessVector2i, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<gss::StylesheetQuery<gss::PropertyID>*, std::__1::unique_ptr<md::RoadStyling, std::__1::default_delete<md::RoadStyling>>, std::__1::less<gss::StylesheetQuery<gss::PropertyID>*>, std::__1::allocator<std::__1::pair<gss::StylesheetQuery<gss::PropertyID>*const, std::__1::unique_ptr<md::RoadStyling, std::__1::default_delete<md::RoadStyling>>>>> {
    struct __tree<std::__1::__value_type<gss::StylesheetQuery<gss::PropertyID>*, std::__1::unique_ptr<md::RoadStyling, std::__1::default_delete<md::RoadStyling>>>, std::__1::__map_value_compare<gss::StylesheetQuery<gss::PropertyID>*, std::__1::__value_type<gss::StylesheetQuery<gss::PropertyID>*, std::__1::unique_ptr<md::RoadStyling, std::__1::default_delete<md::RoadStyling>>>, std::__1::less<gss::StylesheetQuery<gss::PropertyID>*>, true>, std::__1::allocator<std::__1::__value_type<gss::StylesheetQuery<gss::PropertyID>*, std::__1::unique_ptr<md::RoadStyling, std::__1::default_delete<md::RoadStyling>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::StylesheetQuery<gss::PropertyID>*, std::__1::unique_ptr<md::RoadStyling, std::__1::default_delete<md::RoadStyling>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::StylesheetQuery<gss::PropertyID>*, std::__1::__value_type<gss::StylesheetQuery<gss::PropertyID>*, std::__1::unique_ptr<md::RoadStyling, std::__1::default_delete<md::RoadStyling>>>, std::__1::less<gss::StylesheetQuery<gss::PropertyID>*>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::StylesheetQuery<gss::PropertyID>*, std::__1::unique_ptr<md::TrafficSpeedStyling, std::__1::default_delete<md::TrafficSpeedStyling>>, std::__1::less<gss::StylesheetQuery<gss::PropertyID>*>, std::__1::allocator<std::__1::pair<gss::StylesheetQuery<gss::PropertyID>*const, std::__1::unique_ptr<md::TrafficSpeedStyling, std::__1::default_delete<md::TrafficSpeedStyling>>>>> {
    struct __tree<std::__1::__value_type<gss::StylesheetQuery<gss::PropertyID>*, std::__1::unique_ptr<md::TrafficSpeedStyling, std::__1::default_delete<md::TrafficSpeedStyling>>>, std::__1::__map_value_compare<gss::StylesheetQuery<gss::PropertyID>*, std::__1::__value_type<gss::StylesheetQuery<gss::PropertyID>*, std::__1::unique_ptr<md::TrafficSpeedStyling, std::__1::default_delete<md::TrafficSpeedStyling>>>, std::__1::less<gss::StylesheetQuery<gss::PropertyID>*>, true>, std::__1::allocator<std::__1::__value_type<gss::StylesheetQuery<gss::PropertyID>*, std::__1::unique_ptr<md::TrafficSpeedStyling, std::__1::default_delete<md::TrafficSpeedStyling>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::StylesheetQuery<gss::PropertyID>*, std::__1::unique_ptr<md::TrafficSpeedStyling, std::__1::default_delete<md::TrafficSpeedStyling>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::StylesheetQuery<gss::PropertyID>*, std::__1::__value_type<gss::StylesheetQuery<gss::PropertyID>*, std::__1::unique_ptr<md::TrafficSpeedStyling, std::__1::default_delete<md::TrafficSpeedStyling>>>, std::__1::less<gss::StylesheetQuery<gss::PropertyID>*>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo, std::__1::less<id<VKCustomFeatureAnnotation>>, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>>> {
    struct __tree<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::__map_value_compare<id<VKCustomFeatureAnnotation>, std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::less<id<VKCustomFeatureAnnotation>>, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureAnnotation>, std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::less<id<VKCustomFeatureAnnotation>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<md::Anchor *, float, std::__1::less<md::Anchor *>, std::__1::allocator<std::__1::pair<md::Anchor *const, float>>> {
    struct __tree<std::__1::__value_type<md::Anchor *, float>, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true>, std::__1::allocator<std::__1::__value_type<md::Anchor *, float>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::Anchor *, float>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>>> {
    struct __tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, std::__1::less<md::CommandBufferId>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>>> {
    struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, md::LabelExternalRoadFeatureLess, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>>> {
    struct __tree<std::__1::__value_type<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>, std::__1::less<unsigned int>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct pair<TransitLineWithLink, float>;

struct pair<bool, GEOFeatureStylePair>;

struct pair<md::CommandBufferId, md::CommandBufferId> {
    unsigned char _field1;
    unsigned char _field2;
};

struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>;

struct pair<unsigned short, unsigned int>;

struct read_write_lock {
    struct _opaque_pthread_rwlock_t {
        long long __sig;
        char __opaque[192];
    } _lock;
};

struct set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *>> {
    struct __tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<gss::StylesheetQuery<gss::PropertyID>*, std::__1::less<gss::StylesheetQuery<gss::PropertyID>*>, std::__1::allocator<gss::StylesheetQuery<gss::PropertyID>*>> {
    struct __tree<gss::StylesheetQuery<gss::PropertyID>*, std::__1::less<gss::StylesheetQuery<gss::PropertyID>*>, std::__1::allocator<gss::StylesheetQuery<gss::PropertyID>*>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<gss::StylesheetQuery<gss::PropertyID>*, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<gss::StylesheetQuery<gss::PropertyID>*>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct set<void *, std::__1::less<void *>, std::__1::allocator<void *>> {
    struct __tree<void *, std::__1::less<void *>, std::__1::allocator<void *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<void *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<void *>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<MITManager> {
    struct MITManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<altitude::Stylesheet> {
    struct Stylesheet *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<bool> {
    BOOL *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const ggl::TextureDataAbstract> {
    struct TextureDataAbstract *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<const md::GenericShieldStyleInfo> {
    struct GenericShieldStyleInfo *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<const md::TransitLineSharedResources> {
    struct TransitLineSharedResources *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::BitmapData> {
    struct BitmapData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::BitmapDataBase> {
    struct BitmapDataBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::BuildingFacadeDepth::BuildingPipelineState> {
    struct BuildingPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::BuildingFlat::CompressedMeshPipelineState> {
    struct CompressedMeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState> {
    struct BuildingFlatStrokePipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::BuildingPointyRoofDepth::BuildingPipelineState> {
    struct BuildingPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::BuildingShadow::MeshPipelineState> {
    struct MeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::BuildingTopDepth::CompressedMeshPipelineState> {
    struct CompressedMeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Clut::Pos2DUVPipelineState> {
    struct Pos2DUVPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::CommonLibrary> {
    struct CommonLibrary *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::AnimatableTexture::Variant>> {
    struct ConstantDataTyped<ggl::AnimatableTexture::Variant> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> {
    struct ConstantDataTyped<ggl::Building::Fade> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::Building::Lighting>> {
    struct ConstantDataTyped<ggl::Building::Lighting> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog>> {
    struct ConstantDataTyped<ggl::Fog::Skyfog> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::Grid::Style>> {
    struct ConstantDataTyped<ggl::Grid::Style> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::GridBase::GridView>> {
    struct ConstantDataTyped<ggl::GridBase::GridView> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::PolygonFill::Fill>> {
    struct ConstantDataTyped<ggl::PolygonFill::Fill> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::SimpleGrid::Style>> {
    struct ConstantDataTyped<ggl::SimpleGrid::Style> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::Sky::Style>> {
    struct ConstantDataTyped<ggl::Sky::Style> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>> {
    struct ConstantDataTyped<ggl::Tile::View> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::TransitNode::Settings>> {
    struct ConstantDataTyped<ggl::TransitNode::Settings> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::Debug::BaseMesh> {
    struct BaseMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Debug::BasePipelineState> {
    struct BasePipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::DebugPoints::BasePipelineState> {
    struct BasePipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::DebugRenderer>;

struct shared_ptr<ggl::Device> {
    struct Device *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::DiffuseBuilding::BuildingPipelineState> {
    struct BuildingPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::DiffuseBuildingPointyRoof::BuildingPipelineState> {
    struct BuildingPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::DiffuseBuildingTop::CompressedMeshPipelineState> {
    struct CompressedMeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::DiffuseLandmark::BuildingPipelineState> {
    struct BuildingPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::FlyoverLibrary> {
    struct FlyoverLibrary *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Fog::FogPipelineState> {
    struct FogPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::FoggedDiffuseBuilding::BuildingPipelineState> {
    struct BuildingPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState> {
    struct CompressedMeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::FoggedDiffuseLandmark::LandmarkPipelineState> {
    struct LandmarkPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::FoggedSpecularBuilding::BuildingPipelineState> {
    struct BuildingPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState> {
    struct CompressedMeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::FoggedSpecularLandmark::LandmarkPipelineState> {
    struct LandmarkPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Glow::MeshPipelineState> {
    struct MeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::GlowAlpha::MeshPipelineState> {
    struct MeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Grid::GridPipelineState> {
    struct GridPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::GridBase::GridMesh> {
    struct GridMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::IndexData> {
    struct IndexData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::IndexDataTyped<unsigned short>> {
    struct IndexDataTyped<unsigned short> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::LandmarkDepth::BuildingPipelineState> {
    struct BuildingPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::LandmarkFlat::LandmarkPipelineState> {
    struct LandmarkPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::OESDevice> {
    struct OESDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::OptimizedTraffic::BasePipelineState> {
    struct BasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::PatternedRibbon::RoutePipelineState> {
    struct RoutePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::PipelineState> {
    struct PipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::PolygonAnimatableFill::CompressedMeshPipelineState> {
    struct CompressedMeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PolygonAnimatableStroke::MeshPipelineState> {
    struct MeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PolygonBase::MeshMesh> {
    struct MeshMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PolygonFill::CompressedMeshPipelineState> {
    struct CompressedMeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PolygonFill::MeshPipelineState> {
    struct MeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PolygonShadowedStroke::ShadowPathPipelineState> {
    struct ShadowPathPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PolygonSolidFill::MeshPipelineState> {
    struct MeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PolygonStroke::MeshPipelineState> {
    struct MeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PrefilteredLine::PrefilteredLinePipelineState> {
    struct PrefilteredLinePipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderItem> {
    struct RenderItem *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderQueue> {
    struct RenderQueue *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderState> {
    struct RenderState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderTransaction> {
    struct RenderTransaction *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::RouteLine::BasePipelineState> {
    struct BasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::RouteLineAlphaReset::BasePipelineState> {
    struct BasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::RouteLineArrow::BasePipelineState> {
    struct BasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::RouteLineTraffic::BasePipelineState> {
    struct BasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::SamplerState> {
    struct SamplerState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::Shader>;

struct shared_ptr<ggl::ShaderLibraryData> {
    struct ShaderLibraryData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::SimpleGrid::GridPipelineState> {
    struct GridPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Sky::SkyMesh> {
    struct SkyMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Sky::SkyPipelineSetup> {
    struct SkyPipelineSetup *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Sky::SkyPipelineState> {
    struct SkyPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::SolidRibbon::PipelineState> {
    struct PipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::SolidTraffic::BasePipelineState> {
    struct BasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::SpecularBuilding::BuildingPipelineState> {
    struct BuildingPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::SpecularBuildingPointyRoof::BuildingPipelineState> {
    struct BuildingPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::SpecularBuildingTop::CompressedMeshPipelineState> {
    struct CompressedMeshPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::SpecularLandmark::LandmarkPipelineState> {
    struct LandmarkPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::StandardLibrary> {
    struct StandardLibrary *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Texture2D> {
    struct Texture2D *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::TextureAlphaMask::MeshPipelineSetup> {
    struct MeshPipelineSetup *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::TextureAlphaMask::MeshPipelineState> {
    struct MeshPipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::TextureData2D> {
    struct TextureData2D *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::TextureMesh::MeshMesh> {
    struct MeshMesh *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::TextureWithBrightness::MeshPipelineSetup> {
    struct MeshPipelineSetup *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::TextureWithBrightness::MeshPipelineState> {
    struct MeshPipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::TextureWithReverseAlpha::Pos2DUVPipelineState> {
    struct Pos2DUVPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Textured::Pos2DUVPipelineState> {
    struct Pos2DUVPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::TrafficGlow::BasePipelineState> {
    struct BasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::TransitLineRibbon::BasePipelineState> {
    struct BasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::VertexData>;

struct shared_ptr<gss::CartoStyle<gss::PropertyID>> {
    struct CartoStyle<gss::PropertyID> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<gss::StyleSheet<gss::PropertyID>> {
    struct StyleSheet<gss::PropertyID> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> {
    struct StylesheetManager<gss::PropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> {
    struct StylesheetManager<gss::ScenePropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gss::StylesheetQuery<gss::PropertyID>> {
    struct StylesheetQuery<gss::PropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::Anchor> {
    struct Anchor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::AnchorContext> {
    struct AnchorContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::DataOverrideManager> {
    struct DataOverrideManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::FeatureMarker> {
    struct FeatureMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::GlobeAdapterData> {
    struct GlobeAdapterData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelClusterTree> {
    struct LabelClusterTree *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelExternalPointFeature> {
    struct LabelExternalPointFeature *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelExternalRoadFeature>;

struct shared_ptr<md::LabelFeature>;

struct shared_ptr<md::LabelFeatureMarker> {
    struct LabelFeatureMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelImageKey> {
    struct LabelImageKey *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelManager> {
    struct LabelManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelMapTile> {
    struct LabelMapTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelMarker> {
    struct LabelMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelScene> {
    struct LabelScene *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelTile> {
    struct LabelTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelTransitRoute> {
    struct LabelTransitRoute *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelTransitRouteLine> {
    struct LabelTransitRouteLine *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::NavCurrentRoadSign> {
    struct NavCurrentRoadSign *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::NavLabel> {
    struct NavLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::ObjectGroup> {
    struct ObjectGroup *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::RasterOverlayData> {
    struct RasterOverlayData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::StylesheetVendor> {
    struct StylesheetVendor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TransitConnectedNode>;

struct shared_ptr<md::TransitInterTileMediator> {
    struct TransitInterTileMediator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TransitItemMarker> {
    struct TransitItemMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TransitLineSharedResources> {
    struct TransitLineSharedResources *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TransitNode>;

struct shared_ptr<md::TransitOrphanNode>;

struct shared_ptr<md::TransitParentNode>;

struct shared_ptr<md::VKGlobeStylesheet> {
    struct VKGlobeStylesheet *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::ViewTransform> {
    struct ViewTransform *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<zilch::TrafficDynamicTile> {
    struct TrafficDynamicTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct type {
    unsigned char _field1[24];
};

struct unique_ptr<AnnotationPipelineStates, std::__1::default_delete<AnnotationPipelineStates>> {
    struct __compressed_pair<AnnotationPipelineStates *, std::__1::default_delete<AnnotationPipelineStates>> {
        struct AnnotationPipelineStates *__first_;
    } __ptr_;
};

struct unique_ptr<LRUCache<unsigned long, CGImage *>, std::__1::default_delete<LRUCache<unsigned long, CGImage *>>> {
    struct __compressed_pair<LRUCache<unsigned long, CGImage *>*, std::__1::default_delete<LRUCache<unsigned long, CGImage *>>> {
        struct LRUCache<unsigned long, CGImage *> *_field1;
    } _field1;
};

struct unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *>, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *>>> {
    struct __compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *>*, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *>>> {
        struct LRUCache<unsigned long, VKRoadSignArtwork *> *_field1;
    } _field1;
};

struct unique_ptr<VKLabelNavArtworkCache, std::__1::default_delete<VKLabelNavArtworkCache>> {
    struct __compressed_pair<VKLabelNavArtworkCache *, std::__1::default_delete<VKLabelNavArtworkCache>> {
        struct VKLabelNavArtworkCache *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas>> {
    struct __compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas>> {
        struct AlphaAtlas *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::ClearItem, std::__1::default_delete<ggl::ClearItem>> {
    struct __compressed_pair<ggl::ClearItem *, std::__1::default_delete<ggl::ClearItem>> {
        struct ClearItem *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Clut::Pos2DUVPipelineSetup, std::__1::default_delete<ggl::Clut::Pos2DUVPipelineSetup>> {
    struct __compressed_pair<ggl::Clut::Pos2DUVPipelineSetup *, std::__1::default_delete<ggl::Clut::Pos2DUVPipelineSetup>> {
        struct Pos2DUVPipelineSetup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>> {
    struct __compressed_pair<ggl::CommandBuffer *, std::__1::default_delete<ggl::CommandBuffer>> {
        struct CommandBuffer *_field1;
    } _field1;
};

struct unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My>>> {
    struct __compressed_pair<ggl::DataWrite<ggl::ColoredText::My>*, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My>>> {
        struct DataWrite<ggl::ColoredText::My> *_field1;
    } _field1;
};

struct unique_ptr<ggl::Debug::BaseMesh, std::__1::default_delete<ggl::Debug::BaseMesh>> {
    struct __compressed_pair<ggl::Debug::BaseMesh *, std::__1::default_delete<ggl::Debug::BaseMesh>> {
        struct BaseMesh *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::DebugPoints::BaseMesh, std::__1::default_delete<ggl::DebugPoints::BaseMesh>> {
    struct __compressed_pair<ggl::DebugPoints::BaseMesh *, std::__1::default_delete<ggl::DebugPoints::BaseMesh>> {
        struct BaseMesh *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::DistanceAtlas, std::__1::default_delete<ggl::DistanceAtlas>> {
    struct __compressed_pair<ggl::DistanceAtlas *, std::__1::default_delete<ggl::DistanceAtlas>> {
        struct DistanceAtlas *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Fog::FogPipelineSetup, std::__1::default_delete<ggl::Fog::FogPipelineSetup>> {
    struct __compressed_pair<ggl::Fog::FogPipelineSetup *, std::__1::default_delete<ggl::Fog::FogPipelineSetup>> {
        struct FogPipelineSetup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFacadeDepth::BuildingPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFacadeDepth::BuildingPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingFacadeDepth::BuildingPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFacadeDepth::BuildingPipelineSetup>>> {
        struct FragmentedPool<ggl::BuildingFacadeDepth::BuildingPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>>> {
        struct FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup>>> {
        struct FragmentedPool<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingPointyRoofDepth::BuildingPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoofDepth::BuildingPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingPointyRoofDepth::BuildingPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoofDepth::BuildingPipelineSetup>>> {
        struct FragmentedPool<ggl::BuildingPointyRoofDepth::BuildingPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingShadow::MeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::MeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingShadow::MeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::MeshPipelineSetup>>> {
        struct FragmentedPool<ggl::BuildingShadow::MeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingTopDepth::CompressedMeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTopDepth::CompressedMeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingTopDepth::CompressedMeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTopDepth::CompressedMeshPipelineSetup>>> {
        struct FragmentedPool<ggl::BuildingTopDepth::CompressedMeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::Debug::BaseMesh>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::Debug::BaseMesh>*, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh>>> {
        struct FragmentedPool<ggl::Debug::BaseMesh> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::Debug::BasePipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BasePipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::Debug::BasePipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BasePipelineSetup>>> {
        struct FragmentedPool<ggl::Debug::BasePipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::DebugPoints::BasePipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::BasePipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::DebugPoints::BasePipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::BasePipelineSetup>>> {
        struct FragmentedPool<ggl::DebugPoints::BasePipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::DiffuseBuilding::BuildingPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::DiffuseBuilding::BuildingPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::DiffuseBuilding::BuildingPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::DiffuseBuilding::BuildingPipelineSetup>>> {
        struct FragmentedPool<ggl::DiffuseBuilding::BuildingPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup>>> {
        struct FragmentedPool<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup>>> {
        struct FragmentedPool<ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::DiffuseLandmark::BuildingPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::DiffuseLandmark::BuildingPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::DiffuseLandmark::BuildingPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::DiffuseLandmark::BuildingPipelineSetup>>> {
        struct FragmentedPool<ggl::DiffuseLandmark::BuildingPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::FoggedDiffuseBuilding::BuildingPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedDiffuseBuilding::BuildingPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::FoggedDiffuseBuilding::BuildingPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedDiffuseBuilding::BuildingPipelineSetup>>> {
        struct FragmentedPool<ggl::FoggedDiffuseBuilding::BuildingPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup>>> {
        struct FragmentedPool<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup>>> {
        struct FragmentedPool<ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::FoggedSpecularBuilding::BuildingPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedSpecularBuilding::BuildingPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::FoggedSpecularBuilding::BuildingPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedSpecularBuilding::BuildingPipelineSetup>>> {
        struct FragmentedPool<ggl::FoggedSpecularBuilding::BuildingPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup>>> {
        struct FragmentedPool<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::FoggedSpecularLandmark::LandmarkPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedSpecularLandmark::LandmarkPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::FoggedSpecularLandmark::LandmarkPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedSpecularLandmark::LandmarkPipelineSetup>>> {
        struct FragmentedPool<ggl::FoggedSpecularLandmark::LandmarkPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>>> {
        struct FragmentedPool<ggl::Glow::MeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>>> {
        struct FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::LandmarkDepth::BuildingPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::LandmarkDepth::BuildingPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::LandmarkDepth::BuildingPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::LandmarkDepth::BuildingPipelineSetup>>> {
        struct FragmentedPool<ggl::LandmarkDepth::BuildingPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::LandmarkFlat::LandmarkPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::LandmarkFlat::LandmarkPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::LandmarkFlat::LandmarkPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::LandmarkFlat::LandmarkPipelineSetup>>> {
        struct FragmentedPool<ggl::LandmarkFlat::LandmarkPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup>>> {
        struct FragmentedPool<ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::MeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::MeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::MeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::MeshPipelineSetup>>> {
        struct FragmentedPool<ggl::PolygonAnimatableStroke::MeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>>> {
        struct FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup>>> {
        struct FragmentedPool<ggl::PolygonShadowedStroke::ShadowPathPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonStroke::MeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::MeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonStroke::MeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::MeshPipelineSetup>>> {
        struct FragmentedPool<ggl::PolygonStroke::MeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PrefilteredLine::PrefilteredLinePipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::PrefilteredLinePipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PrefilteredLine::PrefilteredLinePipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::PrefilteredLinePipelineSetup>>> {
        struct FragmentedPool<ggl::PrefilteredLine::PrefilteredLinePipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> {
        struct FragmentedPool<ggl::RenderItem> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::SpecularBuilding::BuildingPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::SpecularBuilding::BuildingPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::SpecularBuilding::BuildingPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::SpecularBuilding::BuildingPipelineSetup>>> {
        struct FragmentedPool<ggl::SpecularBuilding::BuildingPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup>>> {
        struct FragmentedPool<ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::SpecularBuildingTop::CompressedMeshPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::SpecularBuildingTop::CompressedMeshPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::SpecularBuildingTop::CompressedMeshPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::SpecularBuildingTop::CompressedMeshPipelineSetup>>> {
        struct FragmentedPool<ggl::SpecularBuildingTop::CompressedMeshPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::SpecularLandmark::LandmarkPipelineSetup>, std::__1::default_delete<ggl::FragmentedPool<ggl::SpecularLandmark::LandmarkPipelineSetup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::SpecularLandmark::LandmarkPipelineSetup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::SpecularLandmark::LandmarkPipelineSetup>>> {
        struct FragmentedPool<ggl::SpecularLandmark::LandmarkPipelineSetup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Grid::GridPipelineSetup, std::__1::default_delete<ggl::Grid::GridPipelineSetup>> {
    struct __compressed_pair<ggl::Grid::GridPipelineSetup *, std::__1::default_delete<ggl::Grid::GridPipelineSetup>> {
        struct GridPipelineSetup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas>> {
    struct __compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas>> {
        struct IsoAlphaAtlas *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl>> {
    struct __compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl>> {
        struct LoaderImpl *_field1;
    } _field1;
};

struct unique_ptr<ggl::Mesh, std::__1::default_delete<ggl::Mesh>> {
    struct __compressed_pair<ggl::Mesh *, std::__1::default_delete<ggl::Mesh>> {
        struct Mesh *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>>> {
        MeshVendor_396e6e4f *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> {
        MeshVendor_c6d8e5cd *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::Glow::MeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::Glow::MeshMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh>>> {
        MeshVendor_43d71dca *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::PolygonShadowedStroke::ShadowPathMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonShadowedStroke::ShadowPathMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::PolygonShadowedStroke::ShadowPathMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonShadowedStroke::ShadowPathMesh>>> {
        MeshVendor_303b8b6a *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> {
        MeshVendor_8027e961 *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::OESContext, std::__1::default_delete<ggl::OESContext>> {
    struct __compressed_pair<ggl::OESContext *, std::__1::default_delete<ggl::OESContext>> {
        struct OESContext *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::PolygonFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonFill::MeshPipelineSetup>> {
    struct __compressed_pair<ggl::PolygonFill::MeshPipelineSetup *, std::__1::default_delete<ggl::PolygonFill::MeshPipelineSetup>> {
        struct MeshPipelineSetup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> {
    struct __compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer>> {
        struct RenderBuffer *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> {
    struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem>> {
        struct RenderItem *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> {
    struct __compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue>> {
        struct RenderQueue *_field1;
    } _field1;
};

struct unique_ptr<ggl::RenderResourceFences, std::__1::default_delete<ggl::RenderResourceFences>> {
    struct __compressed_pair<ggl::RenderResourceFences *, std::__1::default_delete<ggl::RenderResourceFences>> {
        struct RenderResourceFences *_field1;
    } _field1;
};

struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> {
    struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState>> {
        struct RenderState *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget>> {
    struct __compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget>> {
        struct RenderTarget *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RibbonLayer<ggl::RoadRibbonDescriptor>, std::__1::default_delete<ggl::RibbonLayer<ggl::RoadRibbonDescriptor>>> {
    struct __compressed_pair<ggl::RibbonLayer<ggl::RoadRibbonDescriptor>*, std::__1::default_delete<ggl::RibbonLayer<ggl::RoadRibbonDescriptor>>> {
        RibbonLayer_db5d8a14 *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RibbonLayer<ggl::TransitRibbonDescriptor>, std::__1::default_delete<ggl::RibbonLayer<ggl::TransitRibbonDescriptor>>> {
    struct __compressed_pair<ggl::RibbonLayer<ggl::TransitRibbonDescriptor>*, std::__1::default_delete<ggl::RibbonLayer<ggl::TransitRibbonDescriptor>>> {
        RibbonLayer_d95b4043 *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::SimpleGrid::GridPipelineSetup, std::__1::default_delete<ggl::SimpleGrid::GridPipelineSetup>> {
    struct __compressed_pair<ggl::SimpleGrid::GridPipelineSetup *, std::__1::default_delete<ggl::SimpleGrid::GridPipelineSetup>> {
        struct GridPipelineSetup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Texture, std::__1::default_delete<ggl::Texture>> {
    struct __compressed_pair<ggl::Texture *, std::__1::default_delete<ggl::Texture>> {
        struct Texture *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> {
    struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D>> {
        struct Texture2D *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::TexturePool, std::__1::default_delete<ggl::TexturePool>> {
    struct __compressed_pair<ggl::TexturePool *, std::__1::default_delete<ggl::TexturePool>> {
        struct TexturePool *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup, std::__1::default_delete<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup>> {
    struct __compressed_pair<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup *, std::__1::default_delete<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup>> {
        struct Pos2DUVPipelineSetup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Textured::Pos2DUVPipelineSetup, std::__1::default_delete<ggl::Textured::Pos2DUVPipelineSetup>> {
    struct __compressed_pair<ggl::Textured::Pos2DUVPipelineSetup *, std::__1::default_delete<ggl::Textured::Pos2DUVPipelineSetup>> {
        struct Pos2DUVPipelineSetup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::TransitLineRibbon::BasePipelineSetup, std::__1::default_delete<ggl::TransitLineRibbon::BasePipelineSetup>> {
    struct __compressed_pair<ggl::TransitLineRibbon::BasePipelineSetup *, std::__1::default_delete<ggl::TransitLineRibbon::BasePipelineSetup>> {
        struct BasePipelineSetup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::TransitNode::BaseMesh, std::__1::default_delete<ggl::TransitNode::BaseMesh>> {
    struct __compressed_pair<ggl::TransitNode::BaseMesh *, std::__1::default_delete<ggl::TransitNode::BaseMesh>> {
        struct BaseMesh *_field1;
    } _field1;
};

struct unique_ptr<ggl::TransitNodeColorized::BasePipelineSetup, std::__1::default_delete<ggl::TransitNodeColorized::BasePipelineSetup>> {
    struct __compressed_pair<ggl::TransitNodeColorized::BasePipelineSetup *, std::__1::default_delete<ggl::TransitNodeColorized::BasePipelineSetup>> {
        struct BasePipelineSetup *_field1;
    } _field1;
};

struct unique_ptr<ggl::TransitNodeRGB::BasePipelineSetup, std::__1::default_delete<ggl::TransitNodeRGB::BasePipelineSetup>> {
    struct __compressed_pair<ggl::TransitNodeRGB::BasePipelineSetup *, std::__1::default_delete<ggl::TransitNodeRGB::BasePipelineSetup>> {
        struct BasePipelineSetup *_field1;
    } _field1;
};

struct unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager>> {
    struct __compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager>> {
        struct DebugConsoleManager *__first_;
    } __ptr_;
};

struct unique_ptr<md::GlobeAdapter, std::__1::default_delete<md::GlobeAdapter>> {
    struct __compressed_pair<md::GlobeAdapter *, std::__1::default_delete<md::GlobeAdapter>> {
        struct GlobeAdapter *__first_;
    } __ptr_;
};

struct unique_ptr<md::LabelClusterProvider, std::__1::default_delete<md::LabelClusterProvider>> {
    struct __compressed_pair<md::LabelClusterProvider *, std::__1::default_delete<md::LabelClusterProvider>> {
        struct LabelClusterProvider *_field1;
    } _field1;
};

struct unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext>> {
    struct __compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext>> {
        struct LayoutContext *__first_;
    } __ptr_;
};

struct unique_ptr<md::NavLabelPart, std::__1::default_delete<md::NavLabelPart>> {
    struct __compressed_pair<md::NavLabelPart *, std::__1::default_delete<md::NavLabelPart>> {
        struct NavLabelPart *_field1;
    } _field1;
};

struct unique_ptr<md::OffscreenQueue, std::__1::default_delete<md::OffscreenQueue>> {
    struct __compressed_pair<md::OffscreenQueue *, std::__1::default_delete<md::OffscreenQueue>> {
        struct OffscreenQueue *__first_;
    } __ptr_;
};

struct unique_ptr<md::PatternedLayer, std::__1::default_delete<md::PatternedLayer>> {
    struct __compressed_pair<md::PatternedLayer *, std::__1::default_delete<md::PatternedLayer>> {
        struct PatternedLayer *__first_;
    } __ptr_;
};

struct unique_ptr<md::PatternedSharedResources, std::__1::default_delete<md::PatternedSharedResources>> {
    struct __compressed_pair<md::PatternedSharedResources *, std::__1::default_delete<md::PatternedSharedResources>> {
        struct PatternedSharedResources *__first_;
    } __ptr_;
};

struct unique_ptr<md::PilledTrafficLayer, std::__1::default_delete<md::PilledTrafficLayer>> {
    struct __compressed_pair<md::PilledTrafficLayer *, std::__1::default_delete<md::PilledTrafficLayer>> {
        struct PilledTrafficLayer *__first_;
    } __ptr_;
};

struct unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue>> {
    struct __compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue>> {
        struct RenderQueue *__first_;
    } __ptr_;
};

struct unique_ptr<md::RenderTree, std::__1::default_delete<md::RenderTree>> {
    struct __compressed_pair<md::RenderTree *, std::__1::default_delete<md::RenderTree>> {
        struct RenderTree *__first_;
    } __ptr_;
};

struct unique_ptr<md::RoadLayer, std::__1::default_delete<md::RoadLayer>> {
    struct __compressed_pair<md::RoadLayer *, std::__1::default_delete<md::RoadLayer>> {
        struct RoadLayer *__first_;
    } __ptr_;
};

struct unique_ptr<md::RoadSharedResources, std::__1::default_delete<md::RoadSharedResources>> {
    struct __compressed_pair<md::RoadSharedResources *, std::__1::default_delete<md::RoadSharedResources>> {
        struct RoadSharedResources *__first_;
    } __ptr_;
};

struct unique_ptr<md::RouteLineArrowLayer, std::__1::default_delete<md::RouteLineArrowLayer>>;

struct unique_ptr<md::RouteLineArrowSharedResources, std::__1::default_delete<md::RouteLineArrowSharedResources>> {
    struct __compressed_pair<md::RouteLineArrowSharedResources *, std::__1::default_delete<md::RouteLineArrowSharedResources>> {
        struct RouteLineArrowSharedResources *__first_;
    } __ptr_;
};

struct unique_ptr<md::RouteLineLayer, std::__1::default_delete<md::RouteLineLayer>> {
    struct __compressed_pair<md::RouteLineLayer *, std::__1::default_delete<md::RouteLineLayer>> {
        struct RouteLineLayer *__first_;
    } __ptr_;
};

struct unique_ptr<md::RouteLineSharedResources, std::__1::default_delete<md::RouteLineSharedResources>> {
    struct __compressed_pair<md::RouteLineSharedResources *, std::__1::default_delete<md::RouteLineSharedResources>> {
        struct RouteLineSharedResources *__first_;
    } __ptr_;
};

struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources>> {
    struct __compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources>> {
        struct SharedDeviceResources *_field1;
    } _field1;
};

struct unique_ptr<md::SolidTrafficLayer, std::__1::default_delete<md::SolidTrafficLayer>> {
    struct __compressed_pair<md::SolidTrafficLayer *, std::__1::default_delete<md::SolidTrafficLayer>> {
        struct SolidTrafficLayer *__first_;
    } __ptr_;
};

struct unique_ptr<md::StyleTexture<md::TransitLineSegment::StylePixel>, std::__1::default_delete<md::StyleTexture<md::TransitLineSegment::StylePixel>>> {
    struct __compressed_pair<md::StyleTexture<md::TransitLineSegment::StylePixel>*, std::__1::default_delete<md::StyleTexture<md::TransitLineSegment::StylePixel>>> {
        struct StyleTexture<md::TransitLineSegment::StylePixel> *__first_;
    } __ptr_;
};

struct unique_ptr<md::TrafficSharedResources, std::__1::default_delete<md::TrafficSharedResources>> {
    struct __compressed_pair<md::TrafficSharedResources *, std::__1::default_delete<md::TrafficSharedResources>> {
        struct TrafficSharedResources *__first_;
    } __ptr_;
};

struct unique_ptr<md::TrafficStream, std::__1::default_delete<md::TrafficStream>> {
    struct __compressed_pair<md::TrafficStream *, std::__1::default_delete<md::TrafficStream>> {
        struct TrafficStream *__first_;
    } __ptr_;
};

struct unique_ptr<md::TransitJunctionManager, std::__1::default_delete<md::TransitJunctionManager>> {
    struct __compressed_pair<md::TransitJunctionManager *, std::__1::default_delete<md::TransitJunctionManager>> {
        struct TransitJunctionManager *__first_;
    } __ptr_;
};

struct unique_ptr<md::TransitNodeFeaturePool, std::__1::default_delete<md::TransitNodeFeaturePool>> {
    struct __compressed_pair<md::TransitNodeFeaturePool *, std::__1::default_delete<md::TransitNodeFeaturePool>> {
        struct TransitNodeFeaturePool *__first_;
    } __ptr_;
};

struct unique_ptr<md::TransitNodeTextureAtlas, std::__1::default_delete<md::TransitNodeTextureAtlas>> {
    struct __compressed_pair<md::TransitNodeTextureAtlas *, std::__1::default_delete<md::TransitNodeTextureAtlas>> {
        struct TransitNodeTextureAtlas *_field1;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unordered_map<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>, std::__1::hash<GEOGenericTileType>, std::__1::equal_to<GEOGenericTileType>, std::__1::allocator<std::__1::pair<const GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>>> {
    struct __hash_table<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::hash<GEOGenericTileType>, true>, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::equal_to<GEOGenericTileType>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::hash<GEOGenericTileType>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::equal_to<GEOGenericTileType>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList>>> {
    struct __hash_table<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>, std::__1::hash<const GEOTransitLink *>, std::__1::equal_to<const GEOTransitLink *>, std::__1::allocator<std::__1::pair<const GEOTransitLink *const, std::__1::weak_ptr<md::LabelExternalTransitLink>>>> {
    struct __hash_table<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, std::__1::__unordered_map_hasher<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, std::__1::hash<const GEOTransitLink *>, true>, std::__1::__unordered_map_equal<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, std::__1::equal_to<const GEOTransitLink *>, true>, std::__1::allocator<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, std::__1::hash<const GEOTransitLink *>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, std::__1::equal_to<const GEOTransitLink *>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>, md::DashTextureCache::KeyHasher, std::__1::equal_to<md::DashTextureCache::Key>, std::__1::allocator<std::__1::pair<const md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, std::__1::__unordered_map_hasher<md::DashTextureCache::Key, std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, md::DashTextureCache::KeyHasher, true>, std::__1::__unordered_map_equal<md::DashTextureCache::Key, std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, std::__1::equal_to<md::DashTextureCache::Key>, true>, std::__1::allocator<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::DashTextureCache::Key, std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, md::DashTextureCache::KeyHasher, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::DashTextureCache::Key, std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, std::__1::equal_to<md::DashTextureCache::Key>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::GenericShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::GenericShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::GenericShieldCacheKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::GenericShieldCacheKey>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>, std::__1::hash<md::IconCacheKey>, std::__1::equal_to<md::IconCacheKey>, std::__1::allocator<std::__1::pair<const md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<md::IconCacheKey, std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, std::__1::hash<md::IconCacheKey>, true>, std::__1::__unordered_map_equal<md::IconCacheKey, std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, std::__1::equal_to<md::IconCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::IconCacheKey, std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, std::__1::hash<md::IconCacheKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::IconCacheKey, std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, std::__1::equal_to<md::IconCacheKey>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>, std::__1::hash<md::PatternedBatchKey>, std::__1::equal_to<md::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, std::__1::__unordered_map_hasher<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, std::__1::hash<md::PatternedBatchKey>, true>, std::__1::__unordered_map_equal<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, std::__1::equal_to<md::PatternedBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, std::__1::hash<md::PatternedBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, std::__1::equal_to<md::PatternedBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>, std::__1::hash<md::RoadBatchKey>, std::__1::equal_to<md::RoadBatchKey>, std::__1::allocator<std::__1::pair<const md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, std::__1::__unordered_map_hasher<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, std::__1::hash<md::RoadBatchKey>, true>, std::__1::__unordered_map_equal<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, std::__1::equal_to<md::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, std::__1::hash<md::RoadBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, std::__1::equal_to<md::RoadBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::ShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::ShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::ShieldCacheKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::ShieldCacheKey>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun, md::TrafficStream::SectionKeyHash, std::__1::equal_to<md::TrafficStream::SectionKey>, std::__1::allocator<std::__1::pair<const md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>>> {
    struct __hash_table<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::__unordered_map_hasher<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, md::TrafficStream::SectionKeyHash, true>, std::__1::__unordered_map_equal<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::equal_to<md::TrafficStream::SectionKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, md::TrafficStream::SectionKeyHash, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::equal_to<md::TrafficStream::SectionKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<md::ObjectGroup>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, md::LabelTransitSupport::TransitLineColorKeyHash, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::hash<SectionKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, VKPolygonGroup *, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, VKPolygonGroup *>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::equal_to<unsigned long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, md::PolygonRouteAttributes, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, md::PolygonRouteAttributes>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, std::__1::equal_to<unsigned long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_multimap<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, const zilch::TrafficDynamicTile::Flow *>>> {
    struct __hash_table<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::hash<long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::equal_to<long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_set<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *>> {
    struct __hash_table<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>, std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<GEOComposedRouteSection *>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<GEOComposedRouteSection *>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_set<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink>> {
    struct __hash_table<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>, std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, TransitLineWithLinkHash> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<TransitLineWithLink>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
    struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<unsigned long long>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct vector<GEO3DBuildingFeature, std::__1::allocator<GEO3DBuildingFeature>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<GEO3DBuildingFeature *, std::__1::allocator<GEO3DBuildingFeature>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<LabelNavJunctionInfo, std::__1::allocator<LabelNavJunctionInfo>> {
    struct LabelNavJunctionInfo *__begin_;
    struct LabelNavJunctionInfo *__end_;
    struct __compressed_pair<LabelNavJunctionInfo *, std::__1::allocator<LabelNavJunctionInfo>> {
        struct LabelNavJunctionInfo *__first_;
    } __end_cap_;
};

struct vector<OnscreenTimestampData, std::__1::allocator<OnscreenTimestampData>> {
    struct OnscreenTimestampData *__begin_;
    struct OnscreenTimestampData *__end_;
    struct __compressed_pair<OnscreenTimestampData *, std::__1::allocator<OnscreenTimestampData>> {
        struct OnscreenTimestampData *__first_;
    } __end_cap_;
};

struct vector<RouteJunctionInfo, std::__1::allocator<RouteJunctionInfo>> {
    struct RouteJunctionInfo *_field1;
    struct RouteJunctionInfo *_field2;
    struct __compressed_pair<RouteJunctionInfo *, std::__1::allocator<RouteJunctionInfo>> {
        struct RouteJunctionInfo *_field1;
    } _field3;
};

struct vector<RouteSegment, std::__1::allocator<RouteSegment>> {
    struct RouteSegment *__begin_;
    struct RouteSegment *__end_;
    struct __compressed_pair<RouteSegment *, std::__1::allocator<RouteSegment>> {
        struct RouteSegment *__first_;
    } __end_cap_;
};

struct vector<VKBuildingHeightMap, std::__1::allocator<VKBuildingHeightMap>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<VKBuildingHeightMap *, std::__1::allocator<VKBuildingHeightMap>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<VKMapTile *, std::__1::allocator<VKMapTile *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<VKMapTile **, std::__1::allocator<VKMapTile *>> {
        id *__first_;
    } __end_cap_;
};

struct vector<VKTileKey, std::__1::allocator<VKTileKey>> {
    struct VKTileKey *__begin_;
    struct VKTileKey *__end_;
    struct __compressed_pair<VKTileKey *, std::__1::allocator<VKTileKey>> {
        struct VKTileKey *__first_;
    } __end_cap_;
};

struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder>> {
    struct AnimationObjectHolder *_field1;
    struct AnimationObjectHolder *_field2;
    struct __compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder>> {
        struct AnimationObjectHolder *_field1;
    } _field3;
};

struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey>> {
    struct SimpleTileKey *_field1;
    struct SimpleTileKey *_field2;
    struct __compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey>> {
        struct SimpleTileKey *_field1;
    } _field3;
};

struct vector<altitude::TileBound, std::__1::allocator<altitude::TileBound>> {
    struct TileBound *_field1;
    struct TileBound *_field2;
    struct __compressed_pair<altitude::TileBound *, std::__1::allocator<altitude::TileBound>> {
        struct TileBound *_field1;
    } _field3;
};

struct vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>> {
    Mercator2_57ec32b6 *__begin_;
    Mercator2_57ec32b6 *__end_;
    struct __compressed_pair<geo::Mercator2<double>*, std::__1::allocator<geo::Mercator2<double>>> {
        Mercator2_57ec32b6 *__first_;
    } __end_cap_;
};

struct vector<geo::fast_shared_ptr<md::RouteLineSection>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection>>> {
    struct fast_shared_ptr<md::RouteLineSection> *__begin_;
    struct fast_shared_ptr<md::RouteLineSection> *__end_;
    struct __compressed_pair<geo::fast_shared_ptr<md::RouteLineSection>*, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection>>> {
        struct fast_shared_ptr<md::RouteLineSection> *__first_;
    } __end_cap_;
};

struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem>> {
    struct BufferLoadItem *_field1;
    struct BufferLoadItem *_field2;
    struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem>> {
        struct BufferLoadItem *_field1;
    } _field3;
};

struct vector<ggl::BuildingFacade::BuildingMesh *, std::__1::allocator<ggl::BuildingFacade::BuildingMesh *>> {
    struct BuildingMesh **_field1;
    struct BuildingMesh **_field2;
    struct __compressed_pair<ggl::BuildingFacade::BuildingMesh **, std::__1::allocator<ggl::BuildingFacade::BuildingMesh *>> {
        struct BuildingMesh **_field1;
    } _field3;
};

struct vector<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, std::__1::allocator<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>> {
    struct BuildingFlatStrokeMesh *__begin_;
    struct BuildingFlatStrokeMesh *__end_;
    struct __compressed_pair<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh *, std::__1::allocator<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>> {
        struct BuildingFlatStrokeMesh *__first_;
    } __end_cap_;
};

struct vector<ggl::BuildingPointyRoof::BuildingMesh *, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *>> {
    struct BuildingMesh **_field1;
    struct BuildingMesh **_field2;
    struct __compressed_pair<ggl::BuildingPointyRoof::BuildingMesh **, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *>> {
        struct BuildingMesh **_field1;
    } _field3;
};

struct vector<ggl::CommandBuffer *, std::__1::allocator<ggl::CommandBuffer *>> {
    struct CommandBuffer **_field1;
    struct CommandBuffer **_field2;
    struct __compressed_pair<ggl::CommandBuffer **, std::__1::allocator<ggl::CommandBuffer *>> {
        struct CommandBuffer **_field1;
    } _field3;
};

struct vector<ggl::ConstantDataElement, std::__1::allocator<ggl::ConstantDataElement>> {
    struct ConstantDataElement *_field1;
    struct ConstantDataElement *_field2;
    struct __compressed_pair<ggl::ConstantDataElement *, std::__1::allocator<ggl::ConstantDataElement>> {
        struct ConstantDataElement *_field1;
    } _field3;
};

struct vector<ggl::Glow::MeshMesh *, std::__1::allocator<ggl::Glow::MeshMesh *>> {
    struct MeshMesh **_field1;
    struct MeshMesh **_field2;
    struct __compressed_pair<ggl::Glow::MeshMesh **, std::__1::allocator<ggl::Glow::MeshMesh *>> {
        struct MeshMesh **_field1;
    } _field3;
};

struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange>> {
    struct MultiRange *__begin_;
    struct MultiRange *__end_;
    struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange>> {
        struct MultiRange *__first_;
    } __end_cap_;
};

struct vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::OptimizedTraffic::BaseMesh **, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::PatternedRibbon::BaseMesh **, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::PolygonBase::CompressedMeshMesh, std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh>> {
    struct CompressedMeshMesh *__begin_;
    struct CompressedMeshMesh *__end_;
    struct __compressed_pair<ggl::PolygonBase::CompressedMeshMesh *, std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh>> {
        struct CompressedMeshMesh *__first_;
    } __end_cap_;
};

struct vector<ggl::PolygonCommonStroke::MeshMesh, std::__1::allocator<ggl::PolygonCommonStroke::MeshMesh>> {
    struct MeshMesh *__begin_;
    struct MeshMesh *__end_;
    struct __compressed_pair<ggl::PolygonCommonStroke::MeshMesh *, std::__1::allocator<ggl::PolygonCommonStroke::MeshMesh>> {
        struct MeshMesh *__first_;
    } __end_cap_;
};

struct vector<ggl::PolygonShadowedStroke::ShadowPathMesh *, std::__1::allocator<ggl::PolygonShadowedStroke::ShadowPathMesh *>> {
    struct ShadowPathMesh **_field1;
    struct ShadowPathMesh **_field2;
    struct __compressed_pair<ggl::PolygonShadowedStroke::ShadowPathMesh **, std::__1::allocator<ggl::PolygonShadowedStroke::ShadowPathMesh *>> {
        struct ShadowPathMesh **_field1;
    } _field3;
};

struct vector<ggl::PrefilteredLine::PrefilteredLineMesh *, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *>> {
    struct PrefilteredLineMesh **_field1;
    struct PrefilteredLineMesh **_field2;
    struct __compressed_pair<ggl::PrefilteredLine::PrefilteredLineMesh **, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *>> {
        struct PrefilteredLineMesh **_field1;
    } _field3;
};

struct vector<ggl::Range, std::__1::allocator<ggl::Range>> {
    struct Range *__begin_;
    struct Range *__end_;
    struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range>> {
        struct Range *__first_;
    } __end_cap_;
};

struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *>> {
    struct RenderItem **_field1;
    struct RenderItem **_field2;
    struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *>> {
        struct RenderItem **_field1;
    } _field3;
};

struct vector<ggl::RenderItemBatcher, std::__1::allocator<ggl::RenderItemBatcher>> {
    struct RenderItemBatcher *__begin_;
    struct RenderItemBatcher *__end_;
    struct __compressed_pair<ggl::RenderItemBatcher *, std::__1::allocator<ggl::RenderItemBatcher>> {
        struct RenderItemBatcher *__first_;
    } __end_cap_;
};

struct vector<ggl::RenderQueue::Pass, std::__1::allocator<ggl::RenderQueue::Pass>> {
    struct Pass *_field1;
    struct Pass *_field2;
    struct __compressed_pair<ggl::RenderQueue::Pass *, std::__1::allocator<ggl::RenderQueue::Pass>> {
        struct Pass *_field1;
    } _field3;
};

struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*, std::__1::allocator<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*>> {
    struct RibbonBatch<ggl::RoadRibbonDescriptor> **_field1;
    struct RibbonBatch<ggl::RoadRibbonDescriptor> **_field2;
    struct __compressed_pair<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>**, std::__1::allocator<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*>> {
        struct RibbonBatch<ggl::RoadRibbonDescriptor> **_field1;
    } _field3;
};

struct vector<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*, std::__1::allocator<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>> {
    struct RibbonBatch<ggl::TransitRibbonDescriptor> **_field1;
    struct RibbonBatch<ggl::TransitRibbonDescriptor> **_field2;
    struct __compressed_pair<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>**, std::__1::allocator<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>> {
        struct RibbonBatch<ggl::TransitRibbonDescriptor> **_field1;
    } _field3;
};

struct vector<ggl::ShaderLibrary::FunctionEntry, std::__1::allocator<ggl::ShaderLibrary::FunctionEntry>> {
    struct FunctionEntry *_field1;
    struct FunctionEntry *_field2;
    struct __compressed_pair<ggl::ShaderLibrary::FunctionEntry *, std::__1::allocator<ggl::ShaderLibrary::FunctionEntry>> {
        struct FunctionEntry *_field1;
    } _field3;
};

struct vector<ggl::ShaderLibrary::ShaderEntry, std::__1::allocator<ggl::ShaderLibrary::ShaderEntry>> {
    struct ShaderEntry *_field1;
    struct ShaderEntry *_field2;
    struct __compressed_pair<ggl::ShaderLibrary::ShaderEntry *, std::__1::allocator<ggl::ShaderLibrary::ShaderEntry>> {
        struct ShaderEntry *_field1;
    } _field3;
};

struct vector<ggl::Texture *, std::__1::allocator<ggl::Texture *>> {
    struct Texture **_field1;
    struct Texture **_field2;
    struct __compressed_pair<ggl::Texture **, std::__1::allocator<ggl::Texture *>> {
        struct Texture **_field1;
    } _field3;
};

struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem>> {
    struct Texture2DLoadItem *_field1;
    struct Texture2DLoadItem *_field2;
    struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem>> {
        struct Texture2DLoadItem *_field1;
    } _field3;
};

struct vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::TrafficBase::BaseMesh **, std::__1::allocator<ggl::TrafficBase::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::TransitLineRibbon::BaseMesh *, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::TransitLineRibbon::BaseMesh **, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<gm::Box<double, 2>, std::__1::allocator<gm::Box<double, 2>>> {
    Box_3d7e3c2c *__begin_;
    Box_3d7e3c2c *__end_;
    struct __compressed_pair<gm::Box<double, 2>*, std::__1::allocator<gm::Box<double, 2>>> {
        Box_3d7e3c2c *__first_;
    } __end_cap_;
};

struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
    Matrix_2bdd42a3 *__begin_;
    Matrix_2bdd42a3 *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
        Matrix_2bdd42a3 *__first_;
    } __end_cap_;
};

struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
    Matrix_8746f91e *_field1;
    Matrix_8746f91e *_field2;
    struct __compressed_pair<gm::Matrix<float, 2, 1>*, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
        Matrix_8746f91e *_field1;
    } _field3;
};

struct vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair>> {
    struct FeatureAttributePair *__begin_;
    struct FeatureAttributePair *__end_;
    struct __compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair>> {
        struct FeatureAttributePair *__first_;
    } __end_cap_;
};

struct vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId>> {
    unsigned char *__begin_;
    unsigned char *__end_;
    struct __compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId>> {
        unsigned char *__first_;
    } __end_cap_;
};

struct vector<md::PatternedBatch *, std::__1::allocator<md::PatternedBatch *>> {
    struct PatternedBatch **_field1;
    struct PatternedBatch **_field2;
    struct __compressed_pair<md::PatternedBatch **, std::__1::allocator<md::PatternedBatch *>> {
        struct PatternedBatch **_field1;
    } _field3;
};

struct vector<md::PilledTrafficBatch *, std::__1::allocator<md::PilledTrafficBatch *>> {
    struct PilledTrafficBatch **_field1;
    struct PilledTrafficBatch **_field2;
    struct __compressed_pair<md::PilledTrafficBatch **, std::__1::allocator<md::PilledTrafficBatch *>> {
        struct PilledTrafficBatch **_field1;
    } _field3;
};

struct vector<md::RoadBatch *, std::__1::allocator<md::RoadBatch *>> {
    struct RoadBatch **_field1;
    struct RoadBatch **_field2;
    struct __compressed_pair<md::RoadBatch **, std::__1::allocator<md::RoadBatch *>> {
        struct RoadBatch **_field1;
    } _field3;
};

struct vector<md::SolidTrafficBatch *, std::__1::allocator<md::SolidTrafficBatch *>> {
    struct SolidTrafficBatch **_field1;
    struct SolidTrafficBatch **_field2;
    struct __compressed_pair<md::SolidTrafficBatch **, std::__1::allocator<md::SolidTrafficBatch *>> {
        struct SolidTrafficBatch **_field1;
    } _field3;
};

struct vector<md::TileExclusionArea, std::__1::allocator<md::TileExclusionArea>> {
    struct TileExclusionArea *__begin_;
    struct TileExclusionArea *__end_;
    struct __compressed_pair<md::TileExclusionArea *, std::__1::allocator<md::TileExclusionArea>> {
        struct TileExclusionArea *__first_;
    } __end_cap_;
};

struct vector<md::TrafficSegment, std::__1::allocator<md::TrafficSegment>> {
    struct TrafficSegment *_field1;
    struct TrafficSegment *_field2;
    struct __compressed_pair<md::TrafficSegment *, std::__1::allocator<md::TrafficSegment>> {
        struct TrafficSegment *_field1;
    } _field3;
};

struct vector<md::TransitLine, std::__1::allocator<md::TransitLine>> {
    struct TransitLine *__begin_;
    struct TransitLine *__end_;
    struct __compressed_pair<md::TransitLine *, std::__1::allocator<md::TransitLine>> {
        struct TransitLine *__first_;
    } __end_cap_;
};

struct vector<md::TransitLink, std::__1::allocator<md::TransitLink>> {
    struct TransitLink *__begin_;
    struct TransitLink *__end_;
    struct __compressed_pair<md::TransitLink *, std::__1::allocator<md::TransitLink>> {
        struct TransitLink *__first_;
    } __end_cap_;
};

struct vector<std::__1::pair<TransitLineWithLink, float>, std::__1::allocator<std::__1::pair<TransitLineWithLink, float>>> {
    struct pair<TransitLineWithLink, float> *_field1;
    struct pair<TransitLineWithLink, float> *_field2;
    struct __compressed_pair<std::__1::pair<TransitLineWithLink, float>*, std::__1::allocator<std::__1::pair<TransitLineWithLink, float>>> {
        struct pair<TransitLineWithLink, float> *_field1;
    } _field3;
};

struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair>>> {
    struct pair<bool, GEOFeatureStylePair> *_field1;
    struct pair<bool, GEOFeatureStylePair> *_field2;
    struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair>*, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair>>> {
        struct pair<bool, GEOFeatureStylePair> *_field1;
    } _field3;
};

struct vector<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>, std::__1::allocator<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>>> {
    struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>> *__begin_;
    struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>> *__end_;
    struct __compressed_pair<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>*, std::__1::allocator<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>>> {
        struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>> *__first_;
    } __end_cap_;
};

struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> {
    struct pair<unsigned short, unsigned int> *__begin_;
    struct pair<unsigned short, unsigned int> *__end_;
    struct __compressed_pair<std::__1::pair<unsigned short, unsigned int>*, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> {
        struct pair<unsigned short, unsigned int> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer>>> {
    struct shared_ptr<ggl::DebugRenderer> *_field1;
    struct shared_ptr<ggl::DebugRenderer> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ggl::DebugRenderer>*, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer>>> {
        struct shared_ptr<ggl::DebugRenderer> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<ggl::Shader>, std::__1::allocator<std::__1::shared_ptr<ggl::Shader>>> {
    struct shared_ptr<ggl::Shader> *_field1;
    struct shared_ptr<ggl::Shader> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Shader>*, std::__1::allocator<std::__1::shared_ptr<ggl::Shader>>> {
        struct shared_ptr<ggl::Shader> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
    shared_ptr_479d1306 *__begin_;
    shared_ptr_479d1306 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D>*, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
        shared_ptr_479d1306 *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData>>> {
    struct shared_ptr<ggl::VertexData> *_field1;
    struct shared_ptr<ggl::VertexData> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData>*, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData>>> {
        struct shared_ptr<ggl::VertexData> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
    shared_ptr_c5d816ee *__begin_;
    shared_ptr_c5d816ee *__end_;
    struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>*, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
        shared_ptr_c5d816ee *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature>>> {
    shared_ptr_e9082761 *_field1;
    shared_ptr_e9082761 *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature>*, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature>>> {
        shared_ptr_e9082761 *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>>> {
    struct shared_ptr<md::LabelExternalRoadFeature> *_field1;
    struct shared_ptr<md::LabelExternalRoadFeature> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature>*, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>>> {
        struct shared_ptr<md::LabelExternalRoadFeature> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature>>> {
    struct shared_ptr<md::LabelFeature> *_field1;
    struct shared_ptr<md::LabelFeature> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature>*, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature>>> {
        struct shared_ptr<md::LabelFeature> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::LabelFeatureMarker>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeatureMarker>>> {
    shared_ptr_27db7edb *_field1;
    shared_ptr_27db7edb *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelFeatureMarker>*, std::__1::allocator<std::__1::shared_ptr<md::LabelFeatureMarker>>> {
        shared_ptr_27db7edb *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile>>> {
    shared_ptr_d0281386 *__begin_;
    shared_ptr_d0281386 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile>*, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile>>> {
        shared_ptr_d0281386 *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::LabelMarker>, std::__1::allocator<std::__1::shared_ptr<md::LabelMarker>>> {
    shared_ptr_2d33c5e4 *_field1;
    shared_ptr_2d33c5e4 *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelMarker>*, std::__1::allocator<std::__1::shared_ptr<md::LabelMarker>>> {
        shared_ptr_2d33c5e4 *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel>>> {
    shared_ptr_93ff9d4a *__begin_;
    shared_ptr_93ff9d4a *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::NavLabel>*, std::__1::allocator<std::__1::shared_ptr<md::NavLabel>>> {
        shared_ptr_93ff9d4a *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup>>> {
    shared_ptr_9d00bcb9 *__begin_;
    shared_ptr_9d00bcb9 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::ObjectGroup>*, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup>>> {
        shared_ptr_9d00bcb9 *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::TransitConnectedNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitConnectedNode>>> {
    struct shared_ptr<md::TransitConnectedNode> *__begin_;
    struct shared_ptr<md::TransitConnectedNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::TransitConnectedNode>*, std::__1::allocator<std::__1::shared_ptr<md::TransitConnectedNode>>> {
        struct shared_ptr<md::TransitConnectedNode> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::TransitNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitNode>>> {
    struct shared_ptr<md::TransitNode> *__begin_;
    struct shared_ptr<md::TransitNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::TransitNode>*, std::__1::allocator<std::__1::shared_ptr<md::TransitNode>>> {
        struct shared_ptr<md::TransitNode> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::TransitOrphanNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitOrphanNode>>> {
    struct shared_ptr<md::TransitOrphanNode> *__begin_;
    struct shared_ptr<md::TransitOrphanNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::TransitOrphanNode>*, std::__1::allocator<std::__1::shared_ptr<md::TransitOrphanNode>>> {
        struct shared_ptr<md::TransitOrphanNode> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::TransitParentNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitParentNode>>> {
    struct shared_ptr<md::TransitParentNode> *__begin_;
    struct shared_ptr<md::TransitParentNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::TransitParentNode>*, std::__1::allocator<std::__1::shared_ptr<md::TransitParentNode>>> {
        struct shared_ptr<md::TransitParentNode> *__first_;
    } __end_cap_;
};

struct vector<std::__1::unique_ptr<md::RouteLineArrowLayer, std::__1::default_delete<md::RouteLineArrowLayer>>, std::__1::allocator<std::__1::unique_ptr<md::RouteLineArrowLayer, std::__1::default_delete<md::RouteLineArrowLayer>>>> {
    struct unique_ptr<md::RouteLineArrowLayer, std::__1::default_delete<md::RouteLineArrowLayer>> *__begin_;
    struct unique_ptr<md::RouteLineArrowLayer, std::__1::default_delete<md::RouteLineArrowLayer>> *__end_;
    struct __compressed_pair<std::__1::unique_ptr<md::RouteLineArrowLayer, std::__1::default_delete<md::RouteLineArrowLayer>>*, std::__1::allocator<std::__1::unique_ptr<md::RouteLineArrowLayer, std::__1::default_delete<md::RouteLineArrowLayer>>>> {
        struct unique_ptr<md::RouteLineArrowLayer, std::__1::default_delete<md::RouteLineArrowLayer>> *__first_;
    } __end_cap_;
};

struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>;

struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> {
    struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>> *__begin_;
    struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>> *__end_;
    struct __compressed_pair<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>*, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> {
        struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>> *__first_;
    } __end_cap_;
};

struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record>> {
    struct Record *__begin_;
    struct Record *__end_;
    struct __compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record>> {
        struct Record *__first_;
    } __end_cap_;
};

struct weak_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<md::StylesheetVendor> {
    struct StylesheetVendor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

#if 0
// Names with conflicting types:
typedef struct {
    CDUnknownFunctionPointerType *_field1;
    struct DeviceVersion _field2;
    struct DeviceCapabilities _field3;
    struct DeviceAPIProperties _field4;
    int _field5;
    int _field6;
} Device_f0710f89;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    Mercator3_d8bb135c _field2;
    struct Coordinate2D<Degrees, double> _field3;
    id _field4;
} Anchor_439ad9f1;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    shared_ptr_06328420 _field2;
} RenderQueue_da5f8b9c;

typedef struct {
    int _field1;
    shared_ptr_807ec9ac _field2;
    struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources>> _field3;
} Device_0f0703c5;

typedef struct {
    struct vector<ggl::RenderQueue::Pass, std::__1::allocator<ggl::RenderQueue::Pass>> _field1;
    struct vector<ggl::CommandBuffer *, std::__1::allocator<ggl::CommandBuffer *>> _field2;
    struct shared_ptr<ggl::RenderTransaction> _field3;
} RenderQueue_e4212455;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    char *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned int _field7;
    unsigned long long _field8;
    BOOL _field9;
    unsigned long long _field10;
    float _field11;
    unsigned long long _field12;
    id _field13;
    int _field14;
} CDStruct_58d0ca89;

typedef struct {
    BOOL borders;
    BOOL folds;
    BOOL angles;
    float minAngle;
    float maxAngle;
} CDStruct_7a997382;

typedef struct {
    BOOL orthographic;
    double width;
    double height;
    double near;
    double far;
    double horizontalOffset;
} CDStruct_7a7719de;

typedef struct {
    BOOL _field1;
} CDStruct_b31ca263;

typedef struct {
    unsigned char timePeriod;
    unsigned char overlayType;
    unsigned char applicationState;
    unsigned char searchResultsType;
    BOOL mapHasLabels;
} CDStruct_80aa614a;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
} CDStruct_7523a67d;

typedef struct {
    unsigned int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
} CDStruct_6adf2384;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    float *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_fae3dc92;

typedef struct {
    int *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_95bda58d;

typedef struct {
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
} CDStruct_a12fb154;

typedef struct {
    double leftCapWidth;
    double rightCapWidth;
    double leftPadding;
    double rightPadding;
} CDStruct_65fe6994;

typedef struct {
    double latitude;
    double longitude;
    double altitude;
} CDStruct_071ac149;

typedef struct {
    float _a;
    unsigned int _b;
    unsigned int _g;
    unsigned int _r;
} CDStruct_58ec0031;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
} CDStruct_818bb265;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct CDStruct_183601bc;

typedef struct {
    id _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct _NSRange _field4;
    CDStruct_183601bc *_field5;
    CDStruct_183601bc *_field6;
    unsigned long long _field7;
    unsigned long long _field8;
    struct _NSRange _field9;
    struct _NSRange _field10;
    BOOL _field11;
    struct _NSRange _field12;
    struct _NSRange _field13;
    struct _NSRange _field14[2];
    struct _NSRange _field15[2];
} CDStruct_cb3d236a;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    CDStruct_183601bc *_field3;
} CDStruct_3b01f0aa;

typedef struct {
    unsigned int _field1;
    float _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    CDStruct_a12fb154 _field6;
} CDStruct_e9f6a06b;

typedef struct {
    unsigned int _field1;
    int _field2;
    int _field3;
    float _field4;
    unsigned int _field5;
    CDStruct_a12fb154 _field6;
} CDStruct_033e8ed6;

typedef struct {
    CDStruct_183601bc *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    CDStruct_183601bc *_field6;
    CDStruct_183601bc *_field7;
} CDStruct_91f75a7f;

typedef struct {
    int from;
    int to;
    CDStruct_80aa614a fromDisplayStyle;
    CDStruct_80aa614a toDisplayStyle;
    float fraction;
} CDStruct_6bdb9208;

typedef struct {
    CDStruct_58d0ca89 _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned int _field6;
    float _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
} CDStruct_5be08681;

typedef struct {
    CDStruct_58d0ca89 _field1;
    char *_field2;
    unsigned long long _field3;
} CDStruct_2da3f85a;

typedef struct {
    CDStruct_58ec0031 _color;
    float _offsetX;
    float _offsetY;
    float _size;
    struct {
        unsigned int offsetX:1;
        unsigned int offsetY:1;
    } _has;
} CDStruct_79d0722e;

typedef struct {
    CDStruct_58ec0031 _color;
    float _width;
} CDStruct_f43f0670;

typedef struct {
    Matrix_6e1d3589 position;
    Matrix_6e1d3589 tangent;
    BOOL tangentValid;
} CDStruct_a199e3d1;

typedef struct {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
} CDStruct_5ae1f918;

typedef struct {
    Matrix_5173352a transitLineColor;
} CDStruct_87ab733e;

typedef struct {
    CDStruct_58d0ca89 _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    int _field4;
    int _field5;
    int _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    union {
        struct {
            CDStruct_b2fbf00d _field1;
            CDStruct_b2fbf00d _field2;
        } _field1;
        CDStruct_818bb265 _field2;
    } _field9;
    CDStruct_183601bc *_field10;
    struct {
        unsigned short _field1[2];
        unsigned short _field2[2];
    } _field11;
    unsigned char _field12;
    BOOL _field13;
    unsigned char _field14;
    BOOL _field15;
    BOOL _field16;
    unsigned char _field17;
    BOOL _field18;
    unsigned char _field19;
    struct _NSRange _field20;
    BOOL _field21;
} CDStruct_6ac9d495;

typedef struct {
    CDStruct_6ac9d495 _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    BOOL _field4;
    BOOL _field5;
} CDStruct_de1a80f1;

typedef struct {
    CDStruct_6ac9d495 _field1;
    CDStruct_b2fbf00d _field2;
    BOOL _field3;
    BOOL _field4;
    BOOL _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    CDStruct_b2fbf00d _field8;
} CDStruct_826c734b;

// Ambiguous groups
typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct {
    double x;
    double y;
} CDStruct_34734122;

typedef struct {
    struct {
        double _field1;
        double _field2;
    } _field1;
    struct {
        double _field1;
        double _field2;
    } _field2;
} CDStruct_90e2a262;

typedef struct Box<double, 2> {
    Matrix_2bdd42a3 _minimum;
    Matrix_2bdd42a3 _maximum;
} Box_3d7e3c2c;

typedef struct Box<float, 2> {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
} Box_3fb92e00;

typedef struct CameraFrame<geo::Radians, double> {
    Mercator3_d8bb135c _target;
    struct Unit<MeterUnitDescription, double> _distanceFromTarget;
    Unit_3d259e8a _pitch;
    Unit_3d259e8a _heading;
} CameraFrame_e4e5578c;

typedef struct FixedPointVector<unsigned char, 4> {
    unsigned char _e[4];
} FixedPointVector_f041f768;

typedef struct Matrix<double, 2, 1> {
    double _e[2];
} Matrix_2bdd42a3;

typedef struct Matrix<double, 3, 1> {
    double _e[3];
} Matrix_6e1d3589;

typedef struct Matrix<double, 4, 4> {
    double _e[16];
} Matrix_08d701e4;

typedef struct Matrix<float, 2, 1> {
    float _e[2];
} Matrix_8746f91e;

typedef struct Matrix<float, 3, 1> {
    float _e[3];
} Matrix_811b2232;

typedef struct Matrix<float, 4, 1> {
    float _e[4];
} Matrix_5173352a;

typedef struct Matrix<float, 4, 4> {
    float _e[16];
} Matrix_99e705ad;

typedef struct Matrix<int, 2, 1> {
    int _e[2];
} Matrix_443f5d51;

typedef struct Mercator2<double> {
    double _e[2];
} Mercator2_57ec32b6;

typedef struct Mercator3<double> {
    double _e[3];
} Mercator3_d8bb135c;

typedef struct MeshVendor<ggl::BuildingFacade::BuildingMesh> {
    struct vector<ggl::BuildingFacade::BuildingMesh *, std::__1::allocator<ggl::BuildingFacade::BuildingMesh *>> _field1;
    struct BuildingMesh *_field2;
} MeshVendor_396e6e4f;

typedef struct MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> {
    struct vector<ggl::BuildingPointyRoof::BuildingMesh *, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *>> _field1;
    struct BuildingMesh *_field2;
} MeshVendor_c6d8e5cd;

typedef struct MeshVendor<ggl::Glow::MeshMesh> {
    struct vector<ggl::Glow::MeshMesh *, std::__1::allocator<ggl::Glow::MeshMesh *>> _field1;
    struct MeshMesh *_field2;
} MeshVendor_43d71dca;

typedef struct MeshVendor<ggl::PolygonShadowedStroke::ShadowPathMesh> {
    struct vector<ggl::PolygonShadowedStroke::ShadowPathMesh *, std::__1::allocator<ggl::PolygonShadowedStroke::ShadowPathMesh *>> _field1;
    struct ShadowPathMesh *_field2;
} MeshVendor_303b8b6a;

typedef struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> {
    struct vector<ggl::PrefilteredLine::PrefilteredLineMesh *, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *>> _field1;
    struct PrefilteredLineMesh *_field2;
} MeshVendor_8027e961;

typedef struct RibbonLayer<ggl::RoadRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*, std::__1::allocator<ggl::RibbonBatch<ggl::RoadRibbonDescriptor>*>> _field2;
    struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> _field3;
    struct RenderState *_field4[8];
} RibbonLayer_db5d8a14;

typedef struct RibbonLayer<ggl::TransitRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*, std::__1::allocator<ggl::RibbonBatch<ggl::TransitRibbonDescriptor>*>> _field2;
    struct vector<ggl::TransitLineRibbon::BaseMesh *, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
} RibbonLayer_d95b4043;

typedef struct Unit<RadianUnitDescription, double> {
    double _value;
} Unit_3d259e8a;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> __r_;
} basic_string_805fe43b;

typedef struct function<void (const md::RoadPiece &)> {
    struct type _field1;
    struct __base<void (const md::RoadPiece &)> *_field2;
} function_186234d7;

typedef struct list<md::TransitDisplayConnection, std::__1::allocator<md::TransitDisplayConnection>> {
    struct __list_node_base<md::TransitDisplayConnection, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::TransitDisplayConnection, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
} list_cc555e0e;

typedef struct pair<md::CommandBufferId, md::CommandBufferId> {
    unsigned char _field1;
    unsigned char _field2;
} pair_4be19211;

typedef struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_97fa0047;

typedef struct shared_ptr<const md::GenericShieldStyleInfo> {
    struct GenericShieldStyleInfo *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_f1f56723;

typedef struct shared_ptr<const md::TransitLineSharedResources> {
    struct TransitLineSharedResources *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f4e206f4;

typedef struct shared_ptr<ggl::BitmapData> {
    struct BitmapData *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_4ce39eb2;

typedef struct shared_ptr<ggl::BitmapDataBase> {
    struct BitmapDataBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_edb96180;

typedef struct shared_ptr<ggl::Clut::Pos2DUVPipelineState> {
    struct Pos2DUVPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_ec7954e2;

typedef struct shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> {
    struct ConstantDataTyped<ggl::Building::Fade> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_cc2c7f49;

typedef struct shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog>> {
    struct ConstantDataTyped<ggl::Fog::Skyfog> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c062e934;

typedef struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>> {
    struct ConstantDataTyped<ggl::Tile::View> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_696716c4;

typedef struct shared_ptr<ggl::Debug::BaseMesh> {
    struct BaseMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_a5e35864;

typedef struct shared_ptr<ggl::Device> {
    struct Device *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_807ec9ac;

typedef struct shared_ptr<ggl::OESDevice> {
    struct OESDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2063da68;

typedef struct shared_ptr<ggl::RenderQueue> {
    struct RenderQueue *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_06328420;

typedef struct shared_ptr<ggl::SamplerState> {
    struct SamplerState *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_cedd5232;

typedef struct shared_ptr<ggl::StandardLibrary> {
    struct StandardLibrary *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_1ddd16cb;

typedef struct shared_ptr<ggl::Texture2D> {
    struct Texture2D *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_479d1306;

typedef struct shared_ptr<ggl::TextureData2D> {
    struct TextureData2D *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_8bee8aae;

typedef struct shared_ptr<ggl::TextureWithReverseAlpha::Pos2DUVPipelineState> {
    struct Pos2DUVPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_0854a852;

typedef struct shared_ptr<ggl::Textured::Pos2DUVPipelineState> {
    struct Pos2DUVPipelineState *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_8d835d6a;

typedef struct shared_ptr<gss::CartoStyle<gss::PropertyID>> {
    struct CartoStyle<gss::PropertyID> *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_144c31f6;

typedef struct shared_ptr<gss::StyleSheet<gss::PropertyID>> {
    struct StyleSheet<gss::PropertyID> *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_664b6d77;

typedef struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> {
    struct StylesheetManager<gss::PropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_a3c46825;

typedef struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> {
    struct StylesheetManager<gss::ScenePropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c37d6e02;

typedef struct shared_ptr<gss::StylesheetQuery<gss::PropertyID>> {
    struct StylesheetQuery<gss::PropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c5d816ee;

typedef struct shared_ptr<md::Anchor> {
    struct Anchor *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2fc78ff4;

typedef struct shared_ptr<md::DataOverrideManager> {
    struct DataOverrideManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_887a193f;

typedef struct shared_ptr<md::FeatureMarker> {
    struct FeatureMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_430519ce;

typedef struct shared_ptr<md::LabelClusterTree> {
    struct LabelClusterTree *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_e2fd4869;

typedef struct shared_ptr<md::LabelExternalPointFeature> {
    struct LabelExternalPointFeature *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e9082761;

typedef struct shared_ptr<md::LabelFeatureMarker> {
    struct LabelFeatureMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_27db7edb;

typedef struct shared_ptr<md::LabelImageKey> {
    struct LabelImageKey *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_85e81048;

typedef struct shared_ptr<md::LabelManager> {
    struct LabelManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e1d4bd06;

typedef struct shared_ptr<md::LabelMapTile> {
    struct LabelMapTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_d0281386;

typedef struct shared_ptr<md::LabelMarker> {
    struct LabelMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2d33c5e4;

typedef struct shared_ptr<md::LabelTile> {
    struct LabelTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_702c344d;

typedef struct shared_ptr<md::NavLabel> {
    struct NavLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_93ff9d4a;

typedef struct shared_ptr<md::ObjectGroup> {
    struct ObjectGroup *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_9d00bcb9;

typedef struct shared_ptr<md::StylesheetVendor> {
    struct StylesheetVendor *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_dd2d1f5e;

typedef struct shared_ptr<md::TransitInterTileMediator> {
    struct TransitInterTileMediator *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_10302801;

typedef struct shared_ptr<md::TransitItemMarker> {
    struct TransitItemMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3e9bdfe1;

typedef struct unordered_map<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>, std::__1::hash<md::PatternedBatchKey>, std::__1::equal_to<md::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, std::__1::__unordered_map_hasher<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, std::__1::hash<md::PatternedBatchKey>, true>, std::__1::__unordered_map_equal<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, std::__1::equal_to<md::PatternedBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, std::__1::hash<md::PatternedBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon>>>>>>, std::__1::equal_to<md::PatternedBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_167c727b;

typedef struct unordered_map<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>, std::__1::hash<md::RoadBatchKey>, std::__1::equal_to<md::RoadBatchKey>, std::__1::allocator<std::__1::pair<const md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, std::__1::__unordered_map_hasher<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, std::__1::hash<md::RoadBatchKey>, true>, std::__1::__unordered_map_equal<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, std::__1::equal_to<md::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, std::__1::hash<md::RoadBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon>>>>>>, std::__1::equal_to<md::RoadBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_95f1fb18;

typedef struct unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_map_923201b5;

typedef struct unordered_map<unsigned long long, md::PolygonRouteAttributes, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, md::PolygonRouteAttributes>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_map_5292d3da;

typedef struct unordered_set<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink>> {
    struct __hash_table<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>, std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, TransitLineWithLinkHash> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<TransitLineWithLink>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_set_e7be2da0;

typedef struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
    struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<unsigned long long>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_set_65896b03;

typedef struct vector<GEO3DBuildingFeature, std::__1::allocator<GEO3DBuildingFeature>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<GEO3DBuildingFeature *, std::__1::allocator<GEO3DBuildingFeature>> {
        CDStruct_183601bc *_field1;
    } _field3;
} vector_25c79282;

typedef struct vector<RouteJunctionInfo, std::__1::allocator<RouteJunctionInfo>> {
    struct RouteJunctionInfo *_field1;
    struct RouteJunctionInfo *_field2;
    struct __compressed_pair<RouteJunctionInfo *, std::__1::allocator<RouteJunctionInfo>> {
        struct RouteJunctionInfo *_field1;
    } _field3;
} vector_682a2c99;

typedef struct vector<geo::fast_shared_ptr<md::RouteLineSection>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection>>> {
    struct fast_shared_ptr<md::RouteLineSection> *__begin_;
    struct fast_shared_ptr<md::RouteLineSection> *__end_;
    struct __compressed_pair<geo::fast_shared_ptr<md::RouteLineSection>*, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection>>> {
        struct fast_shared_ptr<md::RouteLineSection> *__first_;
    } __end_cap_;
} vector_8449fd58;

typedef struct vector<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, std::__1::allocator<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>> {
    struct BuildingFlatStrokeMesh *__begin_;
    struct BuildingFlatStrokeMesh *__end_;
    struct __compressed_pair<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh *, std::__1::allocator<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>> {
        struct BuildingFlatStrokeMesh *__first_;
    } __end_cap_;
} vector_8a1db405;

typedef struct vector<ggl::PolygonBase::CompressedMeshMesh, std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh>> {
    struct CompressedMeshMesh *__begin_;
    struct CompressedMeshMesh *__end_;
    struct __compressed_pair<ggl::PolygonBase::CompressedMeshMesh *, std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh>> {
        struct CompressedMeshMesh *__first_;
    } __end_cap_;
} vector_3f17ee4c;

typedef struct vector<ggl::PolygonCommonStroke::MeshMesh, std::__1::allocator<ggl::PolygonCommonStroke::MeshMesh>> {
    struct MeshMesh *__begin_;
    struct MeshMesh *__end_;
    struct __compressed_pair<ggl::PolygonCommonStroke::MeshMesh *, std::__1::allocator<ggl::PolygonCommonStroke::MeshMesh>> {
        struct MeshMesh *__first_;
    } __end_cap_;
} vector_83cbb261;

typedef struct vector<gm::Box<double, 2>, std::__1::allocator<gm::Box<double, 2>>> {
    Box_3d7e3c2c *__begin_;
    Box_3d7e3c2c *__end_;
    struct __compressed_pair<gm::Box<double, 2>*, std::__1::allocator<gm::Box<double, 2>>> {
        Box_3d7e3c2c *__first_;
    } __end_cap_;
} vector_b9326b03;

typedef struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
    Matrix_2bdd42a3 *__begin_;
    Matrix_2bdd42a3 *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
        Matrix_2bdd42a3 *__first_;
    } __end_cap_;
} vector_e20517dc;

typedef struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
    Matrix_8746f91e *_field1;
    Matrix_8746f91e *_field2;
    struct __compressed_pair<gm::Matrix<float, 2, 1>*, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
        Matrix_8746f91e *_field1;
    } _field3;
} vector_1a7ef145;

typedef struct vector<md::TileExclusionArea, std::__1::allocator<md::TileExclusionArea>> {
    struct TileExclusionArea *__begin_;
    struct TileExclusionArea *__end_;
    struct __compressed_pair<md::TileExclusionArea *, std::__1::allocator<md::TileExclusionArea>> {
        struct TileExclusionArea *__first_;
    } __end_cap_;
} vector_ea81101c;

typedef struct vector<md::TransitLine, std::__1::allocator<md::TransitLine>> {
    struct TransitLine *__begin_;
    struct TransitLine *__end_;
    struct __compressed_pair<md::TransitLine *, std::__1::allocator<md::TransitLine>> {
        struct TransitLine *__first_;
    } __end_cap_;
} vector_8a951411;

typedef struct vector<md::TransitLink, std::__1::allocator<md::TransitLink>> {
    struct TransitLink *__begin_;
    struct TransitLink *__end_;
    struct __compressed_pair<md::TransitLink *, std::__1::allocator<md::TransitLink>> {
        struct TransitLink *__first_;
    } __end_cap_;
} vector_1e20c8c3;

typedef struct vector<std::__1::pair<TransitLineWithLink, float>, std::__1::allocator<std::__1::pair<TransitLineWithLink, float>>> {
    struct pair<TransitLineWithLink, float> *_field1;
    struct pair<TransitLineWithLink, float> *_field2;
    struct __compressed_pair<std::__1::pair<TransitLineWithLink, float>*, std::__1::allocator<std::__1::pair<TransitLineWithLink, float>>> {
        struct pair<TransitLineWithLink, float> *_field1;
    } _field3;
} vector_1e3b8d07;

typedef struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair>>> {
    struct pair<bool, GEOFeatureStylePair> *_field1;
    struct pair<bool, GEOFeatureStylePair> *_field2;
    struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair>*, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair>>> {
        struct pair<bool, GEOFeatureStylePair> *_field1;
    } _field3;
} vector_0496561e;

typedef struct vector<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>, std::__1::allocator<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>>> {
    struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>> *__begin_;
    struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>> *__end_;
    struct __compressed_pair<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>*, std::__1::allocator<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>>>> {
        struct pair<std::__1::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup, std::__1::default_delete<ggl::PolygonSolidFill::MeshPipelineSetup>>, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>>> *__first_;
    } __end_cap_;
} vector_87190c80;

typedef struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
    shared_ptr_479d1306 *__begin_;
    shared_ptr_479d1306 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D>*, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
        shared_ptr_479d1306 *__first_;
    } __end_cap_;
} vector_dc840c5c;

typedef struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
    shared_ptr_c5d816ee *__begin_;
    shared_ptr_c5d816ee *__end_;
    struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>*, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
        shared_ptr_c5d816ee *__first_;
    } __end_cap_;
} vector_2cb66512;

typedef struct vector<std::__1::shared_ptr<md::LabelFeatureMarker>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeatureMarker>>> {
    shared_ptr_27db7edb *_field1;
    shared_ptr_27db7edb *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelFeatureMarker>*, std::__1::allocator<std::__1::shared_ptr<md::LabelFeatureMarker>>> {
        shared_ptr_27db7edb *_field1;
    } _field3;
} vector_8bf6b0e5;

typedef struct vector<std::__1::shared_ptr<md::LabelMarker>, std::__1::allocator<std::__1::shared_ptr<md::LabelMarker>>> {
    shared_ptr_2d33c5e4 *_field1;
    shared_ptr_2d33c5e4 *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelMarker>*, std::__1::allocator<std::__1::shared_ptr<md::LabelMarker>>> {
        shared_ptr_2d33c5e4 *_field1;
    } _field3;
} vector_af4a736d;

typedef struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel>>> {
    shared_ptr_93ff9d4a *__begin_;
    shared_ptr_93ff9d4a *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::NavLabel>*, std::__1::allocator<std::__1::shared_ptr<md::NavLabel>>> {
        shared_ptr_93ff9d4a *__first_;
    } __end_cap_;
} vector_c899b68f;

typedef struct vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup>>> {
    shared_ptr_9d00bcb9 *__begin_;
    shared_ptr_9d00bcb9 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::ObjectGroup>*, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup>>> {
        shared_ptr_9d00bcb9 *__first_;
    } __end_cap_;
} vector_fbcf581f;

typedef struct vector<std::__1::shared_ptr<md::TransitNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitNode>>> {
    struct shared_ptr<md::TransitNode> *__begin_;
    struct shared_ptr<md::TransitNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::TransitNode>*, std::__1::allocator<std::__1::shared_ptr<md::TransitNode>>> {
        struct shared_ptr<md::TransitNode> *__first_;
    } __end_cap_;
} vector_3c601afa;

typedef struct weak_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_96fca551;

