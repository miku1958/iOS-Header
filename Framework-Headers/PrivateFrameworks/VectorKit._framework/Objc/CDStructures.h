//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

@class GEOFeatureStyleAttributes, VKCamera, VKPolylineOverlay, VKResourceManager, VKRouteContext, VKTimedAnimation;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AABB {
    float _field1[2];
    float _field2[2];
};

struct ARContext;

struct AdditionalRouteInfo;

struct Allocator;

struct AlphaAtlas {
    BOOL _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    float _field5;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> _field6;
};

struct AltitudeDebugSettings {
    BOOL altitudePauseLoading;
    BOOL altitudeFreezeViewNode;
    BOOL altitudeTexturePaging;
    BOOL altitudeShowTileBounds;
    BOOL altitudeThreadDrawing;
    BOOL altitudeMipmapSatellite;
    BOOL altitudeMipmapFlyover;
    BOOL altitudeMipmapObjectTree;
    BOOL altitudeShowNightLight;
    float lodScale;
    float tileQualityThreshold;
    float hideMeshTime;
    float fadeSpeed;
    BOOL tourSpeedup;
    float tourSpeedupFactor;
};

struct AnchorManager {
    CDUnknownFunctionPointerType *_field1;
    BOOL _field2;
    struct GlobeView *_field3;
    struct MercatorTerrainHeightCache *_field4;
    struct unordered_set<md::Anchor *, std::__1::hash<md::Anchor *>, std::__1::equal_to<md::Anchor *>, std::__1::allocator<md::Anchor *>> _field5;
};

struct AnimationObjectHolder;

struct AnimationReferenceTimer {
    double _field1;
    double _field2;
    double _field3;
};

struct AnimationRunner {
    struct MapEngine *_field1;
};

struct AnimationTimer;

struct AttachmentActions {
    int _field1;
    int _field2;
};

struct AvoidanceRectWithPriority;

struct BasicViewNode;

struct Batcher {
    MultiRange_4bdc93a8 _field1;
    struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator>> _field2;
    MultiRange_4bdc93a8 _field3;
};

struct BitmapDataBase;

struct Box<double, 2> {
    Matrix_2bdd42a3 _minimum;
    Matrix_2bdd42a3 _maximum;
};

struct Box<float, 2> {
    Matrix_8746f91e _minimum;
    Matrix_8746f91e _maximum;
};

struct Box<float, 3> {
    Matrix_811b2232 _minimum;
    Matrix_811b2232 _maximum;
};

struct BufferData;

struct BufferMemory {
    struct ResourceAccessor *_accessor;
    struct BufferData *_user;
    struct Range<unsigned long> _range;
    int _access;
    int _sync;
    char *_data;
};

struct BumpAnimator;

struct BundleLoader;

struct C3bRequestManager;

struct C3mmRequestManager;

struct CGColor;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct Cache<unsigned char, std::__1::shared_ptr<geo::Polygon2<double>>, std::__1::hash<unsigned char>, LRUPolicy>;

struct Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>>>, std::__1::hash<unsigned char>, LRUPolicy>;

struct Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy>;

struct Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy>;

struct Camera {
    CameraFrame_406dbd31 _field1;
    struct ViewSize _field2;
    Unit_3d259e8a _field3;
    struct Unit<MeterUnitDescription, double> _field4;
    struct Unit<MeterUnitDescription, double> _field5;
    double _field6;
    Matrix_8746f91e _field7;
};

struct CameraContext {
    struct SingleCameraContext _field1;
    struct ViewTransform _field2;
    struct unique_ptr<md::SingleCameraContext, std::__1::default_delete<md::SingleCameraContext>> _field3;
};

struct CameraFrame<geo::Radians, double> {
    Coordinate3D_bc242218 _target;
    struct Unit<MeterUnitDescription, double> _distanceFromTarget;
    Unit_3d259e8a _pitch;
    Unit_3d259e8a _heading;
    Unit_3d259e8a _roll;
};

struct CameraLod;

struct CameraManager {
    CDUnknownFunctionPointerType *_vptr$CameraManager;
    BOOL _panBegin;
    BOOL _panInProgress;
    BOOL _panEnd;
    Matrix_443f5d51 _panCurrentCursor;
    Matrix_443f5d51 _panPreviousCursor;
    Matrix_443f5d51 _panStartCursor;
    Coordinate3D_bc242218 _panStartPosition;
    double _panDistance;
    BOOL _panAtStartPosition;
    BOOL _rotateBegin;
    BOOL _rotateInProgress;
    BOOL _rotateEnd;
    Coordinate3D_bc242218 _rotateStartPosition;
    Matrix_443f5d51 _rotateCurrentCursor;
    double _rotateAngle;
    BOOL _tiltBegin;
    BOOL _tiltInProgress;
    BOOL _tiltEnd;
    Coordinate3D_bc242218 _tiltStartPosition;
    Matrix_443f5d51 _tiltCurrentCursor;
    Matrix_443f5d51 _tiltPreviousCursor;
    double _tiltAngle;
    BOOL _zoomBegin;
    BOOL _zoomInProgress;
    BOOL _zoomEnd;
    Coordinate3D_bc242218 _zoomStartPosition;
    Matrix_443f5d51 _zoomCurrentCursor;
    double _zoomFactor;
    double _zoomStartDistance;
    BOOL _zoomRotateToNorth;
    BOOL _useTiltLimit;
    int _tiltLimitMode;
    BOOL _tiltLimitPushDownEnabled;
    BOOL _tiltLimitTransferInProgress;
    BOOL _tiltLimitPushDown;
    double _startPushDownTilt;
    double _tiltLimitTransferFraction;
    double _startTiltLimitTilt;
    Geocentric_d8fde6f2 _startTiltLimitPosition;
    Matrix_6e1d3589 _startTiltLimitDirection;
    double _fullZoomTiltLimitFactor;
    Box_3d7e3c2c _singleRestriction;
    Box_3d7e3c2c _westOfDatelineRestriction;
    Box_3d7e3c2c _eastOfDatelineRestriction;
};

struct CameraView {
    struct Camera _field1;
    struct PerspectiveView<double> _field2;
    struct Frustum<double> _field3;
};

struct CartographicRenderer {
    CDUnknownFunctionPointerType *_field1;
    shared_ptr_e963992e _field2;
    struct unique_ptr<md::PassList, std::__1::default_delete<md::PassList>> _field3;
    struct unique_ptr<md::FrameGraphResourceRegistry, std::__1::default_delete<md::FrameGraphResourceRegistry>> _field4;
    struct vector<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>, std::__1::allocator<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>>> _field5;
    struct linear_map<md::CommandBufferLocation, md::RenderLayer *, std::__1::equal_to<md::CommandBufferLocation>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>>, std::__1::vector<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>>>> _field6;
    struct RunLoopController *_field7;
    struct MapEngine *_field8;
    id _field9;
};

struct CircleOverlayRenderable;

struct ClearItem {
    unsigned char _field1;
    struct Matrix<float, 4, 1> _field2;
    BOOL _field3;
    float _field4;
    unsigned char _field5;
    unsigned int _field6;
};

struct ClusterTreeClusterNode {
    CDUnknownFunctionPointerType *_field1;
    struct Range<float> _field2;
    Mercator2_57ec32b6 _field3;
    struct ClusterTreeClusterNode *_field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned char _field7;
    BOOL _field8;
    struct _retain_ptr<id<VKCustomFeatureAnnotation>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field9;
    struct ClusterTreeNode *_field10[2];
    struct ClusterTreeFeatureNode *_field11;
    double _field12;
    unsigned int _field13;
    BOOL _field14;
    BOOL _field15;
};

struct ClusterTreeFeatureNode;

struct ClusterTreeNode;

struct CollectionPoint {
    unsigned long long pointId;
    struct RigidTransform<double, float> frame;
    struct Unit<RadianUnitDescription, float> heading;
    Mercator3_d8bb135c mercatorPosition;
    unsigned long long time;
    struct small_vector<md::mun::PhotoInfo, 6> photos;
    float heightAboveGroundMeters;
    unsigned int buildId;
    unsigned short bucketId;
    unsigned char type;
    unsigned char dataType;
    unsigned char texturedLodMask;
};

struct Color<double, 4, geo::ColorSpace::Linear> {
    struct Matrix<double, 4, 1> _backing;
};

struct Color<float, 4, geo::ColorSpace::Linear> {
    struct Matrix<float, 4, 1> _field1;
};

struct Color<unsigned char, 4, geo::ColorSpace::Linear> {
    struct Matrix<unsigned char, 4, 1> _backing;
};

struct Color<unsigned char, 4, geo::ColorSpace::sRGB> {
    struct Matrix<unsigned char, 4, 1> _backing;
};

struct CommandBuffer;

struct CommandBufferLocation {
    unsigned char _field1;
    unsigned char _field2;
};

struct CommonLibrary;

struct CompleteGlobeTileSetCullingGraph;

struct CompleteGlobeTileSetLoader;

struct ComputeShaderEntry;

struct ConstantData;

struct Context;

struct ConvexHull2<double> {
    vector_554e3200 _field1;
};

struct Coordinate2D<Degrees, double> {
    Unit_57582783 latitude;
    Unit_57582783 longitude;
};

struct Coordinate2D<Radians, double> {
    Unit_3d259e8a latitude;
    Unit_3d259e8a longitude;
};

struct Coordinate3D<Radians, double> {
    Unit_3d259e8a latitude;
    Unit_3d259e8a longitude;
    struct Unit<MeterUnitDescription, double> altitude;
};

struct CullingNode;

struct CustomLandmarksContainer;

struct DataOverrideManager;

struct DataWrite<ggl::BuildingFlatStroke::DefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::ColoredText::My>;

struct DataWrite<ggl::PolygonBase::CompressedVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::PolygonCommonStroke::DefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::VenueWall::DefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::VenueWall::EndCapVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<unsigned short> {
    struct BufferMemory _memory;
};

struct DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap>> {
    struct mutex _field1;
    struct atomic<altitude::TextureMap *> _field2;
    struct function<altitude::TextureMap *()> _field3;
};

struct DclpUnique<ggl::Texture2D, altitude::util::DclpDefaultDelete<ggl::Texture2D>> {
    struct mutex _field1;
    struct atomic<ggl::Texture2D *> _field2;
    struct function<ggl::Texture2D *()> _field3;
};

struct DebugConsole {
    CDUnknownFunctionPointerType *_field1;
    Matrix_8746f91e _field2;
    Matrix_8746f91e _field3;
    Matrix_8746f91e _field4;
    Matrix_8746f91e _field5;
    int _field6;
    int _field7;
    unsigned long long _field8;
    struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> _field9;
    struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> _field10;
    struct unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My>>> _field11;
    unsigned long long _field12;
    Matrix_8746f91e *_field13;
    Color_c5f82c4a _field14;
    Color_c5f82c4a _field15;
    float _field16;
    BOOL _field17;
    struct CommonLibrary *_field18;
    struct RenderTargetFormat _field19;
};

struct DebugConsoleManager;

struct DebugTreeNode {
    basic_string_23d93216 _name;
    basic_string_23d93216 _identifier;
    struct vector<gdc::DebugTreeNode, std::__1::allocator<gdc::DebugTreeNode>> _children;
    struct vector<gdc::DebugTreeProperty, std::__1::allocator<gdc::DebugTreeProperty>> _properties;
};

struct DebugTreeProperty {
    basic_string_23d93216 _field1;
    int _field2;
    struct vector<gdc::DebugTreeValue, std::__1::allocator<gdc::DebugTreeValue>> _field3;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field4;
};

struct DebugTreeValue {
    struct ValueStruct _field1;
    int _field2;
};

struct DeviceAPIProperties {
    int _field1;
    int _field2;
    double _field3;
    BOOL _field4;
};

struct DeviceCapabilities {
    BOOL _field1;
    BOOL _field2;
    BOOL _field3;
    BOOL _field4;
    BOOL _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    struct DeviceSize _field9;
};

struct DeviceSize {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct DeviceVersion {
    unsigned int _field1;
    unsigned int _field2;
};

struct DisplayLink;

struct DistanceAtlas {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> _field4;
};

struct Drawable;

struct DtmCacheNode;

struct DtmRequestManager;

struct EarthAdjustedViewNode;

struct Edge;

struct FadeEffectBlock;

struct FeatureAttributePair;

struct FeatureAttributeSet {
    struct vector<gss::FeatureAttributePair, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator>> _attributes;
};

struct FeatureMarker;

struct FlyoverLibrary;

struct FlyoverRouteOverlayCache;

struct FlyoverTour;

struct FontManager;

struct FrameGraphResourceRegistry;

struct FreezeViewNode;

struct Frustum<double> {
    struct array<gm::Plane3<double>, 6> _field1;
    struct array<gm::Matrix<double, 3, 1>, 8> _field2;
};

struct FunctionEntry;

struct GEOTileSetRegion {
    unsigned int _maxX;
    unsigned int _maxY;
    unsigned int _maxZ;
    unsigned int _minX;
    unsigned int _minY;
    unsigned int _minZ;
};

struct GeoCoordinates {
    struct Longitude _field1;
    struct Latitude _field2;
    int _field3;
};

struct GeoResourceLoader;

struct GeoResourceManager;

struct GeoResourceProvider {
    CDUnknownFunctionPointerType *_field1;
    struct unordered_set<grl::ResourceObserver *, std::__1::hash<grl::ResourceObserver *>, std::__1::equal_to<grl::ResourceObserver *>, std::__1::allocator<grl::ResourceObserver *>> _field2;
    struct read_write_lock _field3;
    struct read_write_lock _field4;
    struct read_write_lock _field5;
    struct map<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>, std::__1::less<grl::ResourceProvider::ResourceCacheKey>, std::__1::allocator<std::__1::pair<const grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>>> _field6;
    struct _retain_ptr<GRLResourceGroupObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field7;
    struct _retain_ptr<RegionalResourceObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field8;
    struct linear_map<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>, std::__1::equal_to<std::__1::bitset<2>>, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>>, std::__1::vector<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>>>> _field9;
};

struct GeoServicesLoadJob;

struct GeoServicesLoader;

struct Geocentric<double> {
    double _e[3];
};

struct GeometricHasher {
    struct AABB _field1;
    float _field2;
};

struct GlobeAdapter {
    struct shared_ptr<md::GlobeAdapterData> _field1;
    struct GlobeView *_field2;
    struct unordered_set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::hash<std::__1::shared_ptr<md::LabelMapTile>>, std::__1::equal_to<std::__1::shared_ptr<md::LabelMapTile>>, geo::StdAllocator<std::__1::shared_ptr<md::LabelMapTile>, mdm::Allocator>> _field3;
    struct shared_ptr<md::LabelManager> _field4;
};

struct GlobeAdapterData;

struct GlobeCleanupLoader;

struct GlobeDispatch;

struct GlobeMainViewNode;

struct GlobeOverlayContainer {
    struct GlobeView *_field1;
    id _field2;
    struct mutex _field3;
    double _field4;
};

struct GlobeTileRenderManager;

struct GlobeView {
    CDUnknownFunctionPointerType *_field1;
    struct GeoServicesLoader *_field2;
    struct ManifestManager *_field3;
    struct TriggerManager *_field4;
    struct shared_ptr<altitude::AnchorManager> _field5;
    struct DtmCacheNode *_field6;
    struct DtmRequestManager *_field7;
    struct FreezeViewNode *_field8;
    struct shared_ptr<gdc::Camera> _field9;
    BOOL _field10;
    basic_string_23d93216 _field11;
    basic_string_23d93216 _field12;
    struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey>> _field13;
    BOOL _field14;
    unsigned int _field15;
    unsigned int _field16;
    id _field17;
    BOOL _field18;
    BOOL _field19;
    struct AnimationManager {
        struct AnimationReferenceTimer _field1;
        struct unique_ptr<altitude::AnimationTimer, std::__1::default_delete<altitude::AnimationTimer>> _field2;
        double _field3;
        struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder>> _field4;
    } _field20;
    struct Stopwatch _field21;
    double _field22;
    BOOL _field23;
    Unit_3d259e8a _field24;
    double _field25;
    Unit_3d259e8a _field26;
    CameraFrame_406dbd31 _field27;
    struct C3mmRequestManager *_field28;
    struct RenderableGroup *_field29;
    unsigned int _field30;
    double _field31;
    struct {
        double _field1;
        double _field2;
    } _field32;
    BOOL _field33;
    BOOL _field34;
    struct LabelDataManagerPrivate *_field35;
    BOOL _field36;
    BOOL _field37;
    BOOL _field38;
    BOOL _field39;
    struct RouteLineManager *_field40;
    struct GlobeCleanupLoader *_field41;
    struct CompleteGlobeTileSetCullingGraph *_field42;
    struct CompleteGlobeTileSetLoader *_field43;
    struct TileSetNode *_field44;
    struct GlobeTileRenderManager *_field45;
    struct CullingNode *_field46;
    struct EarthAdjustedViewNode *_field47;
    struct UserViewNode *_field48;
    struct View *_field49;
    struct BasicViewNode *_field50;
    struct GlobeMainViewNode *_field51;
    struct C3bRequestManager *_field52;
    BOOL _field53;
    struct shared_ptr<bool> _field54;
    struct HeightRequestManager *_field55;
    struct map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double>>, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double>>>>> _field56;
    struct Mutex _field57;
    shared_ptr_a3c46825 _field58;
    struct FlyoverTour *_field59;
    BOOL _field60;
    struct Viewport _field61;
    BOOL _field62;
    struct set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *>> _field63;
    struct unique_ptr<ReachabilityChangedObserver, std::__1::default_delete<ReachabilityChangedObserver>> _field64;
    struct TileManager *_field65;
    struct ObjectTreeLoader *_field66;
    struct QuickSurfaceManager *_field67;
    struct IntersectorHeight *_field68;
    struct shared_ptr<karo::SharedItemManager<altitude::Map, altitude::MapRequestId>> _field69;
    struct BundleLoader *_field70;
    struct ProtocolLoader *_field71;
    struct GeoResourceManager *_field72;
    struct GeoResourceLoader *_field73;
    struct ViewNode *_field74;
    struct ViewportNode *_field75;
    struct View *_field76;
    struct Viewport *_field77;
    struct shared_ptr<ggl::RenderState> _field78;
    unsigned int _field79;
    struct Statistics *_field80;
    struct atomic<bool> _field81;
    struct TexturePager *_field82;
    struct IOSurfacePool *_field83;
    struct RealisticRenderer *_field84;
    struct DclpUnique<ggl::Texture2D, altitude::util::DclpDefaultDelete<ggl::Texture2D>> _field85;
    struct DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap>> _field86;
    struct DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap>> _field87;
};

struct HeightRequestManager;

struct IOSurfacePool;

struct IOSurfaceTexture;

struct IconImage;

struct IconManager {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<grl::ResourceProvider> _field2;
    struct read_write_lock _field3;
    BOOL _field4;
    struct PackInfo *_field5;
    struct read_write_lock _field6;
    struct map<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock, std::__1::less<std::__1::pair<std::__1::basic_string<char>, float>>, geo::StdAllocator<std::__1::pair<const std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, grl::Allocator>> _field7;
    shared_ptr_76a6df1b _field8;
};

struct IconModifiers {
    BOOL _isGlyphHidden;
    BOOL _isGlyphOnly;
    BOOL _isInfoOnly;
    BOOL _isMirrored;
    float _opacity;
    float _scale;
    struct optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB>> _textColor;
    struct optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB>> _customColor;
    optional_44235073 _fontSize;
    optional_44235073 _tailDirection;
    optional_44235073 _textBaseline;
    struct optional<gm::Matrix<float, 2, 1>> _fillSize;
    struct optional<std::__1::basic_string<char>> _fontName;
    struct optional<std::__1::basic_string<char>> _textLocale;
    struct map<unsigned short, std::__1::basic_string<char>, std::__1::less<unsigned short>, geo::StdAllocator<std::__1::pair<const unsigned short, std::__1::basic_string<char>>, grl::Allocator>> _text;
};

struct IconVariant {
    unsigned int primary;
    unsigned int secondary;
};

struct Incident {
    struct GeoCoordinates _field1;
    struct String _field2;
    struct String _field3;
    int _field4;
    struct String _field5;
    struct String _field6;
    long long _field7;
    long long _field8;
    long long _field9;
    long long _field10;
    int _field11;
    unsigned char _field12;
    BOOL _field13;
    int _field14;
    unsigned char _field15;
    unsigned char _field16;
};

struct Intersection {
    Geocentric_d8fde6f2 _field1;
    Matrix_6e1d3589 _field2;
};

struct IntersectorHeight;

struct IsoAlphaAtlas {
    unsigned int _field1;
    unsigned int _field2;
    float _field3;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> _field4;
    struct shared_ptr<ggl::SamplerState> _field5;
};

struct LabelClusterProvider;

struct LabelClusterTree;

struct LabelCustomFeatureProvider {
    struct LabelCustomFeatureSupport *_field1;
    struct LabelManager *_field2;
    struct _retain_ptr<VKCustomFeatureDataSourceObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field3;
    struct _retain_ptr<id<VKCustomFeatureDataSource>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field4;
    struct map<geo::MercatorTile, md::LabelCustomFeatureProvider::TileInfo, md::LabelCustomFeatureProvider::TileKeyLess, geo::StdAllocator<std::__1::pair<const geo::MercatorTile, md::LabelCustomFeatureProvider::TileInfo>, mdm::Allocator>> _field5;
    struct _retain_ptr<id<VKCustomFeatureAnnotation>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field6;
    struct shared_ptr<md::LabelScene> _field7;
    struct map<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo, std::__1::less<id<VKCustomFeatureAnnotation>>, geo::StdAllocator<std::__1::pair<const id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, mdm::Allocator>> _field8;
    struct unique_ptr<md::LabelClusterProvider, std::__1::default_delete<md::LabelClusterProvider>> _field9;
    BOOL _field10;
    unsigned char _field11;
    unsigned char _field12;
};

struct LabelCustomFeatureSupport;

struct LabelDataManagerPrivate;

struct LabelExternalIconElement {
    Matrix_8746f91e size;
    Matrix_8746f91e anchorPoint;
    BOOL isRound;
    unsigned char minZoom;
};

struct LabelExternalPointFeature;

struct LabelExternalTextElement {
    unsigned char minZoom;
    unsigned char textType;
    struct StringWithLocale text;
    struct StringWithLocale localizedText;
};

struct LabelImageKey;

struct LabelImageLoader;

struct LabelLayoutContext;

struct LabelManager;

struct LabelMarker;

struct LabelMarkerFeatureHandle {
    unsigned char featureType;
    long long featureIndex;
    struct MercatorTile key;
    int tileStyle;
    unsigned int tileVersion;
    GEOFeatureStyleAttributes *styleAttributes;
};

struct LabelNavJunctionInfo;

struct LabelNavLayoutContext;

struct LabelScene;

struct LabelSettings {
    struct LabelSettings_Presentation _field1;
    struct LabelSettings_Navigation _field2;
    struct LabelSettings_Markers _field3;
    struct shared_ptr<md::LabelManager> _field4;
    struct unique_ptr<md::LabelSettingsData, std::__1::default_delete<md::LabelSettingsData>> _field5;
};

struct LabelSettingsData;

struct LabelSettings_Markers {
    struct LabelSettings *_field1;
};

struct LabelSettings_Navigation {
    struct LabelSettings *_field1;
};

struct LabelSettings_Presentation {
    struct LabelSettings *_field1;
};

struct LabelStyle;

struct LabelTile;

struct LabelTransitRoute;

struct LabelTransitRouteLine;

struct LabelTransitSupport {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct LabelManager *_field3;
    shared_ptr_887a193f _field4;
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field5;
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field6;
    struct _retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field7;
    BOOL _field8;
    BOOL _field9;
    BOOL _field10;
    BOOL _field11;
    double _field12;
    struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, mdm::Allocator>> _field13;
    struct vector<std::__1::shared_ptr<md::LabelFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator>> _field14;
    struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, geo::StdAllocator<unsigned long long, mdm::Allocator>> _field15;
    struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, mdm::Allocator>> _field16;
    struct vector<std::__1::shared_ptr<md::LabelFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator>> _field17;
    struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>, md::LabelExternalRoadFeatureLess, geo::StdAllocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>>, mdm::Allocator>> _field18;
    struct _retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field19;
    struct shared_ptr<md::LabelTransitRoute> _field20;
    struct shared_ptr<md::LabelTransitRouteLine> _field21;
    unsigned int _field22;
    struct unordered_map<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, geo::StdAllocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, mdm::Allocator>> _field23;
};

struct Latitude {
    unsigned int _field1;
};

struct LayoutContext {
    id _field1;
    struct shared_ptr<gdc::Camera> _field2;
    unsigned char _field3;
    struct VKEdgeInsets _field4;
    struct VKEdgeInsets _field5;
    struct shared_ptr<ggl::PolygonBase::MeshMesh> _field6;
    struct shared_ptr<ggl::PolygonBase::MeshMesh> _field7;
    struct shared_ptr<ggl::CommonMesh::Pos2UVMesh> _field8;
    struct StencilManager _field9;
    struct shared_ptr<ggl::Device> _field10;
    struct Loader _field11;
    struct Loader *_field12;
    double _field13;
    BOOL _field14;
    BOOL _field15;
    BOOL _field16;
    BOOL _field17;
    Coordinate3D_bc242218 _field18;
    float _field19;
    struct View *_field20;
    struct View *_field21;
    struct Viewport *_field22;
    struct ARContext *_field23;
    unsigned long long _field24;
    unsigned long long _field25;
    struct unordered_map<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>>> _field26;
};

struct Loader {
    struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl>> _field1;
};

struct LoaderImpl;

struct LoadingStatusTracker {
    CDUnknownFunctionPointerType *_field1;
    struct mutex _field2;
    int _field3;
    id _field4;
    struct optional<gdc::SceneStatus> _field5;
    BOOL _field6;
    function_d3afe2e2 _field7;
    struct function<void (NSError *)> _field8;
    function_d3afe2e2 _field9;
    struct function<void (gdc::SceneStatus)> _field10;
};

struct LogicBase;

struct LogicManager {
    CDUnknownFunctionPointerType *_field1;
    struct unordered_map<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>>> _field2;
    struct vector<md::LogicBase *, std::__1::allocator<md::LogicBase *>> _field3[3];
};

struct Longitude {
    unsigned int _field1;
};

struct ManeuverArrowCoordinates {
    struct vector<md::ManeuverArrowInfo, std::__1::allocator<md::ManeuverArrowInfo>> _maneuverArrows;
};

struct ManeuverArrowInfo;

struct ManeveuverDistancesRange {
    double _immediate;
    double _extremlyNear;
    double _veryNear;
    double _near;
    double _medium;
    double _far;
    double _veryFar;
};

struct ManifestManager;

struct MapDataAccess {
    struct World *_field1;
    unsigned char _field2;
    unsigned char _field3;
    id _field4;
    struct shared_ptr<gdc::Camera> _field5;
};

struct MapEngine {
    CDUnknownFunctionPointerType *_field1;
    shared_ptr_e963992e _field2;
    struct Device *_field3;
    struct RealisticCommandBufferSelector *_field4;
    struct _retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field5;
    struct unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink>> _field6;
    struct unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop>> _field7;
    struct RunLoop *_field8;
    struct unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager>> _field9;
    struct unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner>> _field10;
    struct shared_ptr<md::RunLoopController> _field11;
    id _field12;
    id _field13;
    id _field14;
    id _field15;
    struct unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer>> _field16;
    struct unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer>> _field17;
    struct Renderer *_field18;
    struct unique_ptr<md::World, std::__1::default_delete<md::World>> _field19;
    struct unique_ptr<md::MapDataAccess, std::__1::default_delete<md::MapDataAccess>> _field20;
    struct unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext>> _field21;
    struct shared_ptr<gdc::Camera> _field22;
    struct _retain_ptr<VKCameraDelegateMediator *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field23;
    struct unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager>> _field24;
    struct unique_ptr<md::MapEngineSettings, std::__1::default_delete<md::MapEngineSettings>> _field25;
    struct unique_ptr<gdc::LoadingStatusTracker, std::__1::default_delete<gdc::LoadingStatusTracker>> _field26;
    struct shared_ptr<gdc::Statistics> _field27;
    BOOL _field28;
    BOOL _field29;
    BOOL _field30;
    struct atomic<bool> _field31;
    struct atomic<bool> _field32;
    BOOL _field33;
    struct unique_ptr<md::MapEngineConfiguration, std::__1::default_delete<md::MapEngineConfiguration>> _field34;
    struct unique_ptr<md::MapEngineMode, std::__1::default_delete<md::MapEngineMode>> _field35;
    struct _retain_ptr<VKManifestTileGroupObserverProxy *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field36;
    unsigned long long _field37;
    unsigned long long _field38;
    struct shared_ptr<std::__1::atomic<unsigned long>> _field39;
};

struct MapEngineConfiguration;

struct MapEngineMode;

struct MapEngineSettings {
    struct linear_map<md::MapEngineSetting, long long, std::__1::equal_to<md::MapEngineSetting>, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>, std::__1::vector<std::__1::pair<md::MapEngineSetting, long long>, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>>> _field1;
    struct set<md::MapEngineSetting, std::__1::less<md::MapEngineSetting>, std::__1::allocator<md::MapEngineSetting>> _field2;
    struct RunLoopController *_field3;
};

struct MapNavLabeler;

struct Matrix<double, 2, 1> {
    double _e[2];
};

struct Matrix<double, 3, 1> {
    double _e[3];
};

struct Matrix<double, 4, 1> {
    double _e[4];
};

struct Matrix<double, 4, 4> {
    double _e[16];
};

struct Matrix<float, 2, 1> {
    float _e[2];
};

struct Matrix<float, 3, 1> {
    float _e[3];
};

struct Matrix<float, 4, 1> {
    float _field1[4];
};

struct Matrix<int, 2, 1> {
    int _e[2];
};

struct Matrix<unsigned char, 4, 1> {
    unsigned char _e[4];
};

struct Matrix<unsigned int, 2, 1> {
    unsigned int _field1[2];
};

struct Mercator2<double> {
    double _e[2];
};

struct Mercator3<double> {
    double _e[3];
};

struct MercatorCameraContext {
    struct SingleCameraContext *_field1;
    struct CGSize _field2;
    double _field3;
    Matrix_08d701e4 _field4;
    Box_3d7e3c2c _field5;
    struct ConvexHull2<double> _field6;
    BOOL _field7;
    double _field8;
    double _field9;
    double _field10;
    Matrix_6e1d3589 _field11;
    Matrix_6e1d3589 _field12;
    double _field13;
    double _field14;
    BOOL _field15;
};

struct MercatorTerrainHeightCache;

struct MercatorTile {
    unsigned char _level;
    int _latIdx;
    int _lonIdx;
};

struct MeshMesh;

struct MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_4080291d _meshes;
    struct DataWrite<ggl::BuildingFlatStroke::DefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_74364602 _meshes;
    struct DataWrite<ggl::PolygonBase::CompressedVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_d473a3e0 _meshes;
    struct DataWrite<ggl::PolygonCommonStroke::DefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_8c4a3c5e _meshes;
    struct DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_5b05785e _meshes;
    struct DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_da5ada59 _meshes;
    struct DataWrite<ggl::VenueWall::EndCapVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_e4fc2931 _meshes;
    struct DataWrite<ggl::VenueWall::DefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshVendor<ggl::BuildingFacade::BuildingMesh> {
    struct vector<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>>, geo::StdAllocator<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>>, ggl::Allocator>> _field1;
};

struct MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> {
    struct vector<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>>, geo::StdAllocator<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>>, ggl::Allocator>> _field1;
};

struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> {
    struct vector<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>>, geo::StdAllocator<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>>, ggl::Allocator>> _field1;
};

struct MetalDevice;

struct MultiRange<unsigned long> {
    struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long>>> _field1;
};

struct MultiRectRegion {
    struct set<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2>>> _rects;
};

struct MuninDebugViewContext {
    struct vector<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState>, std::__1::allocator<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState>>> _field1;
    BOOL _field2;
    struct Stopwatch _field3;
};

struct MuninDisplayAnalytic;

struct MuninIntersector;

struct MuninJunction {
    CDUnknownFunctionPointerType *_field1;
    CDStruct_183601bc *_field2;
    Mercator2_57ec32b6 _field3;
    Matrix_8746f91e _field4;
    struct vector<const md::MuninRoadEdge *, std::__1::allocator<const md::MuninRoadEdge *>> _field5;
    int _field6;
    unsigned char _field7;
    unsigned char _field8;
};

struct MuninMetadataContainer;

struct MuninNavigation;

struct MuninRoadEdge {
    CDStruct_183601bc *_field1;
    float _field2;
    struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> _field3;
    Box_3d7e3c2c _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    struct MuninJunction *_field7;
    struct MuninJunction *_field8;
    BOOL _field9;
};

struct MuninSceneEvent;

struct MuninSceneLogic {
    CDUnknownFunctionPointerType *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    BOOL _field4;
    shared_ptr_e963992e _field5;
    struct AnimationRunner *_field6;
    struct World *_field7;
    struct LoadingStatusTracker *_field8;
    struct RunLoopController *_field9;
    struct unique_ptr<md::mun::MuninMetadataContainer, std::__1::default_delete<md::mun::MuninMetadataContainer>> _field10;
    struct vector<md::mun::ViewId, std::__1::allocator<md::mun::ViewId>> _field11;
    unordered_set_bb7a56cc _field12;
    struct linear_map<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>>, std::__1::vector<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>>>> _field13;
    BOOL _field14;
    struct MuninDebugViewContext _field15;
    struct unique_ptr<md::mun::MuninDisplayAnalytic, std::__1::default_delete<md::mun::MuninDisplayAnalytic>> _field16;
    struct unique_ptr<md::mun::MuninNavigation, std::__1::default_delete<md::mun::MuninNavigation>> _field17;
    struct unique_ptr<md::mun::MuninIntersector, std::__1::default_delete<md::mun::MuninIntersector>> _field18;
    struct unique_ptr<md::FadeEffectBlock, std::__1::default_delete<md::FadeEffectBlock>> _field19;
    struct unique_ptr<md::FadeEffectBlock, std::__1::default_delete<md::FadeEffectBlock>> _field20;
    struct vector<md::MuninSceneEvent, std::__1::allocator<md::MuninSceneEvent>> _field21;
    optional_44235073 _field22;
    optional_44235073 _field23;
    optional_44235073 _field24;
    optional_44235073 _field25;
    struct MuninSettings _field26;
    struct vector<unsigned short, std::__1::allocator<unsigned short>> _field27;
    BOOL _field28;
    BOOL _field29;
    unsigned long long _field30;
    struct shared_ptr<md::MuninSceneLogic::ValidState> _field31;
    struct mutex _field32;
    struct once_flag _field33;
    shared_ptr_479d1306 _field34;
    shared_ptr_479d1306 _field35;
};

struct MuninSettings {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    unsigned char _field12;
    unsigned short _field13;
    int _field14;
    unsigned char _field15;
    unsigned char _field16;
    Unit_3d259e8a _field17;
    Unit_3d259e8a _field18;
    Unit_3d259e8a _field19;
    Unit_3d259e8a _field20;
    Unit_3d259e8a _field21;
    Unit_3d259e8a _field22;
    Unit_3d259e8a _field23;
    double _field24;
    double _field25;
    double _field26;
    double _field27;
};

struct Mutex {
    void *mMutex;
};

struct NavContext {
    CDUnknownFunctionPointerType *_field1;
    struct LabelManager *_field2;
    struct MapNavLabeler *_field3;
    struct LabelLayoutContext *_field4;
    struct LabelNavLayoutContext *_field5;
};

struct NavCurrentRoadSign {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> _field2;
    struct shared_ptr<md::LabelStyle> _field3;
    shared_ptr_c5d816ee _field4;
    CDStruct_b2fbf00d _field5;
    struct unique_ptr<md::NavLabelPart, std::__1::default_delete<md::NavLabelPart>> _field6;
    Mercator2_57ec32b6 _field7;
    shared_ptr_2fc78ff4 _field8;
    Matrix_8746f91e _field9;
    Matrix_8746f91e _field10;
    Box_8bd38d92 _field11;
    BOOL _field12;
    BOOL _field13;
    BOOL _field14;
    float _field15;
    BOOL _field16;
    BOOL _field17;
    BOOL _field18;
    float _field19;
    float _field20;
};

struct NavLabel;

struct NavLabelPart;

struct NavigationPuck {
    struct PuckStyleInfo *_field1;
    Coordinate3D_bc242218 _field2;
    Unit_3d259e8a _field3;
    float _field4;
    float _field5;
    int _field6;
    BOOL _field7;
    BOOL _field8;
    BOOL _field9;
};

struct Node;

struct NodePool {
    struct stack<geo::Triangulator<float, unsigned short>::Node *, std::__1::vector<geo::Triangulator<float, unsigned short>::Node *, std::__1::allocator<geo::Triangulator<float, unsigned short>::Node *>>> _field1;
};

struct OESContext;

struct OESDevice;

struct ObjectTreeLoader;

struct OverlayContainer;

struct PackInfo;

struct Pass;

struct PassDescriptor {
    struct AttachmentActions _field1[4];
    struct AttachmentActions _field2;
    struct AttachmentActions _field3;
};

struct PassList;

struct PathAnimationDescription {
    vector_e91c9c3b _field1;
    Geocentric_d8fde6f2 _field2;
    RigidTransform_b9386d13 _field3;
    BOOL _field4;
    int _field5;
    shared_ptr_781019ee _field6;
    unsigned long long _field7;
};

struct PathAnimator;

struct PendingPathAnimation;

struct PerspectiveView<double> {
    RigidTransform_b9386d13 _transform;
    Matrix_08d701e4 _projectionMatrix;
    Matrix_08d701e4 _inverseProjection;
    Matrix_08d701e4 _matrix;
    double _ndcZNear;
    double _aspectRatio;
    struct ViewSize _size;
    int _type;
    Unit_3d259e8a _verticalFOV;
    double _near;
    double _far;
};

struct PhotoInfo;

struct PipelineState;

struct Plane3<double> {
    Matrix_6e1d3589 _field1;
    double _field2;
};

struct PointSegment {
    struct PointView _startPoint;
    struct PointView _endPoint;
};

struct PointView {
    struct CollectionPoint _point;
    struct vector<std::__1::pair<md::mun::ViewId, unsigned int>, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int>>> _requiredViews;
    struct vector<std::__1::pair<md::mun::ViewId, unsigned int>, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int>>> _optionalViews;
    struct small_vector<md::mun::PointView::CameraLod, 6> _cameras;
};

struct Polygon2<double> {
    vector_554e3200 _field1;
};

struct PolygonRouteAttributes {
    unsigned int routeSignificance;
    unsigned char routeProximity;
    BOOL hasRouteSignificance;
};

struct PolygonSection {
    Matrix_8746f91e *_field1;
    Matrix_8746f91e *_field2;
    Matrix_8746f91e *_field3;
    BOOL *_field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _field8;
    float _field9;
};

struct PolylineCoordinate {
    unsigned int index;
    float offset;
};

struct PolylineGroupChangeObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct PolylineOverlayStyle;

struct Pos2UVMesh;

struct ProtocolLoader;

struct PuckStyleInfo;

struct Quaternion<double> {
    Matrix_6e1d3589 _imaginary;
    double _scalar;
};

struct Quaternion<float> {
    Matrix_811b2232 _imaginary;
    float _scalar;
};

struct QuickSurfaceManager;

struct Range<double> {
    double _field1;
    double _field2;
};

struct Range<float> {
    float _field1;
    float _field2;
};

struct Range<signed char> {
    char _min;
    char _max;
};

struct Range<unsigned int>;

struct Range<unsigned long> {
    unsigned long long _min;
    unsigned long long _max;
};

struct Ray<double, 3> {
    Matrix_6e1d3589 _field1;
    Matrix_6e1d3589 _field2;
};

struct ReachabilityChangedObserver;

struct RealisticCommandBufferSelector;

struct RealisticRenderer {
    CDUnknownFunctionPointerType *_field1;
    shared_ptr_e963992e _field2;
    struct unique_ptr<md::PassList, std::__1::default_delete<md::PassList>> _field3;
    struct unique_ptr<md::FrameGraphResourceRegistry, std::__1::default_delete<md::FrameGraphResourceRegistry>> _field4;
    struct vector<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>, std::__1::allocator<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>>> _field5;
    struct linear_map<md::CommandBufferLocation, md::RenderLayer *, std::__1::equal_to<md::CommandBufferLocation>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>>, std::__1::vector<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>>>> _field6;
    struct RunLoopController *_field7;
    struct MapEngine *_field8;
    id _field9;
    struct Device *_field10;
    struct RealisticCommandBufferSelector *_field11;
    struct GlobeView *_field12;
    struct Context *_field13;
    struct StencilManager *_field14;
    struct GlobeDispatch *_field15;
    struct CullingNode *_field16;
    struct GlobeTileRenderManager *_field17;
    struct TexturePager *_field18;
    struct shared_ptr<md::GlobeOverlayContainer> _field19;
    struct shared_ptr<ggl::FlyoverLibrary> _field20;
    id _field21;
};

struct RelocateItem;

struct RenderBuffer;

struct RenderItem;

struct RenderQueue {
    struct PassDescriptor _field1;
    struct vector<ggl::RenderQueue::Pass, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator>> _field2;
    struct vector<ggl::CommandBuffer *, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator>> _field3;
    struct shared_ptr<ggl::RenderTransaction> _field4;
    struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator>> _field5;
    struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator>> _field6;
    struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator>> _field7;
    BOOL _field8;
    basic_string_23d93216 _field9;
};

struct RenderResource;

struct RenderResourceFences;

struct RenderState;

struct RenderTarget {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    CDUnknownFunctionPointerType *_field4;
    char *_field5;
    struct RenderTargetFormat _field6;
    struct Texture *_field7[4];
    struct Texture *_field8[4];
    struct Texture *_field9;
    BOOL _field10;
};

struct RenderTargetFormat {
    int colorFormats[4];
    unsigned long long colorFormatsCount;
    unsigned int samples;
    int depthStencilFormat;
};

struct RenderTransaction;

struct RenderableGroup;

struct ResourceAccessor {
    CDUnknownFunctionPointerType *_field1;
};

struct ResourceManager;

struct ResourceProvider;

struct RigidTransform<double, double> {
    Matrix_6e1d3589 _translation;
    Quaternion_febf9140 _rotation;
};

struct RigidTransform<double, float> {
    Matrix_6e1d3589 _translation;
    struct Quaternion<float> _rotation;
};

struct RoadSignArtworkGenerator;

struct RoadSignColoring {
    BOOL _hasFillColor;
    BOOL _hasGradientFillColors;
    BOOL _hasGradientFillAngle;
    BOOL _hasStrokeColor;
    BOOL _hasInnerStrokeColor;
    BOOL _hasShadowColor;
    BOOL _hasTextColor;
    BOOL _hasSecondaryTextColor;
    struct Color<double, 4, geo::ColorSpace::Linear> _fillColor;
    struct array<geo::Color<double, 4, geo::ColorSpace::Linear>, 2> _gradientFillColors;
    struct Color<double, 4, geo::ColorSpace::Linear> _strokeColor;
    struct Color<double, 4, geo::ColorSpace::Linear> _innerStrokeColor;
    struct Color<double, 4, geo::ColorSpace::Linear> _shadowColor;
    struct Color<double, 4, geo::ColorSpace::Linear> _textColor;
    struct Color<double, 4, geo::ColorSpace::Linear> _secondaryTextColor;
    double _gradientFillAngle;
};

struct RoadSignGeneratedMetrics {
    struct RoadSignPartMetrics _leftRoadSignPartMetrics;
    struct RoadSignPartMetrics _rightRoadSignPartMetrics;
    struct RoadSignPartMetrics _stretchedRoadSignPartMetrics;
    struct RoadSignPartMetrics _middleRoadSignPartMetrics;
    BOOL _hasMiddleSignPart;
    struct CGSize _imageSize;
    struct CGRect _signBaseRect;
    struct CGRect _glyphRect;
    double _stretchedRoadSignPartWidth;
    struct CGPoint _arrowTipPosition;
    struct CGPoint _arrowAnchorPosition;
    struct CGPoint _textPosition;
    struct CGRect _textBounds;
    struct CGRect _leftPartRect;
    struct CGRect _rightPartRect;
    struct CGRect _stretchedPartRect;
    struct CGRect _middlePartRect;
    struct CGRect _middleLeftStretchedPartRect;
    struct CGRect _middleRightStretchedPartRect;
};

struct RoadSignMetrics {
    unsigned char _orientation;
    double _scale;
    double _contentScale;
    double _arrowWeight;
    double _arrowLength;
    double _arrowTipCornerRadius;
    double _arrowJoinCornerRadius;
    struct CGSize _shadowOffset;
    double _shadowRadius;
    double _strokeWeight;
    double _innerStrokeWeight;
    double _signHeight;
    double _signMargin;
    double _horizontalMargin;
    double _verticalMargin;
    double _cornerRadius;
    struct CGSize _glyphSize;
    double _glyphVerticalOffset;
};

struct RoadSignOrientationResolver {
    struct range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float>>, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>>> *_field1;
    struct Unit<RadianUnitDescription, float> _field2;
    struct Unit<RadianUnitDescription, float> _field3;
    unsigned char _field4;
};

struct RoadSignPartMetrics {
    unsigned char _type;
    struct CGSize _imageSize;
    struct CGRect _signBaseRect;
    double _topEmptySpaceHeight;
    double _bottomEmptySpaceHeight;
    double _leftEmptySpaceWidth;
    double _rightEmptySpaceWidth;
    double _outsideImagePathExtension;
    BOOL _hasArrows;
    struct CGPoint _arrowWingMin;
    struct CGPoint _arrowWingMax;
    struct CGPoint _arrowTip;
    struct CGPoint _arrowAnchor;
};

struct RoadSignStyleGroup {
    shared_ptr_c5d816ee _field1;
    shared_ptr_c5d816ee _field2;
    shared_ptr_c5d816ee _field3;
};

struct RoadSignTextMetrics {
    double _scale;
    double _contentScale;
    double _horizontalMargin;
    double _verticalMargin;
    double _verticalOffset;
    double _textSize;
    double _secondaryTextSize;
    struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> _fontFamily;
    struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> _secondaryFontFamily;
    double _textDrawWidth;
    double _textWrapWidth;
    unsigned char _maxLineCount;
};

struct RouteContextChangeObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct RouteDataMapping;

struct RouteJunctionInfo;

struct RouteLineManager;

struct RouteModelPipelineStates {
    struct shared_ptr<ggl::PipelineState> _field1;
    struct shared_ptr<ggl::PipelineState> _field2;
    struct shared_ptr<ggl::PipelineState> _field3;
    struct shared_ptr<ggl::PipelineState> _field4;
};

struct RouteModelRenderStates {
    struct RenderState *_field1;
    struct RenderState *_field2;
    struct RenderState *_field3;
    struct RenderState *_field4;
    struct RenderState *_field5;
};

struct RouteRenderLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::CommandBufferLocation, std::__1::allocator<md::CommandBufferLocation>> _field2;
    struct vector<md::CommandBufferLocation, std::__1::allocator<md::CommandBufferLocation>> _field3;
    BOOL _field4;
    unsigned char _field5;
    struct RealisticRenderer *_field6;
    BOOL _field7;
    BOOL _field8;
    BOOL _field9;
    struct RouteModelPipelineStates _field10;
    struct RouteModelRenderStates _field11;
    shared_ptr_a3c46825 _field12;
    struct unique_ptr<ggl::Drawable, std::__1::default_delete<ggl::Drawable>> _field13;
    struct shared_ptr<ggl::ConstantData> _field14;
    struct shared_ptr<ggl::ConstantData> _field15;
    shared_ptr_c5d816ee _field16;
    shared_ptr_c5d816ee _field17;
    shared_ptr_c5d816ee _field18;
    shared_ptr_479d1306 _field19;
    shared_ptr_479d1306 _field20;
    struct vector<md::realistic::RouteRenderLayer::RouteDataMapping, std::__1::allocator<md::realistic::RouteRenderLayer::RouteDataMapping>> _field21;
    struct unique_ptr<md::FlyoverRouteOverlayCache, std::__1::default_delete<md::FlyoverRouteOverlayCache>> _field22;
    struct CommandBufferLocation _field23;
};

struct RouteSegment;

struct RunLoop;

struct RunLoopController {
    struct MapEngine *_field1;
    long long _field2;
    long long _field3;
};

struct SamplerState;

struct SceneContext {
    CDUnknownFunctionPointerType *_field1;
    struct unordered_map<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<std::__1::pair<const gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>>> _field2;
    struct linear_map<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>>, std::__1::vector<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>>>> _field3;
    struct linear_map<md::TileSelectionTileSetType, md::SceneTileSet, std::__1::equal_to<md::TileSelectionTileSetType>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>>, std::__1::vector<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>>>> _field4;
    struct linear_map<md::TileSelectionTileSetType, md::SceneTileSet, std::__1::equal_to<md::TileSelectionTileSetType>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>>, std::__1::vector<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>>>> _field5;
    struct linear_map<md::TileSelectionTileSetType, md::SceneTileSet, std::__1::equal_to<md::TileSelectionTileSetType>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>>, std::__1::vector<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>>>> _field6;
    struct linear_set<md::TileSelectionTileSetType, std::__1::less<md::TileSelectionTileSetType>, std::__1::allocator<md::TileSelectionTileSetType>, std::__1::vector<md::TileSelectionTileSetType, std::__1::allocator<md::TileSelectionTileSetType>>> _field7;
    struct vector<md::TileExclusionArea, std::__1::allocator<md::TileExclusionArea>> _field8;
    BOOL _field9;
};

struct ShaderEntry;

struct ShaderLibraryData;

struct ShaderLibraryDescriptor;

struct SharedDeviceResources;

struct SharedItemManager<altitude::Map, altitude::MapRequestId>;

struct SimpleTileKey;

struct SingleCameraContext {
    struct CameraView _field1;
    struct CGSize _field2;
    double _field3;
    struct MercatorCameraContext _field4;
    Matrix_6e1d3589 _field5;
    Matrix_6e1d3589 _field6;
    Matrix_6e1d3589 _field7;
    Matrix_08d701e4 _field8;
    View_a667aa2f _field9;
    double _field10;
    double _field11;
};

struct SnapshotRunLoop;

struct Spring<double, 1, gdc::SpringType::Angular> {
    double _position;
    double _velocity;
    double _restingPosition;
    double _kSpring;
    double _kDamper;
};

struct Spring<double, 1, gdc::SpringType::Linear> {
    double _position;
    double _velocity;
    double _restingPosition;
    double _kSpring;
    double _kDamper;
};

struct Spring<double, 2, gdc::SpringType::Linear> {
    Matrix_2bdd42a3 _position;
    Matrix_2bdd42a3 _velocity;
    Matrix_2bdd42a3 _restingPosition;
    double _kSpring;
    double _kDamper;
};

struct StandardCommandBufferSelector;

struct StandardLibrary {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    struct ShaderLibraryDescriptor *_field4;
    struct vector<ggl::ShaderLibrary::FunctionEntry, geo::StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator>> _field5;
    struct vector<ggl::ShaderLibrary::ShaderEntry, geo::StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator>> _field6;
    struct vector<ggl::ShaderLibrary::ComputeShaderEntry, geo::StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator>> _field7;
    struct vector<std::__1::shared_ptr<ggl::Shader>, geo::StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator>> _field8;
    struct shared_ptr<ggl::ShaderLibraryData> _field9;
};

struct Statistics;

struct StdAllocator<GEOFeatureStylePair, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<LabelNavJunctionInfo, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<RouteJunctionInfo, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<RouteSegment, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<char, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<ggl::CommandBuffer *, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::Texture *, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<gss::FeatureAttributePair, gss::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__1::__hash_node<unsigned long long, void *>, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*>*, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*>*, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::MercatorTile, md::LabelCustomFeatureProvider::TileInfo>, void *>, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, void *>, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, void *>, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, void *>, grl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>>, void *>, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, std::__1::basic_string<char>>, void *>, grl::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>>, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>>, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>>, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StencilManager {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    struct ClearItem _field4;
};

struct Stopwatch {
    struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>> _field1;
};

struct String {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> _field1;
};

struct StringWithLocale {
    struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> text;
    struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> locale;
};

struct StrokeBufferSizing {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
};

struct Style;

struct StyleQueryOverride {
    unsigned char _field1;
    unsigned char _field2;
};

struct StylesheetManager<gss::PropertyID>;

struct StylesheetManager<gss::ScenePropertyID>;

struct StylesheetQuery<gss::PropertyID>;

struct StylesheetVendor;

struct TapDescription {
    struct Intersection _field1;
    struct Ray<double, 3> _field2;
    struct CollectionPoint _field3;
    RigidTransform_b9386d13 _field4;
    unsigned long long _field5;
};

struct Task;

struct TaskContext {
    id _field1;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field2;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field3;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field4;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field5;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field6;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field7;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field8;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field9;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field10;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field11;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field12;
};

struct TaskQueue;

struct Texture {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    CDUnknownFunctionPointerType *_field4;
    char *_field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    unsigned int _field10;
    int _field11;
    unsigned int _field12;
    unsigned int _field13;
};

struct Texture2D {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    CDUnknownFunctionPointerType *_field4;
    char *_field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    unsigned int _field10;
    int _field11;
    unsigned int _field12;
    unsigned int _field13;
    struct shared_ptr<const ggl::Texture2DAbstract> _field14;
    unsigned int _field15;
    struct shared_ptr<const ggl::TextureDataAbstract> _field16;
    BOOL _field17;
    BOOL _field18;
    BOOL _field19;
    struct shared_ptr<ggl::SamplerState> _field20;
};

struct Texture2DAbstract;

struct Texture2DLoadItem;

struct TextureAtlas {
    struct vector<md::TextureAtlas::RelocateItem, std::__1::allocator<md::TextureAtlas::RelocateItem>> _field1;
    basic_string_23d93216 _field2;
    int _field3;
    struct Matrix<unsigned int, 2, 1> _field4;
    struct Matrix<unsigned int, 2, 1> _field5;
    struct Matrix<unsigned int, 2, 1> _field6;
    struct Matrix<unsigned int, 2, 1> _field7;
    unsigned char _field8;
    struct shared_ptr<ggl::SamplerState> _field9;
    BOOL _field10;
    BOOL _field11;
    unsigned int _field12;
    unsigned int _field13;
    struct unique_ptr<unsigned char [], std::__1::default_delete<unsigned char []>> _field14;
    struct read_write_lock _field15;
    struct atomic<bool> _field16;
    struct atomic<bool> _field17;
    struct optional<unsigned long> _field18;
    struct shared_ptr<std::__1::atomic<bool>> _field19;
    struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>> _field20;
    struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>> _field21;
    struct vector<ggl::Texture2D *, std::__1::allocator<ggl::Texture2D *>> _field22;
    struct mutex _field23;
    struct mutex _field24;
    struct vector<std::__1::shared_ptr<md::TextureAtlasRegion>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasRegion>>> _field25;
    struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem>> _field26;
    struct vector<std::__1::shared_ptr<md::TextureAtlasRegion>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasRegion>>> _field27;
    struct vector<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>>, std::__1::allocator<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>>>> _field28;
};

struct TextureAtlasRegion;

struct TextureDataAbstract;

struct TextureManager;

struct TextureMap;

struct TexturePager;

struct TileExclusionArea;

struct TileManager;

struct TileSetNode;

struct TrafficSegment {
    unsigned int _field1;
    unsigned char _field2;
};

struct TrafficSegmentsAlongRoute {
    struct vector<md::TrafficSegment, std::__1::allocator<md::TrafficSegment>> _field1;
};

struct Triangulator<float, unsigned short> {
    struct NodePool _field1;
    struct GeometricHasher _field2;
    unsigned long long _field3;
    int _field4;
};

struct Triangulator<float> {
    struct Triangulator<float, unsigned short> _field1;
    struct vector<unsigned short, std::__1::allocator<unsigned short>> _field2;
};

struct TriggerManager;

struct Unit<DegreeUnitDescription, double> {
    double _value;
};

struct Unit<MeterUnitDescription, double> {
    double _value;
};

struct Unit<RadianUnitDescription, double> {
    double _value;
};

struct Unit<RadianUnitDescription, float> {
    float _value;
};

struct UserViewNode;

struct VKCameraState {
    RigidTransform_b9386d13 _field1;
    double _field2;
    Unit_3d259e8a _field3;
    double _field4;
};

struct VKEdgeInsets {
    float top;
    float left;
    float bottom;
    float right;
};

struct VKFootprintConvexHull_struct {
    int edgeCount;
    Matrix_6e1d3589 edgeOrigin[6];
    Matrix_6e1d3589 edgeNormal[6];
};

struct VKGlobeRouteSplit {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct VKLabelNavArtworkCache {
    struct unique_ptr<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy>>> _field1;
    struct unique_ptr<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy>>> _field2;
    struct unique_ptr<md::RoadSignArtworkGenerator, std::__1::default_delete<md::RoadSignArtworkGenerator>> _field3;
    BOOL _field4;
    struct LabelImageLoader *_field5;
};

struct VKLabelNavRouteRoadEdge {
    struct PolylineCoordinate _field1;
    struct PolylineCoordinate _field2;
    CDStruct_183601bc *_field3;
};

struct ValidState;

struct ValueStruct {
    long long _field1;
    unsigned long long _field2;
    double _field3;
    BOOL _field4;
    basic_string_23d93216 _field5;
};

struct Venue {
    unsigned long long _field1;
    unsigned long long _field2;
    struct vector<md::VenueBuilding, std::__1::allocator<md::VenueBuilding>> _field3;
    struct Polygon2<double> _field4;
    struct ConvexHull2<double> _field5;
    Mercator2_57ec32b6 _field6;
    basic_string_23d93216 _field7;
    basic_string_23d93216 _field8;
    struct optional<std::__1::basic_string<char>> _field9;
    struct optional<std::__1::basic_string<char>> _field10;
};

struct VenueBuilding {
    struct vector<md::VenueLevel, std::__1::allocator<md::VenueLevel>> _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    short _field6;
    Matrix_2bdd42a3 _field7;
    struct ConvexHull2<double> _field8;
};

struct VenueBuildingFeatureMarker;

struct VenueFeatureMarker;

struct VenueLevel;

struct View;

struct View<double> {
    RigidTransform_b9386d13 _field1;
    Matrix_08d701e4 _field2;
    Matrix_08d701e4 _field3;
    Matrix_08d701e4 _field4;
    double _field5;
    double _field6;
    struct ViewSize _field7;
    int _field8;
};

struct ViewId;

struct ViewNode;

struct ViewSize {
    unsigned short width;
    unsigned short height;
};

struct ViewTransform {
    unsigned char _field1;
    struct CameraView _field2;
    Matrix_6e1d3589 _field3;
    Matrix_6e1d3589 _field4;
    Matrix_6e1d3589 _field5;
    float _field6;
    double _field7;
    Matrix_08d701e4 _field8;
    Matrix_08d701e4 _field9;
    BOOL _field10;
    Geocentric_d8fde6f2 _field11;
    Mercator3_d8bb135c _field12;
    double _field13;
    double _field14;
    double _field15;
};

struct Viewport {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
};

struct ViewportNode;

struct WindowedSampler<60> {
    double _min;
    double _max;
    double _avg;
    double _sum;
    struct optional<unsigned long> _idx;
    struct array<double, 60> _samples;
};

struct World;

struct YFlipPass;

struct _GEOFlyoverKey {
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :8;
    unsigned int :24;
    unsigned int :14;
    unsigned int :8;
    unsigned int :8;
};

struct _GEOGloriaQuadIDTileKey {
    unsigned int :6;
    unsigned int :64;
    unsigned int :14;
    unsigned int :36;
};

struct _GEOIdentifiedResourceKey {
    unsigned int _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned int :64;
    unsigned int :8;
};

struct _GEOMuninMeshKey {
    unsigned int :64;
    unsigned int :32;
    unsigned int :16;
    unsigned int :5;
    unsigned int :3;
};

struct _GEOPolygonSelectionKey {
    unsigned int :6;
    unsigned int :25;
    unsigned int :25;
    unsigned int :64;
};

struct _GEORegionalResourceKey {
    unsigned int :32;
    unsigned int :8;
    unsigned int :6;
    unsigned int :8;
    unsigned int :8;
    unsigned int :1;
    unsigned int :57;
};

struct _GEOSputnikMetadataKey {
    unsigned int :32;
    unsigned int :24;
    unsigned int :14;
    unsigned int :8;
    unsigned int :42;
};

struct _GEOStandardTileKey {
    unsigned int :40;
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :14;
    unsigned int :4;
    unsigned int :4;
};

struct _GEOTileKey {
    unsigned int :7;
    unsigned int :1;
    union {
        struct _GEOStandardTileKey _field1;
        struct _GEOGloriaQuadIDTileKey _field2;
        struct _GEORegionalResourceKey _field3;
        struct _GEOSputnikMetadataKey _field4;
        struct _GEOFlyoverKey _field5;
        struct _GEOTransitLineSelectionKey _field6;
        struct _GEOPolygonSelectionKey _field7;
        struct _GEOTileOverlayKey _field8;
        struct _GEOIdentifiedResourceKey _field9;
        struct _GEOMuninMeshKey _field10;
        struct _GEOVisualLocalizationTrackKey _field11;
        struct _GEOVisualLocalizationMetadataKey _field12;
        struct _GEOVisualLocalizationDataKey _field13;
    } _field1;
};

struct _GEOTileOverlayKey {
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :8;
    unsigned int :32;
    unsigned int :22;
};

struct _GEOTransitLineSelectionKey {
    unsigned int :6;
    unsigned int :25;
    unsigned int :25;
    unsigned int :64;
};

struct _GEOVisualLocalizationDataKey {
    unsigned long long _field1;
    unsigned char _field2;
    unsigned int :5;
    unsigned int :21;
    unsigned int :21;
    unsigned int :1;
};

struct _GEOVisualLocalizationMetadataKey {
    unsigned int :6;
    unsigned int :9;
    unsigned int :25;
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :22;
};

struct _GEOVisualLocalizationTrackKey {
    unsigned short _field1;
    unsigned char _field2;
    unsigned int :16;
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :22;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _RunLoopCallbacker;

struct __compressed_pair<float, std::__1::equal_to<unsigned long long>> {
    float __value_;
};

struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
    struct __rep __value_;
};

struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long>> {
    unsigned long long __value_;
};

struct __hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> *__next_;
};

struct __rep {
    union {
        struct __long {
            unsigned long long __cap_;
            unsigned long long __size_;
            char *__data_;
        } __l;
        struct __short {
            union {
                unsigned char __size_;
                char __lx;
            } ;
            char __data_[23];
        } __s;
        struct __raw {
            unsigned long long __words[3];
        } __r;
    } ;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct _release_objc;

struct _retain_objc;

struct _retain_ptr<CGColor *, geo::_retain_cf<CGColor *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    struct CGColor *_obj;
    struct _retain_cf<CGColor *> _retain;
    struct _release_cf _release;
};

struct _retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKCamera *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct _retain_ptr<VKLabelNavRoadLabel *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct _retain_objc _field3;
    struct _release_objc _field4;
};

struct _retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

struct _retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKPolylineOverlay *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct _retain_ptr<VKResourceManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKResourceManager *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKRouteContext *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct _retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKTimedAnimation *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct _retain_ptr<id<VKCustomFeatureAnnotation>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct _retain_objc _field3;
    struct _release_objc _field4;
};

struct _retain_ptr<id<VKCustomFeatureDataSource>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    id _obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct array<double, 60> {
    double __elems_[60];
};

struct array<geo::Color<double, 4, geo::ColorSpace::Linear>, 2> {
    struct Color<double, 4, geo::ColorSpace::Linear> __elems_[2];
};

struct array<gm::Matrix<double, 2, 1>, 2> {
    Matrix_2bdd42a3 _field1[2];
};

struct array<gm::Matrix<double, 3, 1>, 8> {
    Matrix_6e1d3589 _field1[8];
};

struct array<gm::Plane3<double>, 6> {
    struct Plane3<double> _field1[6];
};

struct array<std::__1::unordered_set<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>, 2> {
    struct unordered_set<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> _field1[2];
};

struct atomic<altitude::TextureMap *> {
    struct __cxx_atomic_impl<altitude::TextureMap *, std::__1::__cxx_atomic_base_impl<altitude::TextureMap *>> {
        _Atomic struct TextureMap *_field1;
    } _field1;
};

struct atomic<bool> {
    struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool>> {
        _Atomic BOOL __a_value;
    } __a_;
};

struct atomic<ggl::Texture2D *> {
    struct __cxx_atomic_impl<ggl::Texture2D *, std::__1::__cxx_atomic_base_impl<ggl::Texture2D *>> {
        _Atomic struct Texture2D *_field1;
    } _field1;
};

struct atomic<unsigned long>;

struct basic_ostream<char, std::__1::char_traits<char>> {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    unsigned int _field3;
    long long _field4;
    long long _field5;
    unsigned int _field6;
    unsigned int _field7;
    void *_field8;
    void *_field9;
    CDUnknownFunctionPointerType *_field10;
    int *_field11;
    unsigned long long _field12;
    unsigned long long _field13;
    long long *_field14;
    unsigned long long _field15;
    unsigned long long _field16;
    void **_field17;
    unsigned long long _field18;
    unsigned long long _field19;
    basic_ostream_374c280d *_field20;
    int _field21;
};

struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>::__rep, geo::StdAllocator<char, mdm::Allocator>> {
        struct __rep __value_;
        struct StdAllocator<char, mdm::Allocator> __value_;
    } __r_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> __r_;
};

struct bitset<4> {
    unsigned long long __first_;
};

struct deque<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()>>> {
    struct __split_buffer<std::__1::function<void ()>*, std::__1::allocator<std::__1::function<void ()>*>> {
        function_d3afe2e2 **__first_;
        function_d3afe2e2 **__begin_;
        function_d3afe2e2 **__end_;
        struct __compressed_pair<std::__1::function<void ()>**, std::__1::allocator<std::__1::function<void ()>*>> {
            function_d3afe2e2 **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::function<void ()>>> {
        unsigned long long __value_;
    } __size_;
};

struct duration<long long, std::__1::ratio<1, 1000000000>> {
    long long _field1;
};

struct fast_shared_ptr<md::RouteLineSection, std::allocator> {
    struct _fast_shared_ptr_control *_control;
};

struct function<NSString *()> {
    struct __value_func<NSString *()> {
        struct type __buf_;
        struct __base<NSString *()> *__f_;
    } __f_;
};

struct function<altitude::TextureMap *()> {
    struct __value_func<altitude::TextureMap *()> {
        struct type _field1;
        struct __base<altitude::TextureMap *()> *_field2;
    } _field1;
};

struct function<bool (unsigned long long)> {
    struct __value_func<bool (unsigned long long)> {
        struct type _field1;
        struct __base<bool (unsigned long long)> *_field2;
    } _field1;
};

struct function<ggl::Texture2D *()> {
    struct __value_func<ggl::Texture2D *()> {
        struct type _field1;
        struct __base<ggl::Texture2D *()> *_field2;
    } _field1;
};

struct function<void ()> {
    struct __value_func<void ()> {
        struct type __buf_;
        struct __base<void ()> *__f_;
    } __f_;
};

struct function<void (GEOExperimentConfiguration *)> {
    struct __value_func<void (GEOExperimentConfiguration *)> {
        struct type __buf_;
        struct __base<void (GEOExperimentConfiguration *)> *__f_;
    } __f_;
};

struct function<void (GEOResourceManifestManager *)> {
    struct __value_func<void (GEOResourceManifestManager *)> {
        struct type __buf_;
        struct __base<void (GEOResourceManifestManager *)> *__f_;
    } __f_;
};

struct function<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> {
    struct __value_func<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> {
        struct type __buf_;
        struct __base<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> *__f_;
    } __f_;
};

struct function<void (NSError *)> {
    struct __value_func<void (NSError *)> {
        struct type _field1;
        struct __base<void (NSError *)> *_field2;
    } _field1;
};

struct function<void (gdc::SceneStatus)> {
    struct __value_func<void (gdc::SceneStatus)> {
        struct type _field1;
        struct __base<void (gdc::SceneStatus)> *_field2;
    } _field1;
};

struct linear_map<md::CommandBufferLocation, md::RenderLayer *, std::__1::equal_to<md::CommandBufferLocation>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>>, std::__1::vector<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>>>> {
    struct vector<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>>> _field1;
};

struct linear_map<md::MapEngineSetting, long long, std::__1::equal_to<md::MapEngineSetting>, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>, std::__1::vector<std::__1::pair<md::MapEngineSetting, long long>, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>>> {
    struct vector<std::__1::pair<md::MapEngineSetting, long long>, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>> _field1;
};

struct linear_map<md::TileSelectionTileSetType, md::SceneTileSet, std::__1::equal_to<md::TileSelectionTileSetType>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>>, std::__1::vector<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>>>> {
    struct vector<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>>> _field1;
};

struct linear_map<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>, std::__1::equal_to<std::__1::bitset<2>>, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>>, std::__1::vector<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>>>> {
    struct vector<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>>> _field1;
};

struct linear_map<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>>, std::__1::vector<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>>>> {
    struct vector<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>>> _field1;
};

struct linear_map<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>>, std::__1::vector<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>>>> {
    struct vector<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>>> _field1;
};

struct linear_set<md::TileSelectionTileSetType, std::__1::less<md::TileSelectionTileSetType>, std::__1::allocator<md::TileSelectionTileSetType>, std::__1::vector<md::TileSelectionTileSetType, std::__1::allocator<md::TileSelectionTileSetType>>> {
    struct vector<md::TileSelectionTileSetType, std::__1::allocator<md::TileSelectionTileSetType>> _field1;
};

struct map<geo::MercatorTile, md::LabelCustomFeatureProvider::TileInfo, md::LabelCustomFeatureProvider::TileKeyLess, geo::StdAllocator<std::__1::pair<const geo::MercatorTile, md::LabelCustomFeatureProvider::TileInfo>, mdm::Allocator>> {
    struct __tree<std::__1::__value_type<geo::MercatorTile, md::LabelCustomFeatureProvider::TileInfo>, std::__1::__map_value_compare<geo::MercatorTile, std::__1::__value_type<geo::MercatorTile, md::LabelCustomFeatureProvider::TileInfo>, md::LabelCustomFeatureProvider::TileKeyLess, true>, geo::StdAllocator<std::__1::__value_type<geo::MercatorTile, md::LabelCustomFeatureProvider::TileInfo>, mdm::Allocator>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::MercatorTile, md::LabelCustomFeatureProvider::TileInfo>, void *>, mdm::Allocator>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
            struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::MercatorTile, md::LabelCustomFeatureProvider::TileInfo>, void *>, mdm::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<geo::MercatorTile, std::__1::__value_type<geo::MercatorTile, md::LabelCustomFeatureProvider::TileInfo>, md::LabelCustomFeatureProvider::TileKeyLess, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>, NSStringMapComparison, geo::StdAllocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, mdm::Allocator>> {
    struct __tree<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, NSStringMapComparison, true>, geo::StdAllocator<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, mdm::Allocator>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, void *>, mdm::Allocator>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
            struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, void *>, mdm::Allocator> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, NSStringMapComparison, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData>>>> {
    struct __tree<std::__1::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::__map_value_compare<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::less<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>, std::__1::allocator<std::__1::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::less<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double>>, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double>>>>> {
    struct __tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double>>>, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double>>>, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double>>>, altitude::GlobeView::LessVector2i, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction, geo::range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float>>, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>>>::RangeCompare, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>>> {
    struct __tree<std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>, std::__1::__map_value_compare<gm::Range<geo::Unit<RadianUnitDescription, float>>, std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>, geo::range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float>>, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>>>::RangeCompare, true>, std::__1::allocator<std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Range<geo::Unit<RadianUnitDescription, float>>, std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>, geo::range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float>>, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>>>::RangeCompare, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>, std::__1::less<grl::ResourceProvider::ResourceCacheKey>, std::__1::allocator<std::__1::pair<const grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>>> {
    struct __tree<std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>, std::__1::__map_value_compare<grl::ResourceProvider::ResourceCacheKey, std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>, std::__1::less<grl::ResourceProvider::ResourceCacheKey>, true>, std::__1::allocator<std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<grl::ResourceProvider::ResourceCacheKey, std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>, std::__1::less<grl::ResourceProvider::ResourceCacheKey>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo, std::__1::less<id<VKCustomFeatureAnnotation>>, geo::StdAllocator<std::__1::pair<const id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, mdm::Allocator>> {
    struct __tree<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::__map_value_compare<id<VKCustomFeatureAnnotation>, std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::less<id<VKCustomFeatureAnnotation>>, true>, geo::StdAllocator<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, mdm::Allocator>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, void *>, mdm::Allocator>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
            struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, void *>, mdm::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureAnnotation>, std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::less<id<VKCustomFeatureAnnotation>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<md::Anchor *, float, std::__1::less<md::Anchor *>, std::__1::allocator<std::__1::pair<md::Anchor *const, float>>> {
    struct __tree<std::__1::__value_type<md::Anchor *, float>, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true>, std::__1::allocator<std::__1::__value_type<md::Anchor *, float>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::Anchor *, float>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock, std::__1::less<std::__1::pair<std::__1::basic_string<char>, float>>, geo::StdAllocator<std::__1::pair<const std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, grl::Allocator>> {
    struct __tree<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, float>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, std::__1::less<std::__1::pair<std::__1::basic_string<char>, float>>, true>, geo::StdAllocator<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, grl::Allocator>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, void *>, grl::Allocator>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
            struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, void *>, grl::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, float>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, std::__1::less<std::__1::pair<std::__1::basic_string<char>, float>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>, md::LabelExternalRoadFeatureLess, geo::StdAllocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>>, mdm::Allocator>> {
    struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>>, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>>, md::LabelExternalRoadFeatureLess, true>, geo::StdAllocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>>, mdm::Allocator>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>>, void *>, mdm::Allocator>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
            struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>>, void *>, mdm::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>>, md::LabelExternalRoadFeatureLess, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned short, std::__1::basic_string<char>, std::__1::less<unsigned short>, geo::StdAllocator<std::__1::pair<const unsigned short, std::__1::basic_string<char>>, grl::Allocator>> {
    struct __tree<std::__1::__value_type<unsigned short, std::__1::basic_string<char>>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, std::__1::basic_string<char>>, std::__1::less<unsigned short>, true>, geo::StdAllocator<std::__1::__value_type<unsigned short, std::__1::basic_string<char>>, grl::Allocator>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, std::__1::basic_string<char>>, void *>, grl::Allocator>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
            struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, std::__1::basic_string<char>>, void *>, grl::Allocator> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, std::__1::basic_string<char>>, std::__1::less<unsigned short>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct multimap<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>>, std::__1::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct once_flag {
    unsigned long long _field1;
};

struct optional<(anonymous namespace)::PointSegment> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[3984];
        struct PointSegment type;
    } _value;
};

struct optional<VKMapType> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[4];
        int type;
    } _value;
};

struct optional<double> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[8];
        double type;
    } _value;
};

struct optional<float> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[4];
        float type;
    } _value;
};

struct optional<gdc::DebugTreeNode> {
    BOOL _field1;
    union ValueUnion {
        unsigned char _field1[96];
        struct DebugTreeNode _field2;
    } _field2;
};

struct optional<gdc::DebugTreeProperty> {
    BOOL _field1;
    union ValueUnion {
        unsigned char _field1[80];
        struct DebugTreeProperty _field2;
    } _field2;
};

struct optional<gdc::DebugTreeValue> {
    BOOL _field1;
    union ValueUnion {
        unsigned char _field1[64];
        struct DebugTreeValue _field2;
    } _field2;
};

struct optional<gdc::SceneStatus> {
    BOOL _field1;
    union ValueUnion {
        unsigned char _field1[1];
        unsigned char _field2;
    } _field2;
};

struct optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[4];
        struct Color<unsigned char, 4, geo::ColorSpace::sRGB> type;
    } _value;
};

struct optional<gm::Matrix<double, 3, 1>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[24];
        Matrix_6e1d3589 type;
    } _value;
};

struct optional<gm::Matrix<float, 2, 1>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[8];
        Matrix_8746f91e type;
    } _value;
};

struct optional<gss::LineType> {
    BOOL _hasValue;
    ValueUnion_42b55164 _value;
};

struct optional<gss::RouteLegWhen> {
    BOOL _hasValue;
    ValueUnion_42b55164 _value;
};

struct optional<md::MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> type;
    } _value;
};

struct optional<md::RoadSignOrientationResolver> {
    BOOL _field1;
    union ValueUnion {
        unsigned char _field1[24];
        struct RoadSignOrientationResolver _field2;
    } _field2;
};

struct optional<md::mun::CollectionPoint> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[1864];
        struct CollectionPoint type;
    } _value;
};

struct optional<std::__1::basic_string<char>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[24];
        basic_string_23d93216 type;
    } _value;
};

struct optional<std::__1::vector<double, std::__1::allocator<double>>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[24];
        struct vector<double, std::__1::allocator<double>> type;
    } _value;
};

struct optional<unsigned long> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[8];
        unsigned long long type;
    } _value;
};

struct os_state_data_decoder_s {
    char _field1[64];
    char _field2[64];
};

struct os_state_data_s {
    unsigned int _field1;
    union {
        unsigned int :32;
        unsigned int _field1;
    } _field2;
    struct os_state_data_decoder_s _field3;
    char _field4[64];
    unsigned char _field5[0];
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>;

struct pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>;

struct pair<bool, GEOFeatureStylePair>;

struct pair<md::CommandBufferLocation, md::RenderLayer *>;

struct pair<md::MapEngineSetting, long long>;

struct pair<md::TileSelectionTileSetType, md::SceneTileSet>;

struct pair<md::mun::ViewId, unsigned int>;

struct pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>;

struct pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState>;

struct pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>;

struct pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>;

struct pair<unsigned short, unsigned int>;

struct pair<void *, unsigned long> {
    void *_field1;
    unsigned long long _field2;
};

struct range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float>>, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>>> {
    struct map<gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction, geo::range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float>>, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>>>::RangeCompare, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float>>, md::OrientationAction>>> _storage;
};

struct read_write_lock {
    struct _opaque_pthread_rwlock_t {
        long long __sig;
        char __opaque[192];
    } _lock;
};

struct set<VKPolylineGroupOverlay *, std::__1::less<VKPolylineGroupOverlay *>, std::__1::allocator<VKPolylineGroupOverlay *>> {
    struct __tree<VKPolylineGroupOverlay *, std::__1::less<VKPolylineGroupOverlay *>, std::__1::allocator<VKPolylineGroupOverlay *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<VKPolylineGroupOverlay *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<VKPolylineGroupOverlay *>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *>> {
    struct __tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2>>> {
    struct __tree<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<gm::Box<double, 2>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, md::MultiRectSetCompare> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay>>, std::__1::allocator<id<VKRouteOverlay>>> {
    struct __tree<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay>>, std::__1::allocator<id<VKRouteOverlay>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<id<VKRouteOverlay>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<id<VKRouteOverlay>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<md::MapEngineSetting, std::__1::less<md::MapEngineSetting>, std::__1::allocator<md::MapEngineSetting>> {
    struct __tree<md::MapEngineSetting, std::__1::less<md::MapEngineSetting>, std::__1::allocator<md::MapEngineSetting>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<md::MapEngineSetting, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<md::MapEngineSetting>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData>>, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData>>> {
    struct __tree<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData>>, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::RouteLineData>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::RouteLineData>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<(anonymous namespace)::PathAnimator> {
    struct PathAnimator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<altitude::AnchorManager> {
    struct AnchorManager *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<bool> {
    BOOL *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const ggl::Texture2DAbstract> {
    struct Texture2DAbstract *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<const ggl::TextureDataAbstract> {
    struct TextureDataAbstract *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<gdc::Camera> {
    struct Camera *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<gdc::Statistics> {
    struct Statistics *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<geo::Polygon2<double>> {
    struct Polygon2<double> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<geo::Task> {
    struct Task *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::BitmapDataBase> {
    struct BitmapDataBase *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>;

struct shared_ptr<ggl::CommonLibrary> {
    struct CommonLibrary *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::CommonMesh::Pos2UVMesh> {
    struct Pos2UVMesh *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::ConstantData> {
    struct ConstantData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::DebugRenderer>;

struct shared_ptr<ggl::Device> {
    struct Device *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::FlyoverLibrary> {
    struct FlyoverLibrary *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::MetalDevice> {
    struct MetalDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::OESDevice> {
    struct OESDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PipelineState> {
    struct PipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh>;

struct shared_ptr<ggl::PolygonBase::MeshMesh> {
    struct MeshMesh *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh>;

struct shared_ptr<ggl::RenderBuffer> {
    struct RenderBuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderState> {
    struct RenderState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::RenderTransaction> {
    struct RenderTransaction *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::SamplerState> {
    struct SamplerState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Shader>;

struct shared_ptr<ggl::ShaderLibraryData> {
    struct ShaderLibraryData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::StandardLibrary> {
    struct StandardLibrary *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Texture2D> {
    struct Texture2D *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Texture2DAbstract> {
    struct Texture2DAbstract *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Texture> {
    struct Texture *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>;

struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>;

struct shared_ptr<ggl::VenueWall::EndCapMesh>;

struct shared_ptr<ggl::VenueWall::MeshMesh>;

struct shared_ptr<grl::FontManager> {
    struct FontManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<grl::IconImage> {
    struct IconImage *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<grl::IconManager> {
    struct IconManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<grl::ResourceProvider> {
    struct ResourceProvider *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> {
    struct StylesheetManager<gss::PropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> {
    struct StylesheetManager<gss::ScenePropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gss::StylesheetQuery<gss::PropertyID>> {
    struct StylesheetQuery<gss::PropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<karo::SharedItemManager<altitude::Map, altitude::MapRequestId>> {
    struct SharedItemManager<altitude::Map, altitude::MapRequestId> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::Anchor> {
    struct Anchor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::CircleOverlayRenderable::Style> {
    struct Style *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::CircleOverlayRenderable> {
    struct CircleOverlayRenderable *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::DataOverrideManager> {
    struct DataOverrideManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::FeatureMarker> {
    struct FeatureMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::GeoResourceProvider> {
    struct GeoResourceProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::GlobeAdapterData> {
    struct GlobeAdapterData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelClusterTree> {
    struct LabelClusterTree *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelExternalPointFeature> {
    struct LabelExternalPointFeature *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelExternalRoadFeature>;

struct shared_ptr<md::LabelFeature>;

struct shared_ptr<md::LabelImageKey> {
    struct LabelImageKey *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelManager> {
    struct LabelManager *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelMarker> {
    struct LabelMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelScene> {
    struct LabelScene *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelStyle> {
    struct LabelStyle *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelTile> {
    struct LabelTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelTransitRoute> {
    struct LabelTransitRoute *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelTransitRouteLine> {
    struct LabelTransitRouteLine *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::MuninSceneLogic::ValidState> {
    struct ValidState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::NavCurrentRoadSign> {
    struct NavCurrentRoadSign *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::NavLabel> {
    struct NavLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::ObjectGroup>;

struct shared_ptr<md::OverlayContainer> {
    struct OverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::PolygonOverlayRenderable::Style> {
    struct Style *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::PolylineOverlayStyle> {
    struct PolylineOverlayStyle *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::RealisticCommandBufferSelector> {
    struct RealisticCommandBufferSelector *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::RunLoopController> {
    struct RunLoopController *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::StandardCommandBufferSelector> {
    struct StandardCommandBufferSelector *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::StylesheetVendor> {
    struct StylesheetVendor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TaskContext> {
    struct TaskContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TextureAtlasPage>;

struct shared_ptr<md::TextureAtlasRegion> {
    struct TextureAtlasRegion *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TextureManager> {
    struct TextureManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::VenueBuildingFeatureMarker> {
    struct VenueBuildingFeatureMarker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::VenueFeatureMarker> {
    struct VenueFeatureMarker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<std::__1::atomic<bool>> {
    struct atomic<bool> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<std::__1::atomic<unsigned long>> {
    struct atomic<unsigned long> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>>> {
    struct vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>> *_field1;
    struct __shared_weak_count *_field2;
};

struct small_vector<md::mun::PhotoInfo, 6> {
    struct PhotoInfo *_begin;
    struct PhotoInfo *_end;
    struct PhotoInfo *_fixedStorage;
    unsigned long long _capacity;
    struct type storage[6];
};

struct small_vector<md::mun::PointView::CameraLod, 6> {
    struct CameraLod *_begin;
    struct CameraLod *_end;
    struct CameraLod *_fixedStorage;
    unsigned long long _capacity;
    struct type storage[6];
};

struct stack<geo::Triangulator<float, unsigned short>::Node *, std::__1::vector<geo::Triangulator<float, unsigned short>::Node *, std::__1::allocator<geo::Triangulator<float, unsigned short>::Node *>>> {
    struct vector<geo::Triangulator<float, unsigned short>::Node *, std::__1::allocator<geo::Triangulator<float, unsigned short>::Node *>> _field1;
};

struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>> {
    struct duration<long long, std::__1::ratio<1, 1000000000>> _field1;
};

struct type {
    unsigned char __lx[32];
};

struct unfair_lock {
    struct os_unfair_lock_s _lock;
};

struct unique_ptr<(anonymous namespace)::BumpAnimator, std::__1::default_delete<(anonymous namespace)::BumpAnimator>> {
    struct __compressed_pair<(anonymous namespace)::BumpAnimator *, std::__1::default_delete<(anonymous namespace)::BumpAnimator>> {
        struct BumpAnimator *__value_;
    } __ptr_;
};

struct unique_ptr<(anonymous namespace)::CustomLandmarksContainer, std::__1::default_delete<(anonymous namespace)::CustomLandmarksContainer>> {
    struct __compressed_pair<(anonymous namespace)::CustomLandmarksContainer *, std::__1::default_delete<(anonymous namespace)::CustomLandmarksContainer>> {
        struct CustomLandmarksContainer *__value_;
    } __ptr_;
};

struct unique_ptr<(anonymous namespace)::PathAnimationDescription, std::__1::default_delete<(anonymous namespace)::PathAnimationDescription>> {
    struct __compressed_pair<(anonymous namespace)::PathAnimationDescription *, std::__1::default_delete<(anonymous namespace)::PathAnimationDescription>> {
        struct PathAnimationDescription *__value_;
    } __ptr_;
};

struct unique_ptr<(anonymous namespace)::PendingPathAnimation, std::__1::default_delete<(anonymous namespace)::PendingPathAnimation>> {
    struct __compressed_pair<(anonymous namespace)::PendingPathAnimation *, std::__1::default_delete<(anonymous namespace)::PendingPathAnimation>> {
        struct PendingPathAnimation *__value_;
    } __ptr_;
};

struct unique_ptr<(anonymous namespace)::YFlipPass, std::__1::default_delete<(anonymous namespace)::YFlipPass>> {
    struct __compressed_pair<(anonymous namespace)::YFlipPass *, std::__1::default_delete<(anonymous namespace)::YFlipPass>> {
        struct YFlipPass *__value_;
    } __ptr_;
};

struct unique_ptr<ReachabilityChangedObserver, std::__1::default_delete<ReachabilityChangedObserver>> {
    struct __compressed_pair<ReachabilityChangedObserver *, std::__1::default_delete<ReachabilityChangedObserver>> {
        struct ReachabilityChangedObserver *_field1;
    } _field1;
};

struct unique_ptr<altitude::AnimationTimer, std::__1::default_delete<altitude::AnimationTimer>> {
    struct __compressed_pair<altitude::AnimationTimer *, std::__1::default_delete<altitude::AnimationTimer>> {
        struct AnimationTimer *_field1;
    } _field1;
};

struct unique_ptr<gdc::LoadingStatusTracker, std::__1::default_delete<gdc::LoadingStatusTracker>> {
    struct __compressed_pair<gdc::LoadingStatusTracker *, std::__1::default_delete<gdc::LoadingStatusTracker>> {
        struct LoadingStatusTracker *_field1;
    } _field1;
};

struct unique_ptr<geo::Cache<unsigned char, std::__1::shared_ptr<geo::Polygon2<double>>, std::__1::hash<unsigned char>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned char, std::__1::shared_ptr<geo::Polygon2<double>>, std::__1::hash<unsigned char>, LRUPolicy>>> {
    struct __compressed_pair<geo::Cache<unsigned char, std::__1::shared_ptr<geo::Polygon2<double>>, std::__1::hash<unsigned char>, LRUPolicy>*, std::__1::default_delete<geo::Cache<unsigned char, std::__1::shared_ptr<geo::Polygon2<double>>, std::__1::hash<unsigned char>, LRUPolicy>>> {
        struct Cache<unsigned char, std::__1::shared_ptr<geo::Polygon2<double>>, std::__1::hash<unsigned char>, LRUPolicy> *__value_;
    } __ptr_;
};

struct unique_ptr<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>>>, std::__1::hash<unsigned char>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>>>, std::__1::hash<unsigned char>, LRUPolicy>>> {
    struct __compressed_pair<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>>>, std::__1::hash<unsigned char>, LRUPolicy>*, std::__1::default_delete<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>>>, std::__1::hash<unsigned char>, LRUPolicy>>> {
        struct Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>>>, std::__1::hash<unsigned char>, LRUPolicy> *__value_;
    } __ptr_;
};

struct unique_ptr<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy>>> {
    struct __compressed_pair<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy>*, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy>>> {
        struct Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> *_field1;
    } _field1;
};

struct unique_ptr<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy>>> {
    struct __compressed_pair<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy>*, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy>>> {
        struct Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> *_field1;
    } _field1;
};

struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> {
    struct __compressed_pair<geo::TaskQueue *, std::__1::default_delete<geo::TaskQueue>> {
        struct TaskQueue *_field1;
    } _field1;
};

struct unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas>> {
    struct __compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas>> {
        struct AlphaAtlas *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>>;

struct unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>>;

struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>> {
    struct __compressed_pair<ggl::CommandBuffer *, std::__1::default_delete<ggl::CommandBuffer>> {
        struct CommandBuffer *_field1;
    } _field1;
};

struct unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My>>> {
    struct __compressed_pair<ggl::DataWrite<ggl::ColoredText::My>*, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My>>> {
        struct DataWrite<ggl::ColoredText::My> *_field1;
    } _field1;
};

struct unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink>> {
    struct __compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink>> {
        struct DisplayLink *_field1;
    } _field1;
};

struct unique_ptr<ggl::DistanceAtlas, std::__1::default_delete<ggl::DistanceAtlas>> {
    struct __compressed_pair<ggl::DistanceAtlas *, std::__1::default_delete<ggl::DistanceAtlas>> {
        struct DistanceAtlas *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::Drawable, std::__1::default_delete<ggl::Drawable>> {
    struct __compressed_pair<ggl::Drawable *, std::__1::default_delete<ggl::Drawable>> {
        struct Drawable *_field1;
    } _field1;
};

struct unique_ptr<ggl::IOSurfaceTexture, std::__1::default_delete<ggl::IOSurfaceTexture>> {
    struct __compressed_pair<ggl::IOSurfaceTexture *, std::__1::default_delete<ggl::IOSurfaceTexture>> {
        struct IOSurfaceTexture *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas>> {
    struct __compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas>> {
        struct IsoAlphaAtlas *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl>> {
    struct __compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl>> {
        struct LoaderImpl *_field1;
    } _field1;
};

struct unique_ptr<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>>> {
        MeshVendor_2955faa2 *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> {
        MeshVendor_e321e873 *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> {
        MeshVendor_7adfd6de *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::OESContext, std::__1::default_delete<ggl::OESContext>> {
    struct __compressed_pair<ggl::OESContext *, std::__1::default_delete<ggl::OESContext>> {
        struct OESContext *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>>;

struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> {
    struct __compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer>> {
        struct RenderBuffer *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> {
    struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem>> {
        struct RenderItem *_field1;
    } _field1;
};

struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> {
    struct __compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue>> {
        struct RenderQueue *_field1;
    } _field1;
};

struct unique_ptr<ggl::RenderResourceFences, std::__1::default_delete<ggl::RenderResourceFences>> {
    struct __compressed_pair<ggl::RenderResourceFences *, std::__1::default_delete<ggl::RenderResourceFences>> {
        struct RenderResourceFences *_field1;
    } _field1;
};

struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget>> {
    struct __compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget>> {
        struct RenderTarget *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop>> {
    struct __compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop>> {
        struct SnapshotRunLoop *_field1;
    } _field1;
};

struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> {
    struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D>> {
        struct Texture2D *_field1;
    } _field1;
};

struct unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager>> {
    struct __compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager>> {
        struct AnimationManager *_field1;
    } _field1;
};

struct unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner>> {
    struct __compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner>> {
        struct AnimationRunner *_field1;
    } _field1;
};

struct unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer>> {
    struct __compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer>> {
        struct CartographicRenderer *_field1;
    } _field1;
};

struct unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager>> {
    struct __compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager>> {
        struct DebugConsoleManager *__value_;
    } __ptr_;
};

struct unique_ptr<md::Device, std::__1::default_delete<md::Device>> {
    struct __compressed_pair<md::Device *, std::__1::default_delete<md::Device>> {
        struct Device *__value_;
    } __ptr_;
};

struct unique_ptr<md::FadeEffectBlock, std::__1::default_delete<md::FadeEffectBlock>> {
    struct __compressed_pair<md::FadeEffectBlock *, std::__1::default_delete<md::FadeEffectBlock>> {
        struct FadeEffectBlock *_field1;
    } _field1;
};

struct unique_ptr<md::FlyoverRouteOverlayCache, std::__1::default_delete<md::FlyoverRouteOverlayCache>> {
    struct __compressed_pair<md::FlyoverRouteOverlayCache *, std::__1::default_delete<md::FlyoverRouteOverlayCache>> {
        struct FlyoverRouteOverlayCache *_field1;
    } _field1;
};

struct unique_ptr<md::FrameGraphResourceRegistry, std::__1::default_delete<md::FrameGraphResourceRegistry>> {
    struct __compressed_pair<md::FrameGraphResourceRegistry *, std::__1::default_delete<md::FrameGraphResourceRegistry>> {
        struct FrameGraphResourceRegistry *_field1;
    } _field1;
};

struct unique_ptr<md::GlobeAdapter, std::__1::default_delete<md::GlobeAdapter>> {
    struct __compressed_pair<md::GlobeAdapter *, std::__1::default_delete<md::GlobeAdapter>> {
        struct GlobeAdapter *__value_;
    } __ptr_;
};

struct unique_ptr<md::LabelClusterProvider, std::__1::default_delete<md::LabelClusterProvider>> {
    struct __compressed_pair<md::LabelClusterProvider *, std::__1::default_delete<md::LabelClusterProvider>> {
        struct LabelClusterProvider *_field1;
    } _field1;
};

struct unique_ptr<md::LabelSettingsData, std::__1::default_delete<md::LabelSettingsData>> {
    struct __compressed_pair<md::LabelSettingsData *, std::__1::default_delete<md::LabelSettingsData>> {
        struct LabelSettingsData *_field1;
    } _field1;
};

struct unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext>> {
    struct __compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext>> {
        struct LayoutContext *_field1;
    } _field1;
};

struct unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager>> {
    struct __compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager>> {
        struct LogicManager *_field1;
    } _field1;
};

struct unique_ptr<md::MapDataAccess, std::__1::default_delete<md::MapDataAccess>> {
    struct __compressed_pair<md::MapDataAccess *, std::__1::default_delete<md::MapDataAccess>> {
        struct MapDataAccess *_field1;
    } _field1;
};

struct unique_ptr<md::MapEngine, std::__1::default_delete<md::MapEngine>> {
    struct __compressed_pair<md::MapEngine *, std::__1::default_delete<md::MapEngine>> {
        struct MapEngine *__value_;
    } __ptr_;
};

struct unique_ptr<md::MapEngineConfiguration, std::__1::default_delete<md::MapEngineConfiguration>> {
    struct __compressed_pair<md::MapEngineConfiguration *, std::__1::default_delete<md::MapEngineConfiguration>> {
        struct MapEngineConfiguration *_field1;
    } _field1;
};

struct unique_ptr<md::MapEngineMode, std::__1::default_delete<md::MapEngineMode>> {
    struct __compressed_pair<md::MapEngineMode *, std::__1::default_delete<md::MapEngineMode>> {
        struct MapEngineMode *_field1;
    } _field1;
};

struct unique_ptr<md::MapEngineSettings, std::__1::default_delete<md::MapEngineSettings>> {
    struct __compressed_pair<md::MapEngineSettings *, std::__1::default_delete<md::MapEngineSettings>> {
        struct MapEngineSettings *_field1;
    } _field1;
};

struct unique_ptr<md::NavLabelPart, std::__1::default_delete<md::NavLabelPart>> {
    struct __compressed_pair<md::NavLabelPart *, std::__1::default_delete<md::NavLabelPart>> {
        struct NavLabelPart *_field1;
    } _field1;
};

struct unique_ptr<md::PassList, std::__1::default_delete<md::PassList>> {
    struct __compressed_pair<md::PassList *, std::__1::default_delete<md::PassList>> {
        struct PassList *_field1;
    } _field1;
};

struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>;

struct unique_ptr<md::RoadSignArtworkGenerator, std::__1::default_delete<md::RoadSignArtworkGenerator>> {
    struct __compressed_pair<md::RoadSignArtworkGenerator *, std::__1::default_delete<md::RoadSignArtworkGenerator>> {
        struct RoadSignArtworkGenerator *_field1;
    } _field1;
};

struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources>> {
    struct __compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources>> {
        struct SharedDeviceResources *_field1;
    } _field1;
};

struct unique_ptr<md::SingleCameraContext, std::__1::default_delete<md::SingleCameraContext>> {
    struct __compressed_pair<md::SingleCameraContext *, std::__1::default_delete<md::SingleCameraContext>> {
        struct SingleCameraContext *_field1;
    } _field1;
};

struct unique_ptr<md::TrafficSegmentsAlongRoute, std::__1::default_delete<md::TrafficSegmentsAlongRoute>> {
    struct __compressed_pair<md::TrafficSegmentsAlongRoute *, std::__1::default_delete<md::TrafficSegmentsAlongRoute>> {
        struct TrafficSegmentsAlongRoute *__value_;
    } __ptr_;
};

struct unique_ptr<md::World, std::__1::default_delete<md::World>> {
    struct __compressed_pair<md::World *, std::__1::default_delete<md::World>> {
        struct World *_field1;
    } _field1;
};

struct unique_ptr<md::mun::MuninDisplayAnalytic, std::__1::default_delete<md::mun::MuninDisplayAnalytic>> {
    struct __compressed_pair<md::mun::MuninDisplayAnalytic *, std::__1::default_delete<md::mun::MuninDisplayAnalytic>> {
        struct MuninDisplayAnalytic *_field1;
    } _field1;
};

struct unique_ptr<md::mun::MuninIntersector, std::__1::default_delete<md::mun::MuninIntersector>> {
    struct __compressed_pair<md::mun::MuninIntersector *, std::__1::default_delete<md::mun::MuninIntersector>> {
        struct MuninIntersector *_field1;
    } _field1;
};

struct unique_ptr<md::mun::MuninMetadataContainer, std::__1::default_delete<md::mun::MuninMetadataContainer>> {
    struct __compressed_pair<md::mun::MuninMetadataContainer *, std::__1::default_delete<md::mun::MuninMetadataContainer>> {
        struct MuninMetadataContainer *_field1;
    } _field1;
};

struct unique_ptr<md::mun::MuninNavigation, std::__1::default_delete<md::mun::MuninNavigation>> {
    struct __compressed_pair<md::mun::MuninNavigation *, std::__1::default_delete<md::mun::MuninNavigation>> {
        struct MuninNavigation *_field1;
    } _field1;
};

struct unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer>> {
    struct __compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer>> {
        struct RealisticRenderer *_field1;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>**, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> **__value_;
        struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator>> {
            struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator>> {
                unsigned long long __value_;
                struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator> __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*>*, mdm::Allocator>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*>**, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*>*, mdm::Allocator>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*> **_field1;
        struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*>*, mdm::Allocator>> {
            struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*>*, mdm::Allocator>> {
                unsigned long long _field1;
                struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*>*, mdm::Allocator> _field2;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*>*, mdm::Allocator>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*>**, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*>*, mdm::Allocator>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*> **_field1;
        struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*>*, mdm::Allocator>> {
            struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*>*, mdm::Allocator>> {
                unsigned long long _field1;
                struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*>*, mdm::Allocator> _field2;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>**, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*> **__value_;
        struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator>> {
            struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator>> {
                unsigned long long __value_;
                struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator> __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*, mdm::Allocator>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>**, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*, mdm::Allocator>>> {
        struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> **_field1;
        struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*, mdm::Allocator>> {
            struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*, mdm::Allocator>> {
                unsigned long long _field1;
                struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*, mdm::Allocator> _field2;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<unsigned char [], std::__1::default_delete<unsigned char []>> {
    struct __compressed_pair<unsigned char *, std::__1::default_delete<unsigned char []>> {
        char *_field1;
    } _field1;
};

struct unordered_map<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, (anonymous namespace)::StyleQueryOverrideHash, std::__1::equal_to<StyleQueryOverride>, std::__1::allocator<std::__1::pair<const StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, std::__1::__unordered_map_hasher<StyleQueryOverride, std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, (anonymous namespace)::StyleQueryOverrideHash, true>, std::__1::__unordered_map_equal<StyleQueryOverride, std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, std::__1::equal_to<StyleQueryOverride>, true>, std::__1::allocator<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StyleQueryOverride, std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, (anonymous namespace)::StyleQueryOverrideHash, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<StyleQueryOverride, std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>, std::__1::equal_to<StyleQueryOverride>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyHashFunc, GEOTileKeyEqualsFunc, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> {
    struct __hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyHashFunc, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyEqualsFunc, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyHashFunc, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyEqualsFunc, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<std::__1::pair<const gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>>> {
    struct __hash_table<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, gdc::LayerDataRequestKeyHash, true>, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, std::__1::equal_to<gdc::LayerDataRequestKey>, true>, std::__1::allocator<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, gdc::LayerDataRequestKeyHash, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>>, std::__1::equal_to<gdc::LayerDataRequestKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<std::__1::pair<const gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>>> {
    struct __hash_table<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, gdc::LayerDataRequestKeyHash, true>, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, std::__1::equal_to<gdc::LayerDataRequestKey>, true>, std::__1::allocator<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, gdc::LayerDataRequestKeyHash, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, std::__1::equal_to<gdc::LayerDataRequestKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, geo::StdAllocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, mdm::Allocator>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, true>, geo::StdAllocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, mdm::Allocator>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>, mdm::Allocator>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> __value_;
            struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>, mdm::Allocator> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, geo::StdAllocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, mdm::Allocator>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, true>, geo::StdAllocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, mdm::Allocator>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*>*, mdm::Allocator>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>, mdm::Allocator>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>*> _field1;
            struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, void *>, mdm::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, md::LabelTransitSupport::TransitLineColorKeyHash, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>>, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::hash<SectionKey>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned int, unsigned long long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long long>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long long>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder>>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
    struct __hash_table<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*>, std::__1::allocator<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<grl::ResourceObserver *, std::__1::hash<grl::ResourceObserver *>, std::__1::equal_to<grl::ResourceObserver *>, std::__1::allocator<grl::ResourceObserver *>> {
    struct __hash_table<grl::ResourceObserver *, std::__1::hash<grl::ResourceObserver *>, std::__1::equal_to<grl::ResourceObserver *>, std::__1::allocator<grl::ResourceObserver *>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*>, std::__1::allocator<std::__1::__hash_node<grl::ResourceObserver *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<grl::ResourceObserver *>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<grl::ResourceObserver *>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<md::Anchor *, std::__1::hash<md::Anchor *>, std::__1::equal_to<md::Anchor *>, std::__1::allocator<md::Anchor *>> {
    struct __hash_table<md::Anchor *, std::__1::hash<md::Anchor *>, std::__1::equal_to<md::Anchor *>, std::__1::allocator<md::Anchor *>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*>, std::__1::allocator<std::__1::__hash_node<md::Anchor *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<md::Anchor *, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<md::Anchor *>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<md::Anchor *>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::hash<std::__1::shared_ptr<md::LabelMapTile>>, std::__1::equal_to<std::__1::shared_ptr<md::LabelMapTile>>, geo::StdAllocator<std::__1::shared_ptr<md::LabelMapTile>, mdm::Allocator>> {
    struct __hash_table<std::__1::shared_ptr<md::LabelMapTile>, std::__1::hash<std::__1::shared_ptr<md::LabelMapTile>>, std::__1::equal_to<std::__1::shared_ptr<md::LabelMapTile>>, geo::StdAllocator<std::__1::shared_ptr<md::LabelMapTile>, mdm::Allocator>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*>*, mdm::Allocator>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*>, geo::StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>, mdm::Allocator>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>*> _field1;
            struct StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>, mdm::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelMapTile>>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelMapTile>>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile>>, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile>>, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator>> {
    struct __hash_table<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile>>, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile>>, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>, geo::StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*> __value_;
            struct StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelTile>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, geo::StdAllocator<unsigned long long, mdm::Allocator>> {
    struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, geo::StdAllocator<unsigned long long, mdm::Allocator>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*, mdm::Allocator>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>, geo::StdAllocator<std::__1::__hash_node<unsigned long long, void *>, mdm::Allocator>> {
            struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> _field1;
            struct StdAllocator<std::__1::__hash_node<unsigned long long, void *>, mdm::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long>> _field3;
        struct __compressed_pair<float, std::__1::equal_to<unsigned long long>> _field4;
    } _field1;
};

struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
    struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long>> __p2_;
        struct __compressed_pair<float, std::__1::equal_to<unsigned long long>> __p3_;
    } __table_;
};

struct vector<AdditionalRouteInfo, std::__1::allocator<AdditionalRouteInfo>> {
    struct AdditionalRouteInfo *__begin_;
    struct AdditionalRouteInfo *__end_;
    struct __compressed_pair<AdditionalRouteInfo *, std::__1::allocator<AdditionalRouteInfo>> {
        struct AdditionalRouteInfo *__value_;
    } __end_cap_;
};

struct vector<Edge, std::__1::allocator<Edge>> {
    struct Edge *_field1;
    struct Edge *_field2;
    struct __compressed_pair<Edge *, std::__1::allocator<Edge>> {
        struct Edge *_field1;
    } _field3;
};

struct vector<GEOFeatureStylePair, geo::StdAllocator<GEOFeatureStylePair, mdm::Allocator>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<GEOFeatureStylePair *, geo::StdAllocator<GEOFeatureStylePair, mdm::Allocator>> {
        CDStruct_183601bc *_field1;
        struct StdAllocator<GEOFeatureStylePair, mdm::Allocator> _field2;
    } _field3;
};

struct vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<LabelNavJunctionInfo, geo::StdAllocator<LabelNavJunctionInfo, mdm::Allocator>> {
    struct LabelNavJunctionInfo *__begin_;
    struct LabelNavJunctionInfo *__end_;
    struct __compressed_pair<LabelNavJunctionInfo *, geo::StdAllocator<LabelNavJunctionInfo, mdm::Allocator>> {
        struct LabelNavJunctionInfo *__value_;
        struct StdAllocator<LabelNavJunctionInfo, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<RouteJunctionInfo, geo::StdAllocator<RouteJunctionInfo, mdm::Allocator>> {
    struct RouteJunctionInfo *_field1;
    struct RouteJunctionInfo *_field2;
    struct __compressed_pair<RouteJunctionInfo *, geo::StdAllocator<RouteJunctionInfo, mdm::Allocator>> {
        struct RouteJunctionInfo *_field1;
        struct StdAllocator<RouteJunctionInfo, mdm::Allocator> _field2;
    } _field3;
};

struct vector<RouteSegment, geo::StdAllocator<RouteSegment, mdm::Allocator>> {
    struct RouteSegment *__begin_;
    struct RouteSegment *__end_;
    struct __compressed_pair<RouteSegment *, geo::StdAllocator<RouteSegment, mdm::Allocator>> {
        struct RouteSegment *__value_;
        struct StdAllocator<RouteSegment, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder>> {
    struct AnimationObjectHolder *_field1;
    struct AnimationObjectHolder *_field2;
    struct __compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder>> {
        struct AnimationObjectHolder *_field1;
    } _field3;
};

struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey>> {
    struct SimpleTileKey *_field1;
    struct SimpleTileKey *_field2;
    struct __compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey>> {
        struct SimpleTileKey *_field1;
    } _field3;
};

struct vector<const md::MuninRoadEdge *, std::__1::allocator<const md::MuninRoadEdge *>> {
    struct MuninRoadEdge **_field1;
    struct MuninRoadEdge **_field2;
    struct __compressed_pair<const md::MuninRoadEdge **, std::__1::allocator<const md::MuninRoadEdge *>> {
        struct MuninRoadEdge **_field1;
    } _field3;
};

struct vector<double, std::__1::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *__value_;
    } __end_cap_;
};

struct vector<gdc::DebugTreeNode, std::__1::allocator<gdc::DebugTreeNode>> {
    struct DebugTreeNode *__begin_;
    struct DebugTreeNode *__end_;
    struct __compressed_pair<gdc::DebugTreeNode *, std::__1::allocator<gdc::DebugTreeNode>> {
        struct DebugTreeNode *__value_;
    } __end_cap_;
};

struct vector<gdc::DebugTreeProperty, std::__1::allocator<gdc::DebugTreeProperty>> {
    struct DebugTreeProperty *__begin_;
    struct DebugTreeProperty *__end_;
    struct __compressed_pair<gdc::DebugTreeProperty *, std::__1::allocator<gdc::DebugTreeProperty>> {
        struct DebugTreeProperty *__value_;
    } __end_cap_;
};

struct vector<gdc::DebugTreeValue, std::__1::allocator<gdc::DebugTreeValue>> {
    struct DebugTreeValue *_field1;
    struct DebugTreeValue *_field2;
    struct __compressed_pair<gdc::DebugTreeValue *, std::__1::allocator<gdc::DebugTreeValue>> {
        struct DebugTreeValue *_field1;
    } _field3;
};

struct vector<geo::Coordinate3D<Radians, double>, std::__1::allocator<geo::Coordinate3D<Radians, double>>> {
    Coordinate3D_bc242218 *__begin_;
    Coordinate3D_bc242218 *__end_;
    struct __compressed_pair<geo::Coordinate3D<Radians, double>*, std::__1::allocator<geo::Coordinate3D<Radians, double>>> {
        Coordinate3D_bc242218 *__value_;
    } __end_cap_;
};

struct vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>> {
    Mercator2_57ec32b6 *__begin_;
    Mercator2_57ec32b6 *__end_;
    struct __compressed_pair<geo::Mercator2<double>*, std::__1::allocator<geo::Mercator2<double>>> {
        Mercator2_57ec32b6 *__value_;
    } __end_cap_;
};

struct vector<geo::Triangulator<float, unsigned short>::Node *, std::__1::allocator<geo::Triangulator<float, unsigned short>::Node *>> {
    struct Node **_field1;
    struct Node **_field2;
    struct __compressed_pair<geo::Triangulator<float, unsigned short>::Node **, std::__1::allocator<geo::Triangulator<float, unsigned short>::Node *>> {
        struct Node **_field1;
    } _field3;
};

struct vector<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
    struct _retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__begin_;
    struct _retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__end_;
    struct __compressed_pair<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>*, std::__1::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
        struct _retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__value_;
    } __end_cap_;
};

struct vector<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, geo::StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator>> {
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__begin_;
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__end_;
    struct __compressed_pair<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>*, geo::StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator>> {
        struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__value_;
        struct StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>>> {
    struct fast_shared_ptr<md::RouteLineSection, std::allocator> *__begin_;
    struct fast_shared_ptr<md::RouteLineSection, std::allocator> *__end_;
    struct __compressed_pair<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>*, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>>> {
        struct fast_shared_ptr<md::RouteLineSection, std::allocator> *__value_;
    } __end_cap_;
};

struct vector<ggl::Batcher, std::__1::allocator<ggl::Batcher>> {
    struct Batcher *__begin_;
    struct Batcher *__end_;
    struct __compressed_pair<ggl::Batcher *, std::__1::allocator<ggl::Batcher>> {
        struct Batcher *__value_;
    } __end_cap_;
};

struct vector<ggl::CommandBuffer *, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator>> {
    struct CommandBuffer **_field1;
    struct CommandBuffer **_field2;
    struct __compressed_pair<ggl::CommandBuffer **, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator>> {
        struct CommandBuffer **_field1;
        struct StdAllocator<ggl::CommandBuffer *, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::RenderQueue::Pass, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator>> {
    struct Pass *_field1;
    struct Pass *_field2;
    struct __compressed_pair<ggl::RenderQueue::Pass *, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator>> {
        struct Pass *_field1;
        struct StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::ShaderLibrary::ComputeShaderEntry, geo::StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator>> {
    struct ComputeShaderEntry *_field1;
    struct ComputeShaderEntry *_field2;
    struct __compressed_pair<ggl::ShaderLibrary::ComputeShaderEntry *, geo::StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator>> {
        struct ComputeShaderEntry *_field1;
        struct StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::ShaderLibrary::FunctionEntry, geo::StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator>> {
    struct FunctionEntry *_field1;
    struct FunctionEntry *_field2;
    struct __compressed_pair<ggl::ShaderLibrary::FunctionEntry *, geo::StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator>> {
        struct FunctionEntry *_field1;
        struct StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::ShaderLibrary::ShaderEntry, geo::StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator>> {
    struct ShaderEntry *_field1;
    struct ShaderEntry *_field2;
    struct __compressed_pair<ggl::ShaderLibrary::ShaderEntry *, geo::StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator>> {
        struct ShaderEntry *_field1;
        struct StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator>> {
    struct Texture **_field1;
    struct Texture **_field2;
    struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator>> {
        struct Texture **_field1;
        struct StdAllocator<ggl::Texture *, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::Texture2D *, std::__1::allocator<ggl::Texture2D *>> {
    struct Texture2D **_field1;
    struct Texture2D **_field2;
    struct __compressed_pair<ggl::Texture2D **, std::__1::allocator<ggl::Texture2D *>> {
        struct Texture2D **_field1;
    } _field3;
};

struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem>> {
    struct Texture2DLoadItem *_field1;
    struct Texture2DLoadItem *_field2;
    struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem>> {
        struct Texture2DLoadItem *_field1;
    } _field3;
};

struct vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator>> {
    Matrix_2bdd42a3 *__begin_;
    Matrix_2bdd42a3 *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator>> {
        Matrix_2bdd42a3 *__value_;
        struct StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
    Matrix_2bdd42a3 *__begin_;
    Matrix_2bdd42a3 *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
        Matrix_2bdd42a3 *__value_;
    } __end_cap_;
};

struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
    Matrix_8746f91e *__begin_;
    Matrix_8746f91e *__end_;
    struct __compressed_pair<gm::Matrix<float, 2, 1>*, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
        Matrix_8746f91e *__value_;
    } __end_cap_;
};

struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator>> {
    MultiRange_4bdc93a8 *_field1;
    MultiRange_4bdc93a8 *_field2;
    struct __compressed_pair<gm::MultiRange<unsigned long>*, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator>> {
        MultiRange_4bdc93a8 *_field1;
        struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> _field2;
    } _field3;
};

struct vector<gm::Range<unsigned int>, std::__1::allocator<gm::Range<unsigned int>>> {
    struct Range<unsigned int> *_field1;
    struct Range<unsigned int> *_field2;
    struct __compressed_pair<gm::Range<unsigned int>*, std::__1::allocator<gm::Range<unsigned int>>> {
        struct Range<unsigned int> *_field1;
    } _field3;
};

struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long>>> {
    struct Range<unsigned long> *_field1;
    struct Range<unsigned long> *_field2;
    struct __compressed_pair<gm::Range<unsigned long>*, std::__1::allocator<gm::Range<unsigned long>>> {
        struct Range<unsigned long> *_field1;
    } _field3;
};

struct vector<gss::FeatureAttributePair, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator>> {
    struct FeatureAttributePair *__begin_;
    struct FeatureAttributePair *__end_;
    struct __compressed_pair<gss::FeatureAttributePair *, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator>> {
        struct FeatureAttributePair *__value_;
        struct StdAllocator<gss::FeatureAttributePair, gss::Allocator> __value_;
    } __end_cap_;
};

struct vector<md::AvoidanceRectWithPriority, geo::StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator>> {
    struct AvoidanceRectWithPriority *__begin_;
    struct AvoidanceRectWithPriority *__end_;
    struct __compressed_pair<md::AvoidanceRectWithPriority *, geo::StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator>> {
        struct AvoidanceRectWithPriority *__value_;
        struct StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<md::CommandBufferLocation, std::__1::allocator<md::CommandBufferLocation>> {
    struct CommandBufferLocation *_field1;
    struct CommandBufferLocation *_field2;
    struct __compressed_pair<md::CommandBufferLocation *, std::__1::allocator<md::CommandBufferLocation>> {
        struct CommandBufferLocation *_field1;
    } _field3;
};

struct vector<md::LogicBase *, std::__1::allocator<md::LogicBase *>> {
    struct LogicBase **_field1;
    struct LogicBase **_field2;
    struct __compressed_pair<md::LogicBase **, std::__1::allocator<md::LogicBase *>> {
        struct LogicBase **_field1;
    } _field3;
};

struct vector<md::ManeuverArrowInfo, std::__1::allocator<md::ManeuverArrowInfo>> {
    struct ManeuverArrowInfo *__begin_;
    struct ManeuverArrowInfo *__end_;
    struct __compressed_pair<md::ManeuverArrowInfo *, std::__1::allocator<md::ManeuverArrowInfo>> {
        struct ManeuverArrowInfo *__value_;
    } __end_cap_;
};

struct vector<md::MuninSceneEvent, std::__1::allocator<md::MuninSceneEvent>> {
    struct MuninSceneEvent *_field1;
    struct MuninSceneEvent *_field2;
    struct __compressed_pair<md::MuninSceneEvent *, std::__1::allocator<md::MuninSceneEvent>> {
        struct MuninSceneEvent *_field1;
    } _field3;
};

struct vector<md::TextureAtlas::RelocateItem, std::__1::allocator<md::TextureAtlas::RelocateItem>> {
    struct RelocateItem *_field1;
    struct RelocateItem *_field2;
    struct __compressed_pair<md::TextureAtlas::RelocateItem *, std::__1::allocator<md::TextureAtlas::RelocateItem>> {
        struct RelocateItem *_field1;
    } _field3;
};

struct vector<md::TileExclusionArea, std::__1::allocator<md::TileExclusionArea>> {
    struct TileExclusionArea *_field1;
    struct TileExclusionArea *_field2;
    struct __compressed_pair<md::TileExclusionArea *, std::__1::allocator<md::TileExclusionArea>> {
        struct TileExclusionArea *_field1;
    } _field3;
};

struct vector<md::TileSelectionTileSetType, std::__1::allocator<md::TileSelectionTileSetType>> {
    unsigned short *_field1;
    unsigned short *_field2;
    struct __compressed_pair<md::TileSelectionTileSetType *, std::__1::allocator<md::TileSelectionTileSetType>> {
        unsigned short *_field1;
    } _field3;
};

struct vector<md::TrafficSegment, std::__1::allocator<md::TrafficSegment>> {
    struct TrafficSegment *_field1;
    struct TrafficSegment *_field2;
    struct __compressed_pair<md::TrafficSegment *, std::__1::allocator<md::TrafficSegment>> {
        struct TrafficSegment *_field1;
    } _field3;
};

struct vector<md::VenueBuilding, std::__1::allocator<md::VenueBuilding>> {
    struct VenueBuilding *_field1;
    struct VenueBuilding *_field2;
    struct __compressed_pair<md::VenueBuilding *, std::__1::allocator<md::VenueBuilding>> {
        struct VenueBuilding *_field1;
    } _field3;
};

struct vector<md::VenueLevel, std::__1::allocator<md::VenueLevel>> {
    struct VenueLevel *_field1;
    struct VenueLevel *_field2;
    struct __compressed_pair<md::VenueLevel *, std::__1::allocator<md::VenueLevel>> {
        struct VenueLevel *_field1;
    } _field3;
};

struct vector<md::mun::CollectionPoint, std::__1::allocator<md::mun::CollectionPoint>> {
    struct CollectionPoint *_field1;
    struct CollectionPoint *_field2;
    struct __compressed_pair<md::mun::CollectionPoint *, std::__1::allocator<md::mun::CollectionPoint>> {
        struct CollectionPoint *_field1;
    } _field3;
};

struct vector<md::mun::ViewId, std::__1::allocator<md::mun::ViewId>> {
    struct ViewId *_field1;
    struct ViewId *_field2;
    struct __compressed_pair<md::mun::ViewId *, std::__1::allocator<md::mun::ViewId>> {
        struct ViewId *_field1;
    } _field3;
};

struct vector<md::realistic::RouteRenderLayer::RouteDataMapping, std::__1::allocator<md::realistic::RouteRenderLayer::RouteDataMapping>> {
    struct RouteDataMapping *_field1;
    struct RouteDataMapping *_field2;
    struct __compressed_pair<md::realistic::RouteRenderLayer::RouteDataMapping *, std::__1::allocator<md::realistic::RouteRenderLayer::RouteDataMapping>> {
        struct RouteDataMapping *_field1;
    } _field3;
};

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    basic_string_23d93216 *_field1;
    basic_string_23d93216 *_field2;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        basic_string_23d93216 *_field1;
    } _field3;
};

struct vector<std::__1::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>, std::__1::allocator<std::__1::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>>> {
    struct pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>> *__begin_;
    struct pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>> *__end_;
    struct __compressed_pair<std::__1::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>*, std::__1::allocator<std::__1::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>>> {
        struct pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>> *__value_;
    } __end_cap_;
};

struct vector<std::__1::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>, std::__1::allocator<std::__1::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>>> {
    struct pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>> *__begin_;
    struct pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>> *__end_;
    struct __compressed_pair<std::__1::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>*, std::__1::allocator<std::__1::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>>> {
        struct pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>> *__value_;
    } __end_cap_;
};

struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair>>> {
    struct pair<bool, GEOFeatureStylePair> *_field1;
    struct pair<bool, GEOFeatureStylePair> *_field2;
    struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair>*, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair>>> {
        struct pair<bool, GEOFeatureStylePair> *_field1;
    } _field3;
};

struct vector<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>>> {
    struct pair<md::CommandBufferLocation, md::RenderLayer *> *_field1;
    struct pair<md::CommandBufferLocation, md::RenderLayer *> *_field2;
    struct __compressed_pair<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>*, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>>> {
        struct pair<md::CommandBufferLocation, md::RenderLayer *> *_field1;
    } _field3;
};

struct vector<std::__1::pair<md::MapEngineSetting, long long>, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>> {
    struct pair<md::MapEngineSetting, long long> *_field1;
    struct pair<md::MapEngineSetting, long long> *_field2;
    struct __compressed_pair<std::__1::pair<md::MapEngineSetting, long long>*, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>> {
        struct pair<md::MapEngineSetting, long long> *_field1;
    } _field3;
};

struct vector<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>>> {
    struct pair<md::TileSelectionTileSetType, md::SceneTileSet> *_field1;
    struct pair<md::TileSelectionTileSetType, md::SceneTileSet> *_field2;
    struct __compressed_pair<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>*, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>>> {
        struct pair<md::TileSelectionTileSetType, md::SceneTileSet> *_field1;
    } _field3;
};

struct vector<std::__1::pair<md::mun::ViewId, unsigned int>, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int>>> {
    struct pair<md::mun::ViewId, unsigned int> *__begin_;
    struct pair<md::mun::ViewId, unsigned int> *__end_;
    struct __compressed_pair<std::__1::pair<md::mun::ViewId, unsigned int>*, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int>>> {
        struct pair<md::mun::ViewId, unsigned int> *__value_;
    } __end_cap_;
};

struct vector<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>>> {
    struct pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>> *_field1;
    struct pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>> *_field2;
    struct __compressed_pair<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>*, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>>>> {
        struct pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator>>>> *_field1;
    } _field3;
};

struct vector<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState>, std::__1::allocator<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState>>> {
    struct pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> *_field1;
    struct pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> *_field2;
    struct __compressed_pair<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState>*, std::__1::allocator<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState>>> {
        struct pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> *_field1;
    } _field3;
};

struct vector<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>>> {
    struct pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>> *_field1;
    struct pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>> *_field2;
    struct __compressed_pair<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>*, std::__1::allocator<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>>>> {
        struct pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld>>> *_field1;
    } _field3;
};

struct vector<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>>> {
    struct pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>> *_field1;
    struct pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>> *_field2;
    struct __compressed_pair<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>*, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>>>> {
        struct pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey>>> *_field1;
    } _field3;
};

struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> {
    struct pair<unsigned short, unsigned int> *__begin_;
    struct pair<unsigned short, unsigned int> *__end_;
    struct __compressed_pair<std::__1::pair<unsigned short, unsigned int>*, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> {
        struct pair<unsigned short, unsigned int> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> {
    struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__begin_;
    struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> {
        struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, geo::StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator>> {
    struct shared_ptr<ggl::DebugRenderer> *_field1;
    struct shared_ptr<ggl::DebugRenderer> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ggl::DebugRenderer>*, geo::StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator>> {
        struct shared_ptr<ggl::DebugRenderer> *_field1;
        struct StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> {
    struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__begin_;
    struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> {
        struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> {
    struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *__begin_;
    struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> {
        struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::Shader>, geo::StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator>> {
    struct shared_ptr<ggl::Shader> *_field1;
    struct shared_ptr<ggl::Shader> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Shader>*, geo::StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator>> {
        struct shared_ptr<ggl::Shader> *_field1;
        struct StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> {
    struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__begin_;
    struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> {
        struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> {
    struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__begin_;
    struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> {
        struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>>> {
    struct shared_ptr<ggl::VenueWall::EndCapMesh> *__begin_;
    struct shared_ptr<ggl::VenueWall::EndCapMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>>> {
        struct shared_ptr<ggl::VenueWall::EndCapMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>>> {
    struct shared_ptr<ggl::VenueWall::MeshMesh> *__begin_;
    struct shared_ptr<ggl::VenueWall::MeshMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>>> {
        struct shared_ptr<ggl::VenueWall::MeshMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
    shared_ptr_c5d816ee *__begin_;
    shared_ptr_c5d816ee *__end_;
    struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>*, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
        shared_ptr_c5d816ee *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, mdm::Allocator>> {
    shared_ptr_e9082761 *_field1;
    shared_ptr_e9082761 *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature>*, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, mdm::Allocator>> {
        shared_ptr_e9082761 *_field1;
        struct StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, mdm::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, mdm::Allocator>> {
    struct shared_ptr<md::LabelExternalRoadFeature> *_field1;
    struct shared_ptr<md::LabelExternalRoadFeature> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature>*, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, mdm::Allocator>> {
        struct shared_ptr<md::LabelExternalRoadFeature> *_field1;
        struct StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, mdm::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::LabelFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator>> {
    struct shared_ptr<md::LabelFeature> *_field1;
    struct shared_ptr<md::LabelFeature> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature>*, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator>> {
        struct shared_ptr<md::LabelFeature> *_field1;
        struct StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::NavLabel>, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator>> {
    shared_ptr_93ff9d4a *__begin_;
    shared_ptr_93ff9d4a *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::NavLabel>*, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator>> {
        shared_ptr_93ff9d4a *__value_;
        struct StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup>>> {
    struct shared_ptr<md::ObjectGroup> *_field1;
    struct shared_ptr<md::ObjectGroup> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::ObjectGroup>*, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup>>> {
        struct shared_ptr<md::ObjectGroup> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>> {
    struct shared_ptr<md::TextureAtlasPage> *_field1;
    struct shared_ptr<md::TextureAtlasPage> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::TextureAtlasPage>*, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>> {
        struct shared_ptr<md::TextureAtlasPage> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::TextureAtlasRegion>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasRegion>>> {
    struct shared_ptr<md::TextureAtlasRegion> *_field1;
    struct shared_ptr<md::TextureAtlasRegion> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::TextureAtlasRegion>*, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasRegion>>> {
        struct shared_ptr<md::TextureAtlasRegion> *_field1;
    } _field3;
};

struct vector<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>>, geo::StdAllocator<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>>, ggl::Allocator>> {
    struct unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>> *_field1;
    struct unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>>*, geo::StdAllocator<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>>, ggl::Allocator>> {
        struct unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>> *_field1;
        struct StdAllocator<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>>, ggl::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>>, geo::StdAllocator<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>>, ggl::Allocator>> {
    struct unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>> *_field1;
    struct unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>>*, geo::StdAllocator<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>>, ggl::Allocator>> {
        struct unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>> *_field1;
        struct StdAllocator<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>>, ggl::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>>, geo::StdAllocator<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>>, ggl::Allocator>> {
    struct unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>> *_field1;
    struct unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>>*, geo::StdAllocator<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>>, ggl::Allocator>> {
        struct unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>> *_field1;
        struct StdAllocator<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>>, ggl::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>, std::__1::allocator<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>>> {
    struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>> *_field1;
    struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>*, std::__1::allocator<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>>> {
        struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>> *_field1;
    } _field3;
};

struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>>;

struct vector<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>>, std::__1::allocator<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>>>> {
    struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>> *_field1;
    struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>> *_field2;
    struct __compressed_pair<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>>*, std::__1::allocator<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>>>> {
        struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage>>> *_field1;
    } _field3;
};

struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>>>> {
    struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>> *__begin_;
    struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>> *__end_;
    struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>>*, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>>>> {
        struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>> *__value_;
    } __end_cap_;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
};

struct vector<unsigned short, std::__1::allocator<unsigned short>> {
    unsigned short *_field1;
    unsigned short *_field2;
    struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short>> {
        unsigned short *_field1;
    } _field3;
};

struct weak_ptr<ggl::RunLoop::_RunLoopCallbacker> {
    struct _RunLoopCallbacker *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<md::OverlayContainer> {
    struct OverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<md::StylesheetVendor> {
    struct StylesheetVendor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

#if 0
// Names with conflicting types:
typedef struct {
    CDUnknownFunctionPointerType *_field1;
    struct AnchorManager *_field2;
    Mercator3_d8bb135c _field3;
    struct Coordinate2D<Degrees, double> _field4;
    id _field5;
} Anchor_cd32e4a8;

typedef struct {
    int _field1;
    struct shared_ptr<ggl::Device> _field2;
    struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources>> _field3;
} Device_0f0703c5;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    struct Device *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    BOOL _field6;
    float _field7;
    unsigned long long _field8;
    struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, geo::StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator>> _field9;
    struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> _field10;
    struct shared_ptr<ggl::CommonLibrary> _field11;
    struct unique_ptr<ggl::RenderResourceFences, std::__1::default_delete<ggl::RenderResourceFences>> _field12;
    struct Texture2D *_field13;
    struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>> _field14;
} Renderer_a9ae9818;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    shared_ptr_e963992e _field2;
    struct unique_ptr<md::PassList, std::__1::default_delete<md::PassList>> _field3;
    struct unique_ptr<md::FrameGraphResourceRegistry, std::__1::default_delete<md::FrameGraphResourceRegistry>> _field4;
    struct vector<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>, std::__1::allocator<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>>> _field5;
    struct linear_map<md::CommandBufferLocation, md::RenderLayer *, std::__1::equal_to<md::CommandBufferLocation>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>>, std::__1::vector<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>>>> _field6;
    struct RunLoopController *_field7;
    struct MapEngine *_field8;
    id _field9;
} Renderer_b567b6b4;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    struct _retain_ptr<_AnimationManagerRunner *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field2;
    struct RunLoopController *_field3;
    struct mutex _field4;
    struct array<std::__1::unordered_set<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>, 2> _field5;
    struct atomic<bool> _field6;
} AnimationManager_7db22f23;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    char *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned int _field7;
    unsigned long long _field8;
    BOOL _field9;
    unsigned long long _field10;
    float _field11;
    unsigned long long _field12;
    id _field13;
    int _field14;
} CDStruct_58d0ca89;

typedef struct {
    BOOL borders;
    BOOL folds;
    BOOL angles;
    float minAngle;
    float maxAngle;
} CDStruct_7a997382;

typedef struct {
    BOOL shouldZoomToFit;
    double idealCenterCoordinateDistance;
    BOOL shouldPreserveUserSpecifiedZoomLevel;
    BOOL resetAfterTracking;
} CDStruct_211b8904;

typedef struct {
    BOOL orthographic;
    double width;
    double height;
    double near;
    double far;
    double horizontalOffset;
} CDStruct_7a7719de;

typedef struct {
    BOOL _field1;
} CDStruct_b31ca263;

typedef struct {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    BOOL _field5;
} CDStruct_511c724f;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
} CDStruct_7523a67d;

typedef struct {
    unsigned int _field1;
    int _field2;
} CDStruct_1e94be47;

typedef struct {
    float *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_fae3dc92;

typedef struct {
    int *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_95bda58d;

typedef struct {
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
} CDStruct_a12fb154;

typedef struct {
    double latitude;
    double longitude;
    double altitude;
} CDStruct_071ac149;

typedef struct {
    float _a;
    unsigned int _b;
    unsigned int _g;
    unsigned int _r;
} CDStruct_58ec0031;

typedef struct {
    float x;
    float y;
    double latitude;
    double longitude;
    float yaw;
    float pitch;
} CDStruct_5dbc7bbd;

typedef struct {
    float r;
    float g;
    float b;
    float a;
} CDStruct_83984b6f;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct CDStruct_183601bc;

typedef struct {
    id _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct _NSRange _field4;
    CDStruct_183601bc *_field5;
    CDStruct_183601bc *_field6;
    unsigned long long _field7;
    unsigned long long _field8;
    struct _NSRange _field9;
    struct _NSRange _field10;
    BOOL _field11;
    struct _NSRange _field12;
    struct _NSRange _field13;
    struct _NSRange _field14[2];
    struct _NSRange _field15[2];
} CDStruct_cb3d236a;

typedef struct {
    id _field1;
    struct PolylineCoordinate _field2;
    struct PolylineCoordinate _field3;
} CDStruct_2c837fe9;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    CDStruct_183601bc *_field3;
} CDStruct_3b01f0aa;

typedef struct {
    unsigned int _field1;
    float _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    CDStruct_a12fb154 _field6;
} CDStruct_e9f6a06b;

typedef struct {
    unsigned int _field1;
    int _field2;
    int _field3;
    float _field4;
    unsigned int _field5;
    CDStruct_a12fb154 _field6;
} CDStruct_033e8ed6;

typedef struct {
    CDStruct_183601bc *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    CDStruct_183601bc *_field6;
    CDStruct_183601bc *_field7;
} CDStruct_91f75a7f;

typedef struct {
    CDStruct_58d0ca89 _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned int _field6;
    float _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
} CDStruct_5be08681;

typedef struct {
    struct {
        double x;
        double y;
    } origin;
    struct {
        double width;
        double height;
    } size;
} CDStruct_02837cd9;

typedef struct {
    CDStruct_58ec0031 _color;
    float _offsetX;
    float _offsetY;
    float _size;
    struct {
        unsigned int offsetX:1;
        unsigned int offsetY:1;
    } _has;
} CDStruct_79d0722e;

typedef struct {
    CDStruct_58ec0031 _color;
    float _width;
} CDStruct_f43f0670;

typedef struct {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
} CDStruct_5ae1f918;

typedef struct {
    CDStruct_58d0ca89 _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    int _field4;
    int _field5;
    int _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    unsigned int _field9;
    unsigned int _field10;
    union {
        struct {
            CDStruct_b2fbf00d _field1;
            CDStruct_b2fbf00d _field2;
        } _field1;
        CDStruct_83984b6f _field2;
    } _field11;
    CDStruct_183601bc *_field12;
    struct {
        unsigned short _field1[2];
        unsigned short _field2[2];
    } _field13;
    unsigned char _field14;
    BOOL _field15;
    unsigned char _field16;
    BOOL _field17;
    BOOL _field18;
    unsigned char _field19;
    BOOL _field20;
    unsigned short _field21;
    struct _NSRange _field22;
    BOOL _field23;
    unsigned int _field24;
} CDStruct_887e071c;

typedef struct {
    optional_67826ebe position;
    Matrix_6e1d3589 tangent;
    BOOL tangentValid;
} CDStruct_44038c2d;

typedef struct {
    CDStruct_887e071c _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    BOOL _field4;
    BOOL _field5;
} CDStruct_1636c0da;

typedef struct {
    CDStruct_887e071c _field1;
    CDStruct_b2fbf00d _field2;
    BOOL _field3;
    BOOL _field4;
    unsigned char _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    CDStruct_b2fbf00d _field8;
    unsigned long long _field9;
} CDStruct_bcbc66fa;

// Ambiguous groups
typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct Box<double, 2> {
    Matrix_2bdd42a3 _minimum;
    Matrix_2bdd42a3 _maximum;
} Box_3d7e3c2c;

typedef struct Box<float, 2> {
    Matrix_8746f91e _minimum;
    Matrix_8746f91e _maximum;
} Box_8bd38d92;

typedef struct CameraFrame<geo::Radians, double> {
    Coordinate3D_bc242218 _target;
    struct Unit<MeterUnitDescription, double> _distanceFromTarget;
    Unit_3d259e8a _pitch;
    Unit_3d259e8a _heading;
    Unit_3d259e8a _roll;
} CameraFrame_406dbd31;

typedef struct Color<float, 4, geo::ColorSpace::Linear> {
    struct Matrix<float, 4, 1> _field1;
} Color_b7a9e7da;

typedef struct Color<unsigned char, 4, geo::ColorSpace::Linear> {
    struct Matrix<unsigned char, 4, 1> _backing;
} Color_c5f82c4a;

typedef struct Coordinate3D<Radians, double> {
    Unit_3d259e8a latitude;
    Unit_3d259e8a longitude;
    struct Unit<MeterUnitDescription, double> altitude;
} Coordinate3D_bc242218;

typedef struct Geocentric<double> {
    double _e[3];
} Geocentric_d8fde6f2;

typedef struct Matrix<double, 2, 1> {
    double _e[2];
} Matrix_2bdd42a3;

typedef struct Matrix<double, 3, 1> {
    double _e[3];
} Matrix_6e1d3589;

typedef struct Matrix<double, 4, 4> {
    double _e[16];
} Matrix_08d701e4;

typedef struct Matrix<float, 2, 1> {
    float _e[2];
} Matrix_8746f91e;

typedef struct Matrix<float, 3, 1> {
    float _e[3];
} Matrix_811b2232;

typedef struct Matrix<int, 2, 1> {
    int _e[2];
} Matrix_443f5d51;

typedef struct Mercator2<double> {
    double _e[2];
} Mercator2_57ec32b6;

typedef struct Mercator3<double> {
    double _e[3];
} Mercator3_d8bb135c;

typedef struct MeshVendor<ggl::BuildingFacade::BuildingMesh> {
    struct vector<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>>, geo::StdAllocator<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh>>, ggl::Allocator>> _field1;
} MeshVendor_2955faa2;

typedef struct MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> {
    struct vector<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>>, geo::StdAllocator<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh>>, ggl::Allocator>> _field1;
} MeshVendor_e321e873;

typedef struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> {
    struct vector<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>>, geo::StdAllocator<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh>>, ggl::Allocator>> _field1;
} MeshVendor_7adfd6de;

typedef struct MultiRange<unsigned long> {
    struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long>>> _field1;
} MultiRange_4bdc93a8;

typedef struct Quaternion<double> {
    Matrix_6e1d3589 _imaginary;
    double _scalar;
} Quaternion_febf9140;

typedef struct Range<double> {
    double _field1;
    double _field2;
} Range_26cd5faa;

typedef struct Range<signed char> {
    char _min;
    char _max;
} Range_ee55b4bd;

typedef struct RigidTransform<double, double> {
    Matrix_6e1d3589 _translation;
    Quaternion_febf9140 _rotation;
} RigidTransform_b9386d13;

typedef struct Triangulator<float> {
    struct Triangulator<float, unsigned short> _field1;
    struct vector<unsigned short, std::__1::allocator<unsigned short>> _field2;
} Triangulator_edf345a1;

typedef struct Unit<DegreeUnitDescription, double> {
    double _value;
} Unit_57582783;

typedef struct Unit<RadianUnitDescription, double> {
    double _value;
} Unit_3d259e8a;

typedef struct View<double> {
    RigidTransform_b9386d13 _field1;
    Matrix_08d701e4 _field2;
    Matrix_08d701e4 _field3;
    Matrix_08d701e4 _field4;
    double _field5;
    double _field6;
    struct ViewSize _field7;
    int _field8;
} View_a667aa2f;

typedef struct _retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKCamera *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
} _retain_ptr_c0a21da9;

typedef struct _retain_ptr<VKLabelNavRoadLabel *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct _retain_objc _field3;
    struct _release_objc _field4;
} _retain_ptr_86da96eb;

typedef struct _retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKPolylineOverlay *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
} _retain_ptr_7ea4e41c;

typedef struct array<gm::Matrix<double, 2, 1>, 2> {
    Matrix_2bdd42a3 _field1[2];
} array_39cc276d;

typedef struct basic_ostream<char, std::__1::char_traits<char>> {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    unsigned int _field3;
    long long _field4;
    long long _field5;
    unsigned int _field6;
    unsigned int _field7;
    void *_field8;
    void *_field9;
    CDUnknownFunctionPointerType *_field10;
    int *_field11;
    unsigned long long _field12;
    unsigned long long _field13;
    long long *_field14;
    unsigned long long _field15;
    unsigned long long _field16;
    void **_field17;
    unsigned long long _field18;
    unsigned long long _field19;
    basic_ostream_374c280d *_field20;
    int _field21;
} basic_ostream_374c280d;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> __r_;
} basic_string_23d93216;

typedef struct bitset<4> {
    unsigned long long __first_;
} bitset_dc343b9a;

typedef struct function<NSString *()> {
    struct __value_func<NSString *()> {
        struct type __buf_;
        struct __base<NSString *()> *__f_;
    } __f_;
} function_2d7ab59b;

typedef struct function<bool (unsigned long long)> {
    struct __value_func<bool (unsigned long long)> {
        struct type _field1;
        struct __base<bool (unsigned long long)> *_field2;
    } _field1;
} function_5fd0b804;

typedef struct function<void ()> {
    struct __value_func<void ()> {
        struct type __buf_;
        struct __base<void ()> *__f_;
    } __f_;
} function_d3afe2e2;

typedef struct function<void (GEOExperimentConfiguration *)> {
    struct __value_func<void (GEOExperimentConfiguration *)> {
        struct type __buf_;
        struct __base<void (GEOExperimentConfiguration *)> *__f_;
    } __f_;
} function_d50775c7;

typedef struct function<void (GEOResourceManifestManager *)> {
    struct __value_func<void (GEOResourceManifestManager *)> {
        struct type __buf_;
        struct __base<void (GEOResourceManifestManager *)> *__f_;
    } __f_;
} function_288b8140;

typedef struct function<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> {
    struct __value_func<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> {
        struct type __buf_;
        struct __base<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> *__f_;
    } __f_;
} function_3dbef162;

typedef struct optional<double> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[8];
        double type;
    } _value;
} optional_76e85d3d;

typedef struct optional<float> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[4];
        float type;
    } _value;
} optional_44235073;

typedef struct optional<gdc::DebugTreeNode> {
    BOOL _field1;
    union ValueUnion {
        unsigned char _field1[96];
        struct DebugTreeNode _field2;
    } _field2;
} optional_69fa5ceb;

typedef struct optional<gdc::DebugTreeProperty> {
    BOOL _field1;
    union ValueUnion {
        unsigned char _field1[80];
        struct DebugTreeProperty _field2;
    } _field2;
} optional_7058859e;

typedef struct optional<gdc::DebugTreeValue> {
    BOOL _field1;
    union ValueUnion {
        unsigned char _field1[64];
        struct DebugTreeValue _field2;
    } _field2;
} optional_5af9047b;

typedef struct optional<gm::Matrix<double, 3, 1>> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[24];
        Matrix_6e1d3589 type;
    } _value;
} optional_67826ebe;

typedef struct optional<gss::RouteLegWhen> {
    BOOL _hasValue;
    ValueUnion_42b55164 _value;
} optional_f92fc060;

typedef struct optional<md::RoadSignOrientationResolver> {
    BOOL _field1;
    union ValueUnion {
        unsigned char _field1[24];
        struct RoadSignOrientationResolver _field2;
    } _field2;
} optional_49d759ff;

typedef struct optional<md::mun::CollectionPoint> {
    BOOL _hasValue;
    union ValueUnion {
        unsigned char data[1864];
        struct CollectionPoint type;
    } _value;
} optional_ff574c75;

typedef struct pair<void *, unsigned long> {
    void *_field1;
    unsigned long long _field2;
} pair_1503616b;

typedef struct set<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay>>, std::__1::allocator<id<VKRouteOverlay>>> {
    struct __tree<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay>>, std::__1::allocator<id<VKRouteOverlay>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<id<VKRouteOverlay>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<id<VKRouteOverlay>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} set_f5697f57;

typedef struct set<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData>>, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData>>> {
    struct __tree<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData>>, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::RouteLineData>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::RouteLineData>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} set_8caf8a88;

typedef struct shared_ptr<(anonymous namespace)::PathAnimator> {
    struct PathAnimator *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_781019ee;

typedef struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_97fa0047;

typedef struct shared_ptr<geo::Polygon2<double>> {
    struct Polygon2<double> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_fafdf979;

typedef struct shared_ptr<ggl::BitmapDataBase> {
    struct BitmapDataBase *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_fa6aa836;

typedef struct shared_ptr<ggl::MetalDevice> {
    struct MetalDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_94286ce0;

typedef struct shared_ptr<ggl::OESDevice> {
    struct OESDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2063da68;

typedef struct shared_ptr<ggl::StandardLibrary> {
    struct StandardLibrary *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_1ddd16cb;

typedef struct shared_ptr<ggl::Texture2D> {
    struct Texture2D *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_479d1306;

typedef struct shared_ptr<ggl::Texture2DAbstract> {
    struct Texture2DAbstract *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_857963ed;

typedef struct shared_ptr<grl::FontManager> {
    struct FontManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_76a6df1b;

typedef struct shared_ptr<grl::IconImage> {
    struct IconImage *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_611acf5c;

typedef struct shared_ptr<grl::IconManager> {
    struct IconManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_6d521cf7;

typedef struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> {
    struct StylesheetManager<gss::PropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_a3c46825;

typedef struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> {
    struct StylesheetManager<gss::ScenePropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c37d6e02;

typedef struct shared_ptr<gss::StylesheetQuery<gss::PropertyID>> {
    struct StylesheetQuery<gss::PropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c5d816ee;

typedef struct shared_ptr<md::Anchor> {
    struct Anchor *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2fc78ff4;

typedef struct shared_ptr<md::CircleOverlayRenderable> {
    struct CircleOverlayRenderable *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_9852d3ba;

typedef struct shared_ptr<md::DataOverrideManager> {
    struct DataOverrideManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_887a193f;

typedef struct shared_ptr<md::FeatureMarker> {
    struct FeatureMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_430519ce;

typedef struct shared_ptr<md::LabelClusterTree> {
    struct LabelClusterTree *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_e2fd4869;

typedef struct shared_ptr<md::LabelExternalPointFeature> {
    struct LabelExternalPointFeature *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e9082761;

typedef struct shared_ptr<md::LabelImageKey> {
    struct LabelImageKey *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_85e81048;

typedef struct shared_ptr<md::LabelMarker> {
    struct LabelMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2d33c5e4;

typedef struct shared_ptr<md::LabelTile> {
    struct LabelTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_702c344d;

typedef struct shared_ptr<md::NavLabel> {
    struct NavLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_93ff9d4a;

typedef struct shared_ptr<md::PolygonOverlayRenderable::Style> {
    struct Style *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e0acdecc;

typedef struct shared_ptr<md::PolylineOverlayStyle> {
    struct PolylineOverlayStyle *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e2cb55c7;

typedef struct shared_ptr<md::RealisticCommandBufferSelector> {
    struct RealisticCommandBufferSelector *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_0711ef20;

typedef struct shared_ptr<md::StandardCommandBufferSelector> {
    struct StandardCommandBufferSelector *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_64671d97;

typedef struct shared_ptr<md::StylesheetVendor> {
    struct StylesheetVendor *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_dd2d1f5e;

typedef struct shared_ptr<md::TaskContext> {
    struct TaskContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e963992e;

typedef struct shared_ptr<md::TextureManager> {
    struct TextureManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f2399894;

typedef struct shared_ptr<md::VenueBuildingFeatureMarker> {
    struct VenueBuildingFeatureMarker *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_ec62a932;

typedef struct shared_ptr<md::VenueFeatureMarker> {
    struct VenueFeatureMarker *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_c500bfa8;

typedef struct shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>>> {
    struct vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>> *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_13962faa;

typedef struct unordered_map<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<std::__1::pair<const gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>>> {
    struct __hash_table<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, gdc::LayerDataRequestKeyHash, true>, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, std::__1::equal_to<gdc::LayerDataRequestKey>, true>, std::__1::allocator<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, gdc::LayerDataRequestKeyHash, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>>, std::__1::equal_to<gdc::LayerDataRequestKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_6683d8a9;

typedef struct unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, geo::StdAllocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, mdm::Allocator>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, true>, geo::StdAllocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, mdm::Allocator>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>, mdm::Allocator>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> __value_;
            struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>, mdm::Allocator> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
} unordered_map_0cbeac3c;

typedef struct unordered_map<unsigned int, unsigned long long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long long>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long long>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_7d4f43c8;

typedef struct unordered_set<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile>>, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile>>, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator>> {
    struct __hash_table<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile>>, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile>>, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*>, geo::StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>*> __value_;
            struct StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelTile>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile>>> {
            float __value_;
        } __p3_;
    } __table_;
} unordered_set_975bb0ed;

typedef struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
    struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long>> __p2_;
        struct __compressed_pair<float, std::__1::equal_to<unsigned long long>> __p3_;
    } __table_;
} unordered_set_bb7a56cc;

typedef struct vector<Edge, std::__1::allocator<Edge>> {
    struct Edge *_field1;
    struct Edge *_field2;
    struct __compressed_pair<Edge *, std::__1::allocator<Edge>> {
        struct Edge *_field1;
    } _field3;
} vector_304c695f;

typedef struct vector<GEOFeatureStylePair, geo::StdAllocator<GEOFeatureStylePair, mdm::Allocator>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<GEOFeatureStylePair *, geo::StdAllocator<GEOFeatureStylePair, mdm::Allocator>> {
        CDStruct_183601bc *_field1;
        struct StdAllocator<GEOFeatureStylePair, mdm::Allocator> _field2;
    } _field3;
} vector_44b9b83b;

typedef struct vector<RouteJunctionInfo, geo::StdAllocator<RouteJunctionInfo, mdm::Allocator>> {
    struct RouteJunctionInfo *_field1;
    struct RouteJunctionInfo *_field2;
    struct __compressed_pair<RouteJunctionInfo *, geo::StdAllocator<RouteJunctionInfo, mdm::Allocator>> {
        struct RouteJunctionInfo *_field1;
        struct StdAllocator<RouteJunctionInfo, mdm::Allocator> _field2;
    } _field3;
} vector_397bdcab;

typedef struct vector<geo::Coordinate3D<Radians, double>, std::__1::allocator<geo::Coordinate3D<Radians, double>>> {
    Coordinate3D_bc242218 *__begin_;
    Coordinate3D_bc242218 *__end_;
    struct __compressed_pair<geo::Coordinate3D<Radians, double>*, std::__1::allocator<geo::Coordinate3D<Radians, double>>> {
        Coordinate3D_bc242218 *__value_;
    } __end_cap_;
} vector_36073df6;

typedef struct vector<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>>> {
    struct fast_shared_ptr<md::RouteLineSection, std::allocator> *__begin_;
    struct fast_shared_ptr<md::RouteLineSection, std::allocator> *__end_;
    struct __compressed_pair<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>*, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>>> {
        struct fast_shared_ptr<md::RouteLineSection, std::allocator> *__value_;
    } __end_cap_;
} vector_78427fd2;

typedef struct vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator>> {
    Matrix_2bdd42a3 *__begin_;
    Matrix_2bdd42a3 *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator>> {
        Matrix_2bdd42a3 *__value_;
        struct StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> __value_;
    } __end_cap_;
} vector_8c4749e3;

typedef struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
    Matrix_2bdd42a3 *__begin_;
    Matrix_2bdd42a3 *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
        Matrix_2bdd42a3 *__value_;
    } __end_cap_;
} vector_554e3200;

typedef struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
    Matrix_8746f91e *__begin_;
    Matrix_8746f91e *__end_;
    struct __compressed_pair<gm::Matrix<float, 2, 1>*, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
        Matrix_8746f91e *__value_;
    } __end_cap_;
} vector_d9a07fc0;

typedef struct vector<gm::Range<unsigned int>, std::__1::allocator<gm::Range<unsigned int>>> {
    struct Range<unsigned int> *_field1;
    struct Range<unsigned int> *_field2;
    struct __compressed_pair<gm::Range<unsigned int>*, std::__1::allocator<gm::Range<unsigned int>>> {
        struct Range<unsigned int> *_field1;
    } _field3;
} vector_488ed546;

typedef struct vector<md::AvoidanceRectWithPriority, geo::StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator>> {
    struct AvoidanceRectWithPriority *__begin_;
    struct AvoidanceRectWithPriority *__end_;
    struct __compressed_pair<md::AvoidanceRectWithPriority *, geo::StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator>> {
        struct AvoidanceRectWithPriority *__value_;
        struct StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator> __value_;
    } __end_cap_;
} vector_fac3c691;

typedef struct vector<md::mun::CollectionPoint, std::__1::allocator<md::mun::CollectionPoint>> {
    struct CollectionPoint *_field1;
    struct CollectionPoint *_field2;
    struct __compressed_pair<md::mun::CollectionPoint *, std::__1::allocator<md::mun::CollectionPoint>> {
        struct CollectionPoint *_field1;
    } _field3;
} vector_e91c9c3b;

typedef struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair>>> {
    struct pair<bool, GEOFeatureStylePair> *_field1;
    struct pair<bool, GEOFeatureStylePair> *_field2;
    struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair>*, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair>>> {
        struct pair<bool, GEOFeatureStylePair> *_field1;
    } _field3;
} vector_0496561e;

typedef struct vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> {
    struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__begin_;
    struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> {
        struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__value_;
    } __end_cap_;
} vector_4080291d;

typedef struct vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> {
    struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__begin_;
    struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> {
        struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__value_;
    } __end_cap_;
} vector_74364602;

typedef struct vector<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> {
    struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *__begin_;
    struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> {
        struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *__value_;
    } __end_cap_;
} vector_d473a3e0;

typedef struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> {
    struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__begin_;
    struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> {
        struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__value_;
    } __end_cap_;
} vector_8c4a3c5e;

typedef struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> {
    struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__begin_;
    struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> {
        struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__value_;
    } __end_cap_;
} vector_5b05785e;

typedef struct vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>>> {
    struct shared_ptr<ggl::VenueWall::EndCapMesh> *__begin_;
    struct shared_ptr<ggl::VenueWall::EndCapMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>>> {
        struct shared_ptr<ggl::VenueWall::EndCapMesh> *__value_;
    } __end_cap_;
} vector_da5ada59;

typedef struct vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>>> {
    struct shared_ptr<ggl::VenueWall::MeshMesh> *__begin_;
    struct shared_ptr<ggl::VenueWall::MeshMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>>> {
        struct shared_ptr<ggl::VenueWall::MeshMesh> *__value_;
    } __end_cap_;
} vector_e4fc2931;

typedef struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
    shared_ptr_c5d816ee *__begin_;
    shared_ptr_c5d816ee *__end_;
    struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>*, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
        shared_ptr_c5d816ee *__value_;
    } __end_cap_;
} vector_b346fa92;

typedef struct vector<std::__1::shared_ptr<md::NavLabel>, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator>> {
    shared_ptr_93ff9d4a *__begin_;
    shared_ptr_93ff9d4a *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::NavLabel>*, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator>> {
        shared_ptr_93ff9d4a *__value_;
        struct StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> __value_;
    } __end_cap_;
} vector_e3e87145;

typedef struct vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup>>> {
    struct shared_ptr<md::ObjectGroup> *_field1;
    struct shared_ptr<md::ObjectGroup> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::ObjectGroup>*, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup>>> {
        struct shared_ptr<md::ObjectGroup> *_field1;
    } _field3;
} vector_efd4d0ff;

typedef struct weak_ptr<ggl::RunLoop::_RunLoopCallbacker> {
    struct _RunLoopCallbacker *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_bda9c8ce;

typedef struct weak_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_96fca551;

typedef struct weak_ptr<md::OverlayContainer> {
    struct OverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_4d470b75;

#pragma mark Named Unions

#if 0
// Names with conflicting types:
typedef union {
    unsigned char data[1];
    unsigned char type;
} ValueUnion_42b55164;

#endif

