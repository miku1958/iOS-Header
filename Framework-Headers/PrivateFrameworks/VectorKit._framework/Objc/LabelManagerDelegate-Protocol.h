//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <VectorKit/NSObject-Protocol.h>

@protocol LabelManagerDelegate <NSObject>
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}@@@QCqCBBBBBBBBBBBBBBBBBBB{atomic<bool>=AB}BBBBBBBBBBBBB{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}BBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<float, 2, 1>=[2f]}fddddddf{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}{Matrix<float, 2, 1>=[2f]}I[5d]di{vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}^{shared_ptr<md::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}}}{set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >={__tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > >=Q}}}{LabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, md::LabelFeaturePoolTileInfo, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, md::LabelFeaturePoolTileInfo> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{atomic<bool>=AB}{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}QQ}{LabelFeatureStyler=^{LabelManager}{atomic<unsigned int>=AI}II}{LabelPool=Q{map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> >=Q}}}QQ^{LabelCustomFeatureSupport}IB}{vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}^{shared_ptr<md::Label>}{__compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}}}{vector<md::Label *, std::__1::allocator<md::Label *> >=^^{Label}^^{Label}{__compressed_pair<md::Label **, std::__1::allocator<md::Label *> >=^^{Label}}}{CocoaTypesetter=^^?}{FontAtlas=^^?i{vector<std::__1::shared_ptr<md::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > >=^{shared_ptr<md::FontAtlasPage>}^{shared_ptr<md::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<md::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > >=^{shared_ptr<md::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}B[3{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<md::FontAtlasCell *, std::__1::allocator<md::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<md::FontAtlasCell **, std::__1::allocator<md::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}}{LabelMesh=^^?{vector<md::IconLabelPart *, std::__1::allocator<md::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<md::IconLabelPart **, std::__1::allocator<md::IconLabelPart *> >=^^{IconLabelPart}}}{vector<md::TextLabelPart *, std::__1::allocator<md::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<md::TextLabelPart **, std::__1::allocator<md::TextLabelPart *> >=^^{TextLabelPart}}}{vector<md::LabelExternalIcon *, std::__1::allocator<md::LabelExternalIcon *> >=^^{LabelExternalIcon}^^{LabelExternalIcon}{__compressed_pair<md::LabelExternalIcon **, std::__1::allocator<md::LabelExternalIcon *> >=^^{LabelExternalIcon}}}^{FontAtlas}BQ{vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> >=^{ConstantDataTyped<ggl::Glyph::View>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::GlyphWithNormalHalo::DefaultPipelineState>=^{DefaultPipelineState}^{__shared_weak_count}}{shared_ptr<ggl::GlyphWithOuterHalo::DefaultPipelineState>=^{DefaultPipelineState}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconPipelineState>=^{IconPipelineState}^{__shared_weak_count}}{DefaultMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> >=^{ConstantDataTyped<ggl::Icon::View>}^{__shared_weak_count}}{shared_ptr<ggl::IconShader>=^{IconShader}^{__shared_weak_count}}{IconMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q{LabelMeshRenderStateSet=^{RenderState}^{RenderState}^{RenderState}^{RenderState}^{RenderState}}{LabelMeshRenderStateSet=^{RenderState}^{RenderState}^{RenderState}^{RenderState}^{RenderState}}}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBCC{DisplayStyle=CCCCC}f{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> >=Q}}}{map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> >=Q}}}{shared_ptr<md::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<const md::GenericShieldStyleInfo>=^{GenericShieldStyleInfo}^{__shared_weak_count}}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{LabelImageLoader={list<md::LabelImageLoader::CachedItem, std::__1::allocator<md::LabelImageLoader::CachedItem> >={__list_node_base<md::LabelImageLoader::CachedItem, void *>=^{__list_node_base<md::LabelImageLoader::CachedItem, void *>}^{__list_node_base<md::LabelImageLoader::CachedItem, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::LabelImageLoader::CachedItem, void *> > >=Q}}{unordered_map<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *>, md::LabelImageLoader::LabelImageCacheHash, md::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > >={__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true> >=f}}}^{LabelManager}{set<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > >={__tree<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelIcon> > >=Q}}}{shared_ptr<md::weak_interface_ptr<md::LabelImageLoader> >=^{weak_interface_ptr<md::LabelImageLoader>}^{__shared_weak_count}}@IIIIB}{LabelCollider=^{LabelManager}I{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<md::LabelCollider::GridNode, std::__1::allocator<md::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<md::LabelCollider::GridNode *, std::__1::allocator<md::LabelCollider::GridNode> >=^{GridNode}}}IB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<md::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<md::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> >=^{ConstantDataTyped<ggl::OcclusionLine::View>}^{__shared_weak_count}}{RenderState=^^?*^^?^{ResourceManager}^{RenderResource}{DepthState=iiiff}{StencilState=iiiiiIII}{RasterizerState=iiI{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}}B}{unique_ptr<ggl::OcclusionLine::OcclusionLinePipelineSetup, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> >={__compressed_pair<ggl::OcclusionLine::OcclusionLinePipelineSetup *, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> >=^{OcclusionLinePipelineSetup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<md::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> >={__compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}^{shared_ptr<md::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}^{shared_ptr<md::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> >=Q}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<md::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}IddQBfCIIIdf{shared_ptr<md::Label>=^{Label}^{__shared_weak_count}}{shared_ptr<md::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqCBBBBBBBBii{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}{SelectedLabelState={Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}B}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}^{shared_ptr<md::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}^{shared_ptr<md::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}}}B}{LabelCustomFeatureSupport=^^?^{LabelManager}{shared_ptr<md::weak_interface_ptr<md::LabelMapTileObserver> >=^{weak_interface_ptr<md::LabelMapTileObserver>}^{__shared_weak_count}}{map<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider, std::__1::less<id<VKCustomFeatureDataSource> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > >={__tree<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true> >=Q}}}{vector<md::LabelMapTile *, std::__1::allocator<md::LabelMapTile *> >=^^{LabelMapTile}^^{LabelMapTile}{__compressed_pair<md::LabelMapTile **, std::__1::allocator<md::LabelMapTile *> >=^^{LabelMapTile}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}II}B{vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}^{shared_ptr<md::NavLabel>}{__compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}B}16B24, name: labelManager:pendingArtworkIsReady:
-     // Error parsing type: v32@0:8^{LabelManager=^^?{weak_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}@@@QCqCBBBBBBBBBBBBBBBBBBB{atomic<bool>=AB}BBBBBBBBBBBBB{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}BBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<float, 2, 1>=[2f]}fddddddf{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}{Matrix<float, 2, 1>=[2f]}I[5d]di{vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}^{shared_ptr<md::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}}}{set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >={__tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > >=Q}}}{LabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, md::LabelFeaturePoolTileInfo, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, md::LabelFeaturePoolTileInfo> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{atomic<bool>=AB}{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}QQ}{LabelFeatureStyler=^{LabelManager}{atomic<unsigned int>=AI}II}{LabelPool=Q{map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> >=Q}}}QQ^{LabelCustomFeatureSupport}IB}{vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}^{shared_ptr<md::Label>}{__compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}}}{vector<md::Label *, std::__1::allocator<md::Label *> >=^^{Label}^^{Label}{__compressed_pair<md::Label **, std::__1::allocator<md::Label *> >=^^{Label}}}{CocoaTypesetter=^^?}{FontAtlas=^^?i{vector<std::__1::shared_ptr<md::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > >=^{shared_ptr<md::FontAtlasPage>}^{shared_ptr<md::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<md::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > >=^{shared_ptr<md::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}B[3{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<md::FontAtlasCell *, std::__1::allocator<md::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<md::FontAtlasCell **, std::__1::allocator<md::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}}{LabelMesh=^^?{vector<md::IconLabelPart *, std::__1::allocator<md::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<md::IconLabelPart **, std::__1::allocator<md::IconLabelPart *> >=^^{IconLabelPart}}}{vector<md::TextLabelPart *, std::__1::allocator<md::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<md::TextLabelPart **, std::__1::allocator<md::TextLabelPart *> >=^^{TextLabelPart}}}{vector<md::LabelExternalIcon *, std::__1::allocator<md::LabelExternalIcon *> >=^^{LabelExternalIcon}^^{LabelExternalIcon}{__compressed_pair<md::LabelExternalIcon **, std::__1::allocator<md::LabelExternalIcon *> >=^^{LabelExternalIcon}}}^{FontAtlas}BQ{vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> >=^{ConstantDataTyped<ggl::Glyph::View>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::GlyphWithNormalHalo::DefaultPipelineState>=^{DefaultPipelineState}^{__shared_weak_count}}{shared_ptr<ggl::GlyphWithOuterHalo::DefaultPipelineState>=^{DefaultPipelineState}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconPipelineState>=^{IconPipelineState}^{__shared_weak_count}}{DefaultMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> >=^{ConstantDataTyped<ggl::Icon::View>}^{__shared_weak_count}}{shared_ptr<ggl::IconShader>=^{IconShader}^{__shared_weak_count}}{IconMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q{LabelMeshRenderStateSet=^{RenderState}^{RenderState}^{RenderState}^{RenderState}^{RenderState}}{LabelMeshRenderStateSet=^{RenderState}^{RenderState}^{RenderState}^{RenderState}^{RenderState}}}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBCC{DisplayStyle=CCCCC}f{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> >=Q}}}{map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> >=Q}}}{shared_ptr<md::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<const md::GenericShieldStyleInfo>=^{GenericShieldStyleInfo}^{__shared_weak_count}}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{LabelImageLoader={list<md::LabelImageLoader::CachedItem, std::__1::allocator<md::LabelImageLoader::CachedItem> >={__list_node_base<md::LabelImageLoader::CachedItem, void *>=^{__list_node_base<md::LabelImageLoader::CachedItem, void *>}^{__list_node_base<md::LabelImageLoader::CachedItem, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::LabelImageLoader::CachedItem, void *> > >=Q}}{unordered_map<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *>, md::LabelImageLoader::LabelImageCacheHash, md::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > >={__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true> >=f}}}^{LabelManager}{set<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > >={__tree<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelIcon> > >=Q}}}{shared_ptr<md::weak_interface_ptr<md::LabelImageLoader> >=^{weak_interface_ptr<md::LabelImageLoader>}^{__shared_weak_count}}@IIIIB}{LabelCollider=^{LabelManager}I{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<md::LabelCollider::GridNode, std::__1::allocator<md::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<md::LabelCollider::GridNode *, std::__1::allocator<md::LabelCollider::GridNode> >=^{GridNode}}}IB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<md::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<md::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> >=^{ConstantDataTyped<ggl::OcclusionLine::View>}^{__shared_weak_count}}{RenderState=^^?*^^?^{ResourceManager}^{RenderResource}{DepthState=iiiff}{StencilState=iiiiiIII}{RasterizerState=iiI{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}}B}{unique_ptr<ggl::OcclusionLine::OcclusionLinePipelineSetup, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> >={__compressed_pair<ggl::OcclusionLine::OcclusionLinePipelineSetup *, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> >=^{OcclusionLinePipelineSetup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<md::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> >={__compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}^{shared_ptr<md::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}^{shared_ptr<md::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> >=Q}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<md::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}IddQBfCIIIdf{shared_ptr<md::Label>=^{Label}^{__shared_weak_count}}{shared_ptr<md::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqCBBBBBBBBii{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}{SelectedLabelState={Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}B}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}^{shared_ptr<md::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}^{shared_ptr<md::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}}}B}{LabelCustomFeatureSupport=^^?^{LabelManager}{shared_ptr<md::weak_interface_ptr<md::LabelMapTileObserver> >=^{weak_interface_ptr<md::LabelMapTileObserver>}^{__shared_weak_count}}{map<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider, std::__1::less<id<VKCustomFeatureDataSource> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > >={__tree<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true> >=Q}}}{vector<md::LabelMapTile *, std::__1::allocator<md::LabelMapTile *> >=^^{LabelMapTile}^^{LabelMapTile}{__compressed_pair<md::LabelMapTile **, std::__1::allocator<md::LabelMapTile *> >=^^{LabelMapTile}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}II}B{vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}^{shared_ptr<md::NavLabel>}{__compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}B}16r^{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}24, name: labelManager:selectedLabelMarkerDidChangeState:
-     // Error parsing type: v32@0:8^{LabelManager=^^?{weak_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}@@@QCqCBBBBBBBBBBBBBBBBBBB{atomic<bool>=AB}BBBBBBBBBBBBB{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}BBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<float, 2, 1>=[2f]}fddddddf{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}{Matrix<float, 2, 1>=[2f]}I[5d]di{vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}^{shared_ptr<md::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}}}{set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >={__tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > >=Q}}}{LabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, md::LabelFeaturePoolTileInfo, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, md::LabelFeaturePoolTileInfo> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{atomic<bool>=AB}{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}QQ}{LabelFeatureStyler=^{LabelManager}{atomic<unsigned int>=AI}II}{LabelPool=Q{map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> >=Q}}}QQ^{LabelCustomFeatureSupport}IB}{vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}^{shared_ptr<md::Label>}{__compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}}}{vector<md::Label *, std::__1::allocator<md::Label *> >=^^{Label}^^{Label}{__compressed_pair<md::Label **, std::__1::allocator<md::Label *> >=^^{Label}}}{CocoaTypesetter=^^?}{FontAtlas=^^?i{vector<std::__1::shared_ptr<md::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > >=^{shared_ptr<md::FontAtlasPage>}^{shared_ptr<md::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<md::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > >=^{shared_ptr<md::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}B[3{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<md::FontAtlasCell *, std::__1::allocator<md::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<md::FontAtlasCell **, std::__1::allocator<md::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}}{LabelMesh=^^?{vector<md::IconLabelPart *, std::__1::allocator<md::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<md::IconLabelPart **, std::__1::allocator<md::IconLabelPart *> >=^^{IconLabelPart}}}{vector<md::TextLabelPart *, std::__1::allocator<md::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<md::TextLabelPart **, std::__1::allocator<md::TextLabelPart *> >=^^{TextLabelPart}}}{vector<md::LabelExternalIcon *, std::__1::allocator<md::LabelExternalIcon *> >=^^{LabelExternalIcon}^^{LabelExternalIcon}{__compressed_pair<md::LabelExternalIcon **, std::__1::allocator<md::LabelExternalIcon *> >=^^{LabelExternalIcon}}}^{FontAtlas}BQ{vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> >=^{ConstantDataTyped<ggl::Glyph::View>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::GlyphWithNormalHalo::DefaultPipelineState>=^{DefaultPipelineState}^{__shared_weak_count}}{shared_ptr<ggl::GlyphWithOuterHalo::DefaultPipelineState>=^{DefaultPipelineState}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconPipelineState>=^{IconPipelineState}^{__shared_weak_count}}{DefaultMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> >=^{ConstantDataTyped<ggl::Icon::View>}^{__shared_weak_count}}{shared_ptr<ggl::IconShader>=^{IconShader}^{__shared_weak_count}}{IconMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q{LabelMeshRenderStateSet=^{RenderState}^{RenderState}^{RenderState}^{RenderState}^{RenderState}}{LabelMeshRenderStateSet=^{RenderState}^{RenderState}^{RenderState}^{RenderState}^{RenderState}}}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBCC{DisplayStyle=CCCCC}f{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> >=Q}}}{map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> >=Q}}}{shared_ptr<md::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<const md::GenericShieldStyleInfo>=^{GenericShieldStyleInfo}^{__shared_weak_count}}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{LabelImageLoader={list<md::LabelImageLoader::CachedItem, std::__1::allocator<md::LabelImageLoader::CachedItem> >={__list_node_base<md::LabelImageLoader::CachedItem, void *>=^{__list_node_base<md::LabelImageLoader::CachedItem, void *>}^{__list_node_base<md::LabelImageLoader::CachedItem, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::LabelImageLoader::CachedItem, void *> > >=Q}}{unordered_map<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *>, md::LabelImageLoader::LabelImageCacheHash, md::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > >={__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true> >=f}}}^{LabelManager}{set<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > >={__tree<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelIcon> > >=Q}}}{shared_ptr<md::weak_interface_ptr<md::LabelImageLoader> >=^{weak_interface_ptr<md::LabelImageLoader>}^{__shared_weak_count}}@IIIIB}{LabelCollider=^{LabelManager}I{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<md::LabelCollider::GridNode, std::__1::allocator<md::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<md::LabelCollider::GridNode *, std::__1::allocator<md::LabelCollider::GridNode> >=^{GridNode}}}IB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<md::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<md::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> >=^{ConstantDataTyped<ggl::OcclusionLine::View>}^{__shared_weak_count}}{RenderState=^^?*^^?^{ResourceManager}^{RenderResource}{DepthState=iiiff}{StencilState=iiiiiIII}{RasterizerState=iiI{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}}B}{unique_ptr<ggl::OcclusionLine::OcclusionLinePipelineSetup, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> >={__compressed_pair<ggl::OcclusionLine::OcclusionLinePipelineSetup *, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> >=^{OcclusionLinePipelineSetup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<md::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> >={__compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}^{shared_ptr<md::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}^{shared_ptr<md::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> >=Q}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<md::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}IddQBfCIIIdf{shared_ptr<md::Label>=^{Label}^{__shared_weak_count}}{shared_ptr<md::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqCBBBBBBBBii{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}{SelectedLabelState={Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}B}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}^{shared_ptr<md::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}^{shared_ptr<md::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}}}B}{LabelCustomFeatureSupport=^^?^{LabelManager}{shared_ptr<md::weak_interface_ptr<md::LabelMapTileObserver> >=^{weak_interface_ptr<md::LabelMapTileObserver>}^{__shared_weak_count}}{map<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider, std::__1::less<id<VKCustomFeatureDataSource> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > >={__tree<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true> >=Q}}}{vector<md::LabelMapTile *, std::__1::allocator<md::LabelMapTile *> >=^^{LabelMapTile}^^{LabelMapTile}{__compressed_pair<md::LabelMapTile **, std::__1::allocator<md::LabelMapTile *> >=^^{LabelMapTile}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}II}B{vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}^{shared_ptr<md::NavLabel>}{__compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}B}16r^{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}24, name: labelManager:selectedLabelMarkerWillDisappear:
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}@@@QCqCBBBBBBBBBBBBBBBBBBB{atomic<bool>=AB}BBBBBBBBBBBBB{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}BBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<float, 2, 1>=[2f]}fddddddf{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}{Matrix<float, 2, 1>=[2f]}I[5d]di{vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}^{shared_ptr<md::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}}}{set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >={__tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > >=Q}}}{LabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, md::LabelFeaturePoolTileInfo, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, md::LabelFeaturePoolTileInfo> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{atomic<bool>=AB}{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}QQ}{LabelFeatureStyler=^{LabelManager}{atomic<unsigned int>=AI}II}{LabelPool=Q{map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> >=Q}}}QQ^{LabelCustomFeatureSupport}IB}{vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}^{shared_ptr<md::Label>}{__compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}}}{vector<md::Label *, std::__1::allocator<md::Label *> >=^^{Label}^^{Label}{__compressed_pair<md::Label **, std::__1::allocator<md::Label *> >=^^{Label}}}{CocoaTypesetter=^^?}{FontAtlas=^^?i{vector<std::__1::shared_ptr<md::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > >=^{shared_ptr<md::FontAtlasPage>}^{shared_ptr<md::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<md::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > >=^{shared_ptr<md::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}B[3{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<md::FontAtlasCell *, std::__1::allocator<md::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<md::FontAtlasCell **, std::__1::allocator<md::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}}{LabelMesh=^^?{vector<md::IconLabelPart *, std::__1::allocator<md::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<md::IconLabelPart **, std::__1::allocator<md::IconLabelPart *> >=^^{IconLabelPart}}}{vector<md::TextLabelPart *, std::__1::allocator<md::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<md::TextLabelPart **, std::__1::allocator<md::TextLabelPart *> >=^^{TextLabelPart}}}{vector<md::LabelExternalIcon *, std::__1::allocator<md::LabelExternalIcon *> >=^^{LabelExternalIcon}^^{LabelExternalIcon}{__compressed_pair<md::LabelExternalIcon **, std::__1::allocator<md::LabelExternalIcon *> >=^^{LabelExternalIcon}}}^{FontAtlas}BQ{vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> >=^{ConstantDataTyped<ggl::Glyph::View>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::GlyphWithNormalHalo::DefaultPipelineState>=^{DefaultPipelineState}^{__shared_weak_count}}{shared_ptr<ggl::GlyphWithOuterHalo::DefaultPipelineState>=^{DefaultPipelineState}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconPipelineState>=^{IconPipelineState}^{__shared_weak_count}}{DefaultMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> >=^{ConstantDataTyped<ggl::Icon::View>}^{__shared_weak_count}}{shared_ptr<ggl::IconShader>=^{IconShader}^{__shared_weak_count}}{IconMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q{LabelMeshRenderStateSet=^{RenderState}^{RenderState}^{RenderState}^{RenderState}^{RenderState}}{LabelMeshRenderStateSet=^{RenderState}^{RenderState}^{RenderState}^{RenderState}^{RenderState}}}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBCC{DisplayStyle=CCCCC}f{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> >=Q}}}{map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> >=Q}}}{shared_ptr<md::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<const md::GenericShieldStyleInfo>=^{GenericShieldStyleInfo}^{__shared_weak_count}}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{LabelImageLoader={list<md::LabelImageLoader::CachedItem, std::__1::allocator<md::LabelImageLoader::CachedItem> >={__list_node_base<md::LabelImageLoader::CachedItem, void *>=^{__list_node_base<md::LabelImageLoader::CachedItem, void *>}^{__list_node_base<md::LabelImageLoader::CachedItem, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::LabelImageLoader::CachedItem, void *> > >=Q}}{unordered_map<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *>, md::LabelImageLoader::LabelImageCacheHash, md::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > >={__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true> >=f}}}^{LabelManager}{set<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > >={__tree<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelIcon> > >=Q}}}{shared_ptr<md::weak_interface_ptr<md::LabelImageLoader> >=^{weak_interface_ptr<md::LabelImageLoader>}^{__shared_weak_count}}@IIIIB}{LabelCollider=^{LabelManager}I{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<md::LabelCollider::GridNode, std::__1::allocator<md::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<md::LabelCollider::GridNode *, std::__1::allocator<md::LabelCollider::GridNode> >=^{GridNode}}}IB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<md::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<md::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> >=^{ConstantDataTyped<ggl::OcclusionLine::View>}^{__shared_weak_count}}{RenderState=^^?*^^?^{ResourceManager}^{RenderResource}{DepthState=iiiff}{StencilState=iiiiiIII}{RasterizerState=iiI{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}}B}{unique_ptr<ggl::OcclusionLine::OcclusionLinePipelineSetup, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> >={__compressed_pair<ggl::OcclusionLine::OcclusionLinePipelineSetup *, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> >=^{OcclusionLinePipelineSetup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<md::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> >={__compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}^{shared_ptr<md::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}^{shared_ptr<md::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> >=Q}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<md::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}IddQBfCIIIdf{shared_ptr<md::Label>=^{Label}^{__shared_weak_count}}{shared_ptr<md::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqCBBBBBBBBii{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}{SelectedLabelState={Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}B}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}^{shared_ptr<md::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}^{shared_ptr<md::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}}}B}{LabelCustomFeatureSupport=^^?^{LabelManager}{shared_ptr<md::weak_interface_ptr<md::LabelMapTileObserver> >=^{weak_interface_ptr<md::LabelMapTileObserver>}^{__shared_weak_count}}{map<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider, std::__1::less<id<VKCustomFeatureDataSource> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > >={__tree<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true> >=Q}}}{vector<md::LabelMapTile *, std::__1::allocator<md::LabelMapTile *> >=^^{LabelMapTile}^^{LabelMapTile}{__compressed_pair<md::LabelMapTile **, std::__1::allocator<md::LabelMapTile *> >=^^{LabelMapTile}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}II}B{vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}^{shared_ptr<md::NavLabel>}{__compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}B}16B24, name: labelManager:setNeedsDisplay:
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}@@@QCqCBBBBBBBBBBBBBBBBBBB{atomic<bool>=AB}BBBBBBBBBBBBB{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}BBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<float, 2, 1>=[2f]}fddddddf{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}{Matrix<float, 2, 1>=[2f]}I[5d]di{vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}^{shared_ptr<md::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}}}{set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >={__tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > >=Q}}}{LabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, md::LabelFeaturePoolTileInfo, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, md::LabelFeaturePoolTileInfo> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{atomic<bool>=AB}{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}QQ}{LabelFeatureStyler=^{LabelManager}{atomic<unsigned int>=AI}II}{LabelPool=Q{map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> >=Q}}}QQ^{LabelCustomFeatureSupport}IB}{vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}^{shared_ptr<md::Label>}{__compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}}}{vector<md::Label *, std::__1::allocator<md::Label *> >=^^{Label}^^{Label}{__compressed_pair<md::Label **, std::__1::allocator<md::Label *> >=^^{Label}}}{CocoaTypesetter=^^?}{FontAtlas=^^?i{vector<std::__1::shared_ptr<md::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > >=^{shared_ptr<md::FontAtlasPage>}^{shared_ptr<md::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<md::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > >=^{shared_ptr<md::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}B[3{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<md::FontAtlasCell *, std::__1::allocator<md::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<md::FontAtlasCell **, std::__1::allocator<md::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}}{LabelMesh=^^?{vector<md::IconLabelPart *, std::__1::allocator<md::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<md::IconLabelPart **, std::__1::allocator<md::IconLabelPart *> >=^^{IconLabelPart}}}{vector<md::TextLabelPart *, std::__1::allocator<md::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<md::TextLabelPart **, std::__1::allocator<md::TextLabelPart *> >=^^{TextLabelPart}}}{vector<md::LabelExternalIcon *, std::__1::allocator<md::LabelExternalIcon *> >=^^{LabelExternalIcon}^^{LabelExternalIcon}{__compressed_pair<md::LabelExternalIcon **, std::__1::allocator<md::LabelExternalIcon *> >=^^{LabelExternalIcon}}}^{FontAtlas}BQ{vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> >=^{ConstantDataTyped<ggl::Glyph::View>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::GlyphWithNormalHalo::DefaultPipelineState>=^{DefaultPipelineState}^{__shared_weak_count}}{shared_ptr<ggl::GlyphWithOuterHalo::DefaultPipelineState>=^{DefaultPipelineState}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconPipelineState>=^{IconPipelineState}^{__shared_weak_count}}{DefaultMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> >=^{ConstantDataTyped<ggl::Icon::View>}^{__shared_weak_count}}{shared_ptr<ggl::IconShader>=^{IconShader}^{__shared_weak_count}}{IconMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q{LabelMeshRenderStateSet=^{RenderState}^{RenderState}^{RenderState}^{RenderState}^{RenderState}}{LabelMeshRenderStateSet=^{RenderState}^{RenderState}^{RenderState}^{RenderState}^{RenderState}}}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBCC{DisplayStyle=CCCCC}f{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> >=Q}}}{map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> >=Q}}}{shared_ptr<md::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<const md::GenericShieldStyleInfo>=^{GenericShieldStyleInfo}^{__shared_weak_count}}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{LabelImageLoader={list<md::LabelImageLoader::CachedItem, std::__1::allocator<md::LabelImageLoader::CachedItem> >={__list_node_base<md::LabelImageLoader::CachedItem, void *>=^{__list_node_base<md::LabelImageLoader::CachedItem, void *>}^{__list_node_base<md::LabelImageLoader::CachedItem, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::LabelImageLoader::CachedItem, void *> > >=Q}}{unordered_map<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *>, md::LabelImageLoader::LabelImageCacheHash, md::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > >={__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true> >=f}}}^{LabelManager}{set<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > >={__tree<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelIcon> > >=Q}}}{shared_ptr<md::weak_interface_ptr<md::LabelImageLoader> >=^{weak_interface_ptr<md::LabelImageLoader>}^{__shared_weak_count}}@IIIIB}{LabelCollider=^{LabelManager}I{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<md::LabelCollider::GridNode, std::__1::allocator<md::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<md::LabelCollider::GridNode *, std::__1::allocator<md::LabelCollider::GridNode> >=^{GridNode}}}IB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<md::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<md::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> >=^{ConstantDataTyped<ggl::OcclusionLine::View>}^{__shared_weak_count}}{RenderState=^^?*^^?^{ResourceManager}^{RenderResource}{DepthState=iiiff}{StencilState=iiiiiIII}{RasterizerState=iiI{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}}B}{unique_ptr<ggl::OcclusionLine::OcclusionLinePipelineSetup, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> >={__compressed_pair<ggl::OcclusionLine::OcclusionLinePipelineSetup *, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> >=^{OcclusionLinePipelineSetup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<md::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> >={__compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}^{shared_ptr<md::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}^{shared_ptr<md::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> >=Q}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<md::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}IddQBfCIIIdf{shared_ptr<md::Label>=^{Label}^{__shared_weak_count}}{shared_ptr<md::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqCBBBBBBBBii{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}{SelectedLabelState={Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}B}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}^{shared_ptr<md::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}^{shared_ptr<md::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}}}B}{LabelCustomFeatureSupport=^^?^{LabelManager}{shared_ptr<md::weak_interface_ptr<md::LabelMapTileObserver> >=^{weak_interface_ptr<md::LabelMapTileObserver>}^{__shared_weak_count}}{map<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider, std::__1::less<id<VKCustomFeatureDataSource> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > >={__tree<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true> >=Q}}}{vector<md::LabelMapTile *, std::__1::allocator<md::LabelMapTile *> >=^^{LabelMapTile}^^{LabelMapTile}{__compressed_pair<md::LabelMapTile **, std::__1::allocator<md::LabelMapTile *> >=^^{LabelMapTile}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}II}B{vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}^{shared_ptr<md::NavLabel>}{__compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}B}16B24, name: labelManager:setNeedsLayout:
-     // Error parsing type: v24@0:8^{LabelManager=^^?{weak_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}@@@QCqCBBBBBBBBBBBBBBBBBBB{atomic<bool>=AB}BBBBBBBBBBBBB{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}BBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<float, 2, 1>=[2f]}fddddddf{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}{Matrix<float, 2, 1>=[2f]}I[5d]di{vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}^{shared_ptr<md::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}}}{set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >={__tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > >=Q}}}{LabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLinksLabelFeature, GEOTransitLink, geo::_retain_ptr<GEOTransitLink *, geo::_retain_GEOTransitLink, geo::_release_GEOTransitLink, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, md::LabelFeaturePoolTileInfo, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, md::LabelFeaturePoolTileInfo> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, md::LabelFeaturePoolTileInfo>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{atomic<bool>=AB}{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}QQ}{LabelFeatureStyler=^{LabelManager}{atomic<unsigned int>=AI}II}{LabelPool=Q{map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::weak_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label>, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, md::LabelIdentifier>, std::__1::shared_ptr<md::Label> >, std::__1::less<std::__1::pair<unsigned long long, md::LabelIdentifier> >, true> >=Q}}}QQ^{LabelCustomFeatureSupport}IB}{vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}^{shared_ptr<md::Label>}{__compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}}}{vector<md::Label *, std::__1::allocator<md::Label *> >=^^{Label}^^{Label}{__compressed_pair<md::Label **, std::__1::allocator<md::Label *> >=^^{Label}}}{CocoaTypesetter=^^?}{FontAtlas=^^?i{vector<std::__1::shared_ptr<md::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > >=^{shared_ptr<md::FontAtlasPage>}^{shared_ptr<md::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<md::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::FontAtlasPage> > >=^{shared_ptr<md::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}B[3{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<md::FontAtlasCell *, std::__1::allocator<md::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<md::FontAtlasCell **, std::__1::allocator<md::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}}{LabelMesh=^^?{vector<md::IconLabelPart *, std::__1::allocator<md::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<md::IconLabelPart **, std::__1::allocator<md::IconLabelPart *> >=^^{IconLabelPart}}}{vector<md::TextLabelPart *, std::__1::allocator<md::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<md::TextLabelPart **, std::__1::allocator<md::TextLabelPart *> >=^^{TextLabelPart}}}{vector<md::LabelExternalIcon *, std::__1::allocator<md::LabelExternalIcon *> >=^^{LabelExternalIcon}^^{LabelExternalIcon}{__compressed_pair<md::LabelExternalIcon **, std::__1::allocator<md::LabelExternalIcon *> >=^^{LabelExternalIcon}}}^{FontAtlas}BQ{vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<md::LabelMeshBase::BufferRange, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<md::LabelMeshBase::BufferRange *, std::__1::allocator<md::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{vector<std::__1::shared_ptr<ggl::PipelineSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}^{shared_ptr<ggl::PipelineSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::PipelineSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PipelineSetup> > >=^{shared_ptr<ggl::PipelineSetup>}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::View> >=^{ConstantDataTyped<ggl::Glyph::View>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::ConstantDataTyped<ggl::Glyph::Channel> >=^{ConstantDataTyped<ggl::Glyph::Channel>}^{__shared_weak_count}}{shared_ptr<ggl::GlyphWithNormalHalo::DefaultPipelineState>=^{DefaultPipelineState}^{__shared_weak_count}}{shared_ptr<ggl::GlyphWithOuterHalo::DefaultPipelineState>=^{DefaultPipelineState}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconPipelineState>=^{IconPipelineState}^{__shared_weak_count}}{DefaultMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::ConstantDataTyped<ggl::Icon::View> >=^{ConstantDataTyped<ggl::Icon::View>}^{__shared_weak_count}}{shared_ptr<ggl::IconShader>=^{IconShader}^{__shared_weak_count}}{IconMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q{LabelMeshRenderStateSet=^{RenderState}^{RenderState}^{RenderState}^{RenderState}^{RenderState}}{LabelMeshRenderStateSet=^{RenderState}^{RenderState}^{RenderState}^{RenderState}^{RenderState}}}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBCC{DisplayStyle=CCCCC}f{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> >=Q}}}{map<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle>, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::__value_type<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::shared_ptr<md::LabelStyle> >, std::__1::less<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > >, true> >=Q}}}{shared_ptr<md::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<const md::GenericShieldStyleInfo>=^{GenericShieldStyleInfo}^{__shared_weak_count}}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{LabelImageLoader={list<md::LabelImageLoader::CachedItem, std::__1::allocator<md::LabelImageLoader::CachedItem> >={__list_node_base<md::LabelImageLoader::CachedItem, void *>=^{__list_node_base<md::LabelImageLoader::CachedItem, void *>}^{__list_node_base<md::LabelImageLoader::CachedItem, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::LabelImageLoader::CachedItem, void *> > >=Q}}{unordered_map<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *>, md::LabelImageLoader::LabelImageCacheHash, md::LabelImageLoader::LabelImageCacheEq, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > >={__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__hash_value_type<std::__1::shared_ptr<md::LabelImageKey>, std::__1::__list_iterator<md::LabelImageLoader::CachedItem, void *> >, md::LabelImageLoader::LabelImageCacheEq, true> >=f}}}^{LabelManager}{set<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > >={__tree<std::__1::shared_ptr<md::LabelIcon>, std::__1::less<std::__1::shared_ptr<md::LabelIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelIcon> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelIcon>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelIcon> > >=Q}}}{shared_ptr<md::weak_interface_ptr<md::LabelImageLoader> >=^{weak_interface_ptr<md::LabelImageLoader>}^{__shared_weak_count}}@IIIIB}{LabelCollider=^{LabelManager}I{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<md::LabelCollider::GridNode, std::__1::allocator<md::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<md::LabelCollider::GridNode *, std::__1::allocator<md::LabelCollider::GridNode> >=^{GridNode}}}IB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<md::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<md::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::ConstantDataTyped<ggl::OcclusionLine::View> >=^{ConstantDataTyped<ggl::OcclusionLine::View>}^{__shared_weak_count}}{RenderState=^^?*^^?^{ResourceManager}^{RenderResource}{DepthState=iiiff}{StencilState=iiiiiIII}{RasterizerState=iiI{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}}B}{unique_ptr<ggl::OcclusionLine::OcclusionLinePipelineSetup, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> >={__compressed_pair<ggl::OcclusionLine::OcclusionLinePipelineSetup *, std::__1::default_delete<ggl::OcclusionLine::OcclusionLinePipelineSetup> >=^{OcclusionLinePipelineSetup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<md::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> >={__compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}^{shared_ptr<md::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}^{shared_ptr<md::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> >=Q}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<md::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}IddQBfCIIIdf{shared_ptr<md::Label>=^{Label}^{__shared_weak_count}}{shared_ptr<md::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqCBBBBBBBBii{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}{SelectedLabelState={Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}B}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}^{shared_ptr<md::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<md::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}^{shared_ptr<md::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::TrafficIncidentLabelFeature> > >=^{shared_ptr<md::TrafficIncidentLabelFeature>}}}B}{LabelCustomFeatureSupport=^^?^{LabelManager}{shared_ptr<md::weak_interface_ptr<md::LabelMapTileObserver> >=^{weak_interface_ptr<md::LabelMapTileObserver>}^{__shared_weak_count}}{map<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider, std::__1::less<id<VKCustomFeatureDataSource> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > >={__tree<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureDataSource>, std::__1::__value_type<id<VKCustomFeatureDataSource>, md::LabelCustomFeatureProvider>, std::__1::less<id<VKCustomFeatureDataSource> >, true> >=Q}}}{vector<md::LabelMapTile *, std::__1::allocator<md::LabelMapTile *> >=^^{LabelMapTile}^^{LabelMapTile}{__compressed_pair<md::LabelMapTile **, std::__1::allocator<md::LabelMapTile *> >=^^{LabelMapTile}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}II}B{vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}^{shared_ptr<md::NavLabel>}{__compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}B}16, name: labelManagerDidLayout:
@end

