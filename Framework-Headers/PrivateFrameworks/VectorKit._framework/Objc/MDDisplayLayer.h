//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <Foundation/NSObject.h>

#import <VectorKit/GGLLayerDelegate-Protocol.h>
#import <VectorKit/GGLRenderQueueSource-Protocol.h>
#import <VectorKit/MDRenderTarget-Protocol.h>

@class CALayer, NSString;
@protocol GGLLayer, GGLRenderQueueSource;

__attribute__((visibility("hidden")))
@interface MDDisplayLayer : NSObject <GGLRenderQueueSource, GGLLayerDelegate, MDRenderTarget>
{
    CALayer<GGLLayer> *_layer;
    id<GGLRenderQueueSource> _renderSource;
    struct RenderTargetFormat _format;
    shared_ptr_807ec9ac _device;
    struct Renderer *_renderer;
    struct mutex _debugConsoleManagerCreationLock;
    struct unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager>> _debugConsoleManager;
    struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget>> _renderTarget;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> _depthStencil;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> _msaaTexture;
    BOOL _useMultisampling;
    BOOL _requiresMultisampling;
    struct CGContext *_snapshotContext;
    BOOL _readPixels;
    BOOL _shouldRasterize;
    struct CGRect _bounds;
    double _contentsScale;
}

@property (readonly, nonatomic) float averageFPS;
@property (readonly, nonatomic) double contentScale;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) BOOL debugEnableMultisampling; // @dynamic debugEnableMultisampling;
@property (readonly, copy) NSString *description;
@property (readonly, nonatomic) struct Device *device;
@property (readonly, nonatomic) const struct RenderTargetFormat *format;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) CALayer *layer; // @synthesize layer=_layer;
@property (readonly, nonatomic) BOOL multiSample; // @synthesize multiSample=_useMultisampling;
@property (nonatomic) id<GGLRenderQueueSource> renderSource; // @synthesize renderSource=_renderSource;
@property (readonly, nonatomic) struct Renderer *renderer;
@property (readonly, nonatomic) BOOL shouldRasterize; // @synthesize shouldRasterize=_shouldRasterize;
@property (readonly, nonatomic) struct CGSize size;
@property (readonly, nonatomic) struct CGSize sizeInPixels;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_createLayer;
- (void)_createRenderTarget:(struct Texture *)arg1;
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 toLayer:(id)arg2;
- (void)dealloc;
- (struct DebugConsole *)debugConsoleForId:(int)arg1;
- (void)destroyLayer;
- (void)didEnterBackground;
- (void)didPresent;
- (void)didReadPixels:(shared_ptr_4ce39eb2 *)arg1;
- (void)didReceiveMemoryWarning;
- (void)disablePerformanceHUD:(id)arg1;
- (void)drawInContext:(struct CGContext *)arg1;
- (void)drawToTexture:(struct Texture *)arg1 withTimestamp:(double)arg2;
- (void)drawToTexture:(struct Texture *)arg1 withTimestamp:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)enablePerformanceHUD:(id)arg1;
- (void)expandedPerformanceHUD:(id)arg1;
- (void)forceLayout;
- (id)initWithContentScale:(double)arg1 shouldRasterize:(BOOL)arg2;
- (void)onTimerFired:(double)arg1;
- (void)recreateLayer;
- (RenderQueue_e4212455 *)renderQueue;
- (void)setBackgroundColor:(struct CGColor *)arg1;
- (void)setBounds:(struct CGRect)arg1;
- (void)setContentsGravity:(id)arg1;
- (void)setContentsScale:(double)arg1;
- (void)setNeedsDisplayOnBoundsChange:(BOOL)arg1;
- (void)setOpaque:(BOOL)arg1;

@end

