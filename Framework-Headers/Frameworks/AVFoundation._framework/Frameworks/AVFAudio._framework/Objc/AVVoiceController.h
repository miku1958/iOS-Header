//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class AVAudioFormat, NSDictionary, NSString;
@protocol AVVoiceControllerPlaybackDelegate, AVVoiceControllerRecordDelegate, Endpointer;

@interface AVVoiceController : NSObject
{
    void *_impl;
    unsigned long long _alertStartTime;
}

@property (readonly) unsigned long long alertStartTime; // @synthesize alertStartTime=_alertStartTime;
@property float alertVolume;
@property (getter=isBargeInDetectEnabled) BOOL bargeInDetectEnabled;
@property (setter=setDuckOthersOption:) BOOL duckOthersOption;
@property (strong) id<Endpointer> endpointerDelegate;
@property (readonly) unsigned long long lastRecordStartTime;
@property (getter=isMeteringEnabled) BOOL meteringEnabled;
@property (readonly) NSDictionary *metrics;
@property (readonly) unsigned long long numberOfChannels;
@property (readonly) AVAudioFormat *pcmRecordBufferFormat;
@property id<AVVoiceControllerPlaybackDelegate> playbackDelegate; // @dynamic playbackDelegate;
@property (readonly, copy) NSString *playbackRoute;
@property (readonly) NSDictionary *playbackSettings;
@property float playbackVolume;
@property (readonly, getter=isPlaying) BOOL playing;
@property id<AVVoiceControllerRecordDelegate> recordDelegate; // @dynamic recordDelegate;
@property double recordEndWaitTime;
@property int recordEndpointMode;
@property double recordInterspeechWaitTime;
@property (readonly, copy) NSString *recordRoute;
@property (readonly) NSDictionary *recordSettings;
@property double recordStartWaitTime;
@property (readonly, getter=isRecording) BOOL recording;
@property (getter=isStopOnBargeInEnabled) BOOL stopOnBargeInEnabled;
@property (getter=isStopOnEndpointEnabled) BOOL stopOnEndpointEnabled;
@property (getter=isSynchronousCallbackEnabled) BOOL synchronousCallbackEnabled;
@property (readonly) NSDictionary *voiceTriggerInfo;

- (BOOL)IsDeviceAvailableInLocalRoute:(id)arg1 error:(id *)arg2;
- (void)alertPlaybackFinishedOfType:(int)arg1;
- (void)avAudioPCMRecordBufferListReceived:(struct AudioBufferList *)arg1 numChannels:(unsigned int)arg2 atTime:(unsigned long long)arg3;
- (void)avAudioPCMRecordBufferReceived:(id)arg1 atTime:(unsigned long long)arg2;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (void)beganPlaying;
- (void)beganRecording;
- (void)beginAudioSessionActivate:(BOOL)arg1;
- (void)beginPlaybackInterruption;
- (void)beginRecordInterruption;
- (void)beginRecordInterruptionWithContext:(id)arg1;
- (id)currentRecordDeviceInfo;
- (void)dealloc;
- (void)decodeError;
- (int)doStartRecordingAtTime:(unsigned long long)arg1 behavior:(id)arg2;
- (void)enableMiniDucking:(BOOL)arg1;
- (void)encodeError;
- (void)endAudioSessionActivate:(BOOL)arg1;
- (void)endPlaybackInterruption;
- (void)endRecordInterruption;
- (void)endpointDetected;
- (void)finalize;
- (void)finishedPlaying;
- (void)finishedRecording;
- (unsigned long long)getAlertStartTime;
- (double)getPlaybackBufferDuration;
- (double)getRecordBufferDuration;
- (void)handleInterruption:(id)arg1;
- (void)handleMediaServerDeath:(id)arg1;
- (void)handleMediaServerReset:(id)arg1;
- (void)handlePluginDidPublishDevice:(id)arg1;
- (void)handlePluginDidUnpublishDevice:(id)arg1;
- (void)handleRouteChange:(id)arg1;
- (void)hardwareConfigChanged;
- (struct ControllerImpl *)impl;
- (id)initWithContext:(id)arg1 error:(id *)arg2;
- (void)interspeechPointDetected;
- (void)lpcmRecordBufferForNonLPCMReceived:(struct AudioQueueBuffer *)arg1 atTime:(unsigned long long)arg2 withASBD:(struct AudioStreamBasicDescription *)arg3;
- (void)lpcmRecordBufferReceived:(struct AudioQueueBuffer *)arg1 atTime:(unsigned long long)arg2;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (BOOL)playAlertSoundForType:(int)arg1;
- (BOOL)playAlertSoundForType:(int)arg1 overrideMode:(long long)arg2;
- (BOOL)playRecordStartingAlertAndResetEndpointer;
- (void)playbackBufferReceived:(struct MyAudioQueueBuffer *)arg1;
- (BOOL)preparePlaybackFromURL:(id)arg1 error:(id *)arg2;
- (BOOL)preparePlaybackWithSettings:(id)arg1 error:(id *)arg2;
- (BOOL)prepareRecordWithSettings:(id)arg1 error:(id *)arg2;
- (void)prewarmAudioSession;
- (void)recordBufferReceived:(struct MyAudioQueueBuffer *)arg1 atTime:(unsigned long long)arg2;
- (void)releaseAudioSession;
- (void)releaseAudioSession:(unsigned long long)arg1;
- (void)removePluginNotifications;
- (void)removeSessionNotifications;
- (void)resetEndpointer;
- (void)sendRemoteConnectionMessage:(id)arg1;
- (BOOL)setAlertSoundFromURL:(id)arg1 forType:(int)arg2;
- (BOOL)setCurrentContext:(id)arg1 error:(id *)arg2;
- (BOOL)setPlaybackBufferDuration:(double)arg1;
- (BOOL)setRecordBufferDuration:(double)arg1;
- (void)setSessionNotifications;
- (void)setupAlertBehavior:(id)arg1;
- (void)setupPluginNotifications;
- (BOOL)startPlaying;
- (BOOL)startRecording;
- (BOOL)startRecording:(id *)arg1;
- (BOOL)startRecordingAtTime:(unsigned long long)arg1 error:(id *)arg2;
- (BOOL)startRecordingWithSettings:(id)arg1 error:(id *)arg2;
- (void)startpointDetected;
- (void)stopPlaying;
- (void)stopRecording;
- (void)updateMeters;
- (BOOL)willAcceptContext:(id)arg1;

@end

