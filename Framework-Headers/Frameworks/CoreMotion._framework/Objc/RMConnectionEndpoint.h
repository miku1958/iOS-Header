//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@protocol OS_dispatch_queue, OS_xpc_object, RMConnectionDataDelegate, RMConnectionLifecycleDelegate;

@interface RMConnectionEndpoint : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    id<RMConnectionLifecycleDelegate> _connectionDelegate;
    id<RMConnectionDataDelegate> _dataDelegate;
    NSObject<OS_xpc_object> *_streamingServerConnection;
    NSObject<OS_xpc_object> *_streamingClientConnection;
    NSObject<OS_xpc_object> *_streamingClientListener;
    NSObject<OS_xpc_object> *_messagingConnection;
}

@property (readonly, nonatomic) NSObject<OS_xpc_object> *connection;
@property (weak, nonatomic) id<RMConnectionLifecycleDelegate> connectionDelegate; // @synthesize connectionDelegate=_connectionDelegate;
@property (weak, nonatomic) id<RMConnectionDataDelegate> dataDelegate; // @synthesize dataDelegate=_dataDelegate;
@property (strong, nonatomic) NSObject<OS_xpc_object> *messagingConnection; // @synthesize messagingConnection=_messagingConnection;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property (strong, nonatomic) NSObject<OS_xpc_object> *streamingClientConnection; // @synthesize streamingClientConnection=_streamingClientConnection;
@property (strong, nonatomic) NSObject<OS_xpc_object> *streamingClientListener; // @synthesize streamingClientListener=_streamingClientListener;
@property (strong, nonatomic) NSObject<OS_xpc_object> *streamingServerConnection; // @synthesize streamingServerConnection=_streamingServerConnection;

- (void).cxx_destruct;
- (void)handleInterruption;
- (void)handleStreamXpcError:(id)arg1 withErrorHandler:(CDUnknownBlockType)arg2;
- (void)handleStreamXpcReply:(id)arg1 withErrorHandler:(CDUnknownBlockType)arg2;
- (void)handleXpcMessage:(id)arg1 replyBlock:(CDUnknownBlockType)arg2;
- (id)initWithConnection:(id)arg1 queue:(id)arg2;
- (void)invalidate;
- (BOOL)isValid;
- (void)pause;
- (void)requestStreamWithMessage:(id)arg1 data:(id)arg2 errorHandler:(CDUnknownBlockType)arg3;
- (void)sendMessage:(id)arg1 withData:(id)arg2;
- (void)sendMessage:(id)arg1 withData:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)start;
- (void)startReceivingStreamOnConnection:(id)arg1 errorHandler:(CDUnknownBlockType)arg2;
- (void)startServingStreamToEndpoint:(id)arg1 error:(id *)arg2;
- (BOOL)startServingStreamWithHandler:(id)arg1;
- (void)stopReceivingStream;
- (void)stopServingStream;
- (void)wrapReplyToXpcMessage:(id)arg1 withName:(id)arg2 data:(id)arg3;

@end

