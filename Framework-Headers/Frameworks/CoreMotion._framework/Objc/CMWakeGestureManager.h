//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSString;
@protocol CMWakeGestureDelegate, OS_dispatch_queue;

@interface CMWakeGestureManager : NSObject
{
    NSObject<OS_dispatch_queue> *fDispatchQ;
    BOOL gestureUpdatesStarted;
    struct Dispatcher *fWakeDispatcher;
    struct Dispatcher *fPowerStateDispatcher;
    struct unique_ptr<CMWakeGestureVisitor, std::__1::default_delete<CMWakeGestureVisitor>> fWakeGestureVisitor;
    long long fCurrentState;
    int fMeasureLatencyState;
    double fWakePacketTimestamp;
    struct IONotificationPort *fIoNotifyPort;
    unsigned int fIoNotification;
    unsigned int backlightService;
    double fLastNotificationTime;
    int fScreenDimmingNotificationToken;
    int fLockScreenToken;
    double fLastDisplayOnTime;
    NSString *fProcessName;
    BOOL fIsRunningInPrimaryProcess;
    BOOL fEnableLatencyAlert;
    BOOL fEnableAudioAlert;
    int fLatencyAlertThreshold;
    BOOL fDisplayState;
    int fSelector;
    id<CMWakeGestureDelegate> fUpdatedDelegate;
    id<CMWakeGestureDelegate> fDelegate;
}

@property (nonatomic) id<CMWakeGestureDelegate> delegate;

+ (BOOL)hasSlowBootArgs;
+ (BOOL)isWakeGestureAvailable;
+ (BOOL)isWakeGestureOverrideEnabled;
+ (id)sharedManager;
+ (id)stringForGestureState:(long long)arg1;
+ (id)stringForMode:(unsigned char)arg1;
+ (id)stringForNotification:(unsigned char)arg1;
+ (id)stringForStartPose:(unsigned char)arg1;
+ (id)stringForViewPose:(unsigned char)arg1;
+ (unsigned char)toRaw:(long long)arg1;
+ (long long)toState:(unsigned char)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (void)forceDetected;
- (id)initWithQueue:(id)arg1;
- (void)invokeDelegateWithState:(long long)arg1;
- (void)loadPreferences;
- (void)onBacklightServiceUpdated:(unsigned int)arg1;
- (void)onNotificationControl:(id)arg1;
- (void)onPowerStateUpdated:(const struct Sample *)arg1;
- (void)onWakeUpdated:(const struct Sample *)arg1;
- (void)playAlert;
- (void)reenableDetectedStateRecognition;
- (void)simulateGesture:(long long)arg1 after:(double)arg2;
- (BOOL)simulateGestureWithDelay:(double)arg1 Duration:(double)arg2;
- (void)startWakeGestureUpdates;
- (void)stopWakeGestureUpdates;

@end

