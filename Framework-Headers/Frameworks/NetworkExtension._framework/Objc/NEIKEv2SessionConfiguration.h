//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <NetworkExtension/NSCopying-Protocol.h>

@class NEIKEv2AuthenticationProtocol, NEIKEv2ConfigurationMessage, NEIKEv2Identifier, NSArray, NSData, NSString;

@interface NEIKEv2SessionConfiguration : NSObject <NSCopying>
{
    NEIKEv2ConfigurationMessage *_configurationRequest;
    NEIKEv2ConfigurationMessage *_configurationReply;
    BOOL _initialContactDisabled;
    BOOL _negotiateMOBIKE;
    BOOL _natTraversalKeepaliveDisabled;
    BOOL _natTraversalKeepaliveEnabled;
    BOOL _natTraversalKeepaliveOffloadEnabled;
    BOOL _deadPeerDetectionEnabled;
    BOOL _idleTimeoutEnabled;
    BOOL _blackholeDetectionEnabled;
    BOOL _enableCertificateRevocationCheck;
    BOOL _strictCertificateRevocationCheck;
    BOOL _disableRemoteCertificateValidation;
    unsigned int _deadPeerDetectionMaxRetryCount;
    unsigned int _deadPeerDetectionMaxRetryCountBeforeReporting;
    unsigned int _deadPeerDetectionReceiveMaxShortDPDBeforeReporting;
    NEIKEv2Identifier *_localIdentifier;
    NEIKEv2Identifier *_remoteIdentifier;
    NSArray *_additionalMOBIKEAddresses;
    unsigned long long _natTraversalKeepaliveInterval;
    unsigned long long _natTraversalKeepaliveOffloadInterval;
    unsigned long long _deadPeerDetectionInterval;
    unsigned long long _deadPeerDetectionRetryIntervalMilliseconds;
    unsigned long long _deadPeerDetectionReceiveIntervalTriggerReporting;
    unsigned long long _idleTimeoutSeconds;
    NEIKEv2AuthenticationProtocol *_authenticationProtocol;
    NEIKEv2AuthenticationProtocol *_remoteAuthentication;
    NSString *_localPrivateEAPIdentity;
    NSData *_localEncryptedEAPIdentity;
    NSString *_username;
    NSString *_password;
    NSData *_passwordReference;
    NSData *_sharedSecret;
    NSData *_sharedSecretReference;
    NSString *_localCertificateName;
    NSData *_localCertificateReference;
    NSString *_remoteCertificateHostname;
    NSString *_remoteCertificateAuthorityName;
    NSArray *_remoteCertificateAuthorityReferences;
    NSData *_remoteCertificateAuthorityHash;
    NSData *_localPrivateKey;
    NSData *_localPublicKey;
    NSData *_remotePublicKey;
    NSString *_tlsMinimumVersion;
    NSString *_tlsMaximumVersion;
    NSArray *_customIKEAuthPayloads;
    NSArray *_customIKEAuthVendorPayloads;
    NSArray *_customIKEAuthPrivateNotifies;
}

@property (strong) NSArray *additionalMOBIKEAddresses; // @synthesize additionalMOBIKEAddresses=_additionalMOBIKEAddresses;
@property (strong) NEIKEv2AuthenticationProtocol *authenticationProtocol; // @synthesize authenticationProtocol=_authenticationProtocol;
@property BOOL blackholeDetectionEnabled; // @synthesize blackholeDetectionEnabled=_blackholeDetectionEnabled;
@property (strong) NEIKEv2ConfigurationMessage *configurationReply;
@property (strong) NEIKEv2ConfigurationMessage *configurationRequest;
@property (strong) NSArray *customIKEAuthPayloads; // @synthesize customIKEAuthPayloads=_customIKEAuthPayloads;
@property (strong, nonatomic) NSArray *customIKEAuthPrivateNotifies; // @synthesize customIKEAuthPrivateNotifies=_customIKEAuthPrivateNotifies;
@property (strong) NSArray *customIKEAuthVendorPayloads; // @synthesize customIKEAuthVendorPayloads=_customIKEAuthVendorPayloads;
@property BOOL deadPeerDetectionEnabled; // @synthesize deadPeerDetectionEnabled=_deadPeerDetectionEnabled;
@property unsigned long long deadPeerDetectionInterval; // @synthesize deadPeerDetectionInterval=_deadPeerDetectionInterval;
@property unsigned int deadPeerDetectionMaxRetryCount; // @synthesize deadPeerDetectionMaxRetryCount=_deadPeerDetectionMaxRetryCount;
@property unsigned int deadPeerDetectionMaxRetryCountBeforeReporting; // @synthesize deadPeerDetectionMaxRetryCountBeforeReporting=_deadPeerDetectionMaxRetryCountBeforeReporting;
@property unsigned long long deadPeerDetectionReceiveIntervalTriggerReporting; // @synthesize deadPeerDetectionReceiveIntervalTriggerReporting=_deadPeerDetectionReceiveIntervalTriggerReporting;
@property unsigned int deadPeerDetectionReceiveMaxShortDPDBeforeReporting; // @synthesize deadPeerDetectionReceiveMaxShortDPDBeforeReporting=_deadPeerDetectionReceiveMaxShortDPDBeforeReporting;
@property unsigned long long deadPeerDetectionRetryIntervalMilliseconds; // @synthesize deadPeerDetectionRetryIntervalMilliseconds=_deadPeerDetectionRetryIntervalMilliseconds;
@property BOOL disableRemoteCertificateValidation; // @synthesize disableRemoteCertificateValidation=_disableRemoteCertificateValidation;
@property BOOL enableCertificateRevocationCheck; // @synthesize enableCertificateRevocationCheck=_enableCertificateRevocationCheck;
@property BOOL idleTimeoutEnabled; // @synthesize idleTimeoutEnabled=_idleTimeoutEnabled;
@property unsigned long long idleTimeoutSeconds; // @synthesize idleTimeoutSeconds=_idleTimeoutSeconds;
@property BOOL initialContactDisabled; // @synthesize initialContactDisabled=_initialContactDisabled;
@property (strong) NSString *localCertificateName; // @synthesize localCertificateName=_localCertificateName;
@property (strong) NSData *localCertificateReference; // @synthesize localCertificateReference=_localCertificateReference;
@property (strong) NSData *localEncryptedEAPIdentity; // @synthesize localEncryptedEAPIdentity=_localEncryptedEAPIdentity;
@property (strong) NEIKEv2Identifier *localIdentifier; // @synthesize localIdentifier=_localIdentifier;
@property (strong) NSString *localPrivateEAPIdentity; // @synthesize localPrivateEAPIdentity=_localPrivateEAPIdentity;
@property (strong) NSData *localPrivateKey; // @synthesize localPrivateKey=_localPrivateKey;
@property (strong) NSData *localPublicKey; // @synthesize localPublicKey=_localPublicKey;
@property BOOL natTraversalKeepaliveDisabled; // @synthesize natTraversalKeepaliveDisabled=_natTraversalKeepaliveDisabled;
@property BOOL natTraversalKeepaliveEnabled; // @synthesize natTraversalKeepaliveEnabled=_natTraversalKeepaliveEnabled;
@property unsigned long long natTraversalKeepaliveInterval; // @synthesize natTraversalKeepaliveInterval=_natTraversalKeepaliveInterval;
@property BOOL natTraversalKeepaliveOffloadEnabled; // @synthesize natTraversalKeepaliveOffloadEnabled=_natTraversalKeepaliveOffloadEnabled;
@property unsigned long long natTraversalKeepaliveOffloadInterval; // @synthesize natTraversalKeepaliveOffloadInterval=_natTraversalKeepaliveOffloadInterval;
@property BOOL negotiateMOBIKE; // @synthesize negotiateMOBIKE=_negotiateMOBIKE;
@property (strong) NSString *password; // @synthesize password=_password;
@property (strong) NSData *passwordReference; // @synthesize passwordReference=_passwordReference;
@property (strong) NEIKEv2AuthenticationProtocol *remoteAuthentication; // @synthesize remoteAuthentication=_remoteAuthentication;
@property (strong) NSData *remoteCertificateAuthorityHash; // @synthesize remoteCertificateAuthorityHash=_remoteCertificateAuthorityHash;
@property (strong) NSString *remoteCertificateAuthorityName; // @synthesize remoteCertificateAuthorityName=_remoteCertificateAuthorityName;
@property (strong) NSArray *remoteCertificateAuthorityReferences; // @synthesize remoteCertificateAuthorityReferences=_remoteCertificateAuthorityReferences;
@property (strong) NSString *remoteCertificateHostname; // @synthesize remoteCertificateHostname=_remoteCertificateHostname;
@property (strong) NEIKEv2Identifier *remoteIdentifier; // @synthesize remoteIdentifier=_remoteIdentifier;
@property (strong) NSData *remotePublicKey; // @synthesize remotePublicKey=_remotePublicKey;
@property (strong) NSData *sharedSecret; // @synthesize sharedSecret=_sharedSecret;
@property (strong) NSData *sharedSecretReference; // @synthesize sharedSecretReference=_sharedSecretReference;
@property BOOL strictCertificateRevocationCheck; // @synthesize strictCertificateRevocationCheck=_strictCertificateRevocationCheck;
@property (strong) NSString *tlsMaximumVersion; // @synthesize tlsMaximumVersion=_tlsMaximumVersion;
@property (strong) NSString *tlsMinimumVersion; // @synthesize tlsMinimumVersion=_tlsMinimumVersion;
@property (strong) NSString *username; // @synthesize username=_username;

- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)descriptionWithIndent:(int)arg1 options:(unsigned long long)arg2;
- (id)init;

@end

