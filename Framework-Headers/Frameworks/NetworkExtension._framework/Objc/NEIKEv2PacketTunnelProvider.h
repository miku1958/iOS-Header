//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <NetworkExtension/NEPacketTunnelProvider.h>

@class NEIKEv2MOBIKE, NEIKEv2Rekey, NEIKEv2Server, NSArray, NSDictionary, NSObject, NWPathEvaluator, NWResolver;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface NEIKEv2PacketTunnelProvider : NEPacketTunnelProvider
{
    BOOL _isIfCellular;
    BOOL _hasNAT;
    BOOL _stopped;
    unsigned int _ikeChildID;
    unsigned int _flags;
    NSArray *_ikeConfig;
    NSDictionary *_childConfig;
    NSDictionary *_options;
    struct NEVirtualInterface_s *_virtualInterface;
    NEIKEv2Server *_serverAddresses;
    NWResolver *_resolver;
    NEIKEv2Rekey *_rekey;
    NSObject<OS_dispatch_semaphore> *_getSocketSemaphore;
    NEIKEv2MOBIKE *_mobikeHandle;
    CDUnknownBlockType _startTunnelCompletionHandler;
    CDUnknownBlockType _dnsResolverCompletionHandler;
    struct NEIPSecIKE_s *_ikeRef;
    unsigned long long _ifIndex;
    long long _pathStatus;
    NSObject<OS_dispatch_queue> *_queue;
    NWPathEvaluator *_scopedPathEvaluator;
}

@property (strong) NSDictionary *childConfig; // @synthesize childConfig=_childConfig;
@property (copy) CDUnknownBlockType dnsResolverCompletionHandler; // @synthesize dnsResolverCompletionHandler=_dnsResolverCompletionHandler;
@property unsigned int flags; // @synthesize flags=_flags;
@property (strong) NSObject<OS_dispatch_semaphore> *getSocketSemaphore; // @synthesize getSocketSemaphore=_getSocketSemaphore;
@property BOOL hasNAT; // @synthesize hasNAT=_hasNAT;
@property unsigned long long ifIndex; // @synthesize ifIndex=_ifIndex;
@property unsigned int ikeChildID; // @synthesize ikeChildID=_ikeChildID;
@property (strong) NSArray *ikeConfig; // @synthesize ikeConfig=_ikeConfig;
@property struct NEIPSecIKE_s *ikeRef; // @synthesize ikeRef=_ikeRef;
@property BOOL isIfCellular; // @synthesize isIfCellular=_isIfCellular;
@property (strong) NEIKEv2MOBIKE *mobikeHandle; // @synthesize mobikeHandle=_mobikeHandle;
@property (strong) NSDictionary *options; // @synthesize options=_options;
@property long long pathStatus; // @synthesize pathStatus=_pathStatus;
@property (strong) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property (strong) NEIKEv2Rekey *rekey; // @synthesize rekey=_rekey;
@property (strong) NWResolver *resolver; // @synthesize resolver=_resolver;
@property (strong) NWPathEvaluator *scopedPathEvaluator; // @synthesize scopedPathEvaluator=_scopedPathEvaluator;
@property (strong) NEIKEv2Server *serverAddresses; // @synthesize serverAddresses=_serverAddresses;
@property (copy) CDUnknownBlockType startTunnelCompletionHandler; // @synthesize startTunnelCompletionHandler=_startTunnelCompletionHandler;
@property BOOL stopped; // @synthesize stopped=_stopped;
@property struct NEVirtualInterface_s *virtualInterface; // @synthesize virtualInterface=_virtualInterface;

- (void).cxx_destruct;
- (id)createPacketTunnelNetworkSettings;
- (void)dealloc;
- (void)handleAdditionalServerAddressesNotification:(id)arg1;
- (void)handleConfigChange;
- (void)handleDNSResolution;
- (void)handleDefaultPathChange;
- (void)handleInterfaceChange:(BOOL)arg1;
- (void)handleInterfaceDown;
- (long long)handleRedirectNotification:(id)arg1;
- (void)handleScopedPathChange;
- (void)ignoreSigPipe;
- (id)init;
- (BOOL)invokeStartTunnelCompletionHandler:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)observerHelperHandler:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)reset:(BOOL)arg1;
- (void)resolveServerAddressIfNeeded:(CDUnknownBlockType)arg1;
- (BOOL)saveChildTunnelConfig:(void *)arg1;
- (BOOL)saveIKETunnelConfig:(void *)arg1;
- (void)setTunnelNetworkSettings:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)startCompleteOrCancelTunnelWithError:(id)arg1;
- (void)startIKEv2TunnelWithOptions:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)startRekeyTimer:(BOOL)arg1;
- (void)startTunnelWithOptions:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)stopIKEv2TunnelWithReason:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)stopTunnelWithReason:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (BOOL)tryAlternateServerAddresses;
- (long long)tunnelBringup;
- (long long)tunnelTeardown;
- (void)wake;
- (void)wakeIKEv2;
- (void)watchIKESocketChange;

@end

