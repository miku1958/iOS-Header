//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class CKDatabase, CKNotificationListener, CKSyncEngineMetadata, NSOperationQueue;
@protocol CKSyncEngineDataSource, OS_dispatch_queue;

@interface CKSyncEngine : NSObject
{
    BOOL _ignoringSystemConditions;
    BOOL _waitingForIdentityUpdate;
    BOOL _waitingForHSA2;
    BOOL _useUniqueActivityIdentifiers;
    BOOL _skipRetryOnOperationError;
    BOOL _automaticSyncingDisabled;
    id<CKSyncEngineDataSource> _dataSource;
    CKDatabase *_database;
    CKSyncEngineMetadata *_metadata;
    unsigned long long _lastNotifiedMetadataChangeCount;
    CKNotificationListener *_notificationListener;
    NSOperationQueue *_operationQueue;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_batchCreationQueue;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    unsigned long long _maxRecordCountPerBatch;
    unsigned long long _maxRecordBytesPerBatch;
    unsigned long long _maxZoneCountPerBatch;
    long long _lastKnownAccountStatus;
    long long _priorityForFetches;
    long long _priorityForModifications;
}

@property (nonatomic, getter=isAutomaticSyncingDisabled) BOOL automaticSyncingDisabled; // @synthesize automaticSyncingDisabled=_automaticSyncingDisabled;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *batchCreationQueue; // @synthesize batchCreationQueue=_batchCreationQueue;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
@property (readonly, weak, nonatomic) id<CKSyncEngineDataSource> dataSource; // @synthesize dataSource=_dataSource;
@property (strong, nonatomic) CKDatabase *database; // @synthesize database=_database;
@property (readonly, nonatomic) BOOL ignoringSystemConditions; // @synthesize ignoringSystemConditions=_ignoringSystemConditions;
@property (nonatomic) long long lastKnownAccountStatus; // @synthesize lastKnownAccountStatus=_lastKnownAccountStatus;
@property (nonatomic) unsigned long long lastNotifiedMetadataChangeCount; // @synthesize lastNotifiedMetadataChangeCount=_lastNotifiedMetadataChangeCount;
@property (nonatomic) unsigned long long maxRecordBytesPerBatch; // @synthesize maxRecordBytesPerBatch=_maxRecordBytesPerBatch;
@property (nonatomic) unsigned long long maxRecordCountPerBatch; // @synthesize maxRecordCountPerBatch=_maxRecordCountPerBatch;
@property (nonatomic) unsigned long long maxZoneCountPerBatch; // @synthesize maxZoneCountPerBatch=_maxZoneCountPerBatch;
@property (strong, nonatomic) CKSyncEngineMetadata *metadata; // @synthesize metadata=_metadata;
@property (strong, nonatomic) CKNotificationListener *notificationListener; // @synthesize notificationListener=_notificationListener;
@property (strong, nonatomic) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property (nonatomic) long long priorityForFetches; // @synthesize priorityForFetches=_priorityForFetches;
@property (nonatomic) long long priorityForModifications; // @synthesize priorityForModifications=_priorityForModifications;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property (nonatomic) BOOL skipRetryOnOperationError; // @synthesize skipRetryOnOperationError=_skipRetryOnOperationError;
@property (nonatomic) BOOL useUniqueActivityIdentifiers; // @synthesize useUniqueActivityIdentifiers=_useUniqueActivityIdentifiers;
@property (nonatomic, getter=isWaitingForHSA2) BOOL waitingForHSA2; // @synthesize waitingForHSA2=_waitingForHSA2;
@property (nonatomic, getter=isWaitingForIdentityUpdate) BOOL waitingForIdentityUpdate; // @synthesize waitingForIdentityUpdate=_waitingForIdentityUpdate;

+ (id)activityIdentifierWithName:(id)arg1 database:(id)arg2 ignoringSystemConditions:(BOOL)arg3 uniquenessPointer:(id)arg4;
+ (id)earliestStartDateAfterError:(id)arg1;
+ (id)fetchChangesActivityIdentifierInDatabase:(id)arg1 ignoringSystemConditions:(BOOL)arg2;
+ (id)modifyPendingChangesActivityIdentifierInDatabase:(id)arg1 ignoringSystemConditions:(BOOL)arg2;
+ (id)saveSubscriptionActivityIdentifierInDatabase:(id)arg1 ignoringSystemConditions:(BOOL)arg2;
+ (BOOL)shouldDeferAfterError:(id)arg1;
+ (id)supportedDatabaseScopes;
+ (void)unregisterActivitiesWithDatabase:(id)arg1 ignoringSystemConditions:(BOOL)arg2;
- (void).cxx_destruct;
- (void)__fetchChangesWithOperationGroup:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)__modifyPendingChangesWithOperationGroup:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_fetchChangesWithOperationGroup:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (BOOL)_hasPendingModifications;
- (void)_modifyPendingChangesWithOperationGroup:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_saveSubscriptionIfNecessaryWithOperationGroup:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)accountChangedNotification:(id)arg1;
- (id)activityIdentifierWithName:(id)arg1;
- (void)addOperationsToModifyZonesIfNecessaryInOperationGroup:(id)arg1;
- (void)addRecordIDsToSave:(id)arg1 recordIDsToDelete:(id)arg2;
- (void)addRecordZonesToSave:(id)arg1 recordZoneIDsToDelete:(id)arg2;
- (void)commonInitWithDatabase:(id)arg1 dataSource:(id)arg2 metadata:(id)arg3 machServiceName:(id)arg4 useUniqueActivityIdentifiers:(BOOL)arg5 disableAutomaticSyncing:(BOOL)arg6 priorityForFetches:(long long)arg7 priorityForModifications:(long long)arg8;
- (id)databaseSubscription;
- (void)dealloc;
- (id)defaultOperationConfiguration;
- (void)didReceiveDatabaseNotification:(id)arg1;
- (void)ensureAccountAvailableWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)existingOperationToFetchChangesIncludingExecutingOperations:(BOOL)arg1;
- (id)existingOperationToModifyRecordBatchesIncludingExecutingOperations:(BOOL)arg1;
- (id)existingOperationsToModifyZones;
- (id)fetchChangesActivityIdentifier;
- (void)fetchChangesOperation:(id)arg1 completedFetchingChangesForRecordZoneID:(id)arg2 serverChangeToken:(id)arg3 clientChangeToken:(id)arg4 error:(id)arg5;
- (void)fetchChangesOperation:(id)arg1 completedFetchingDatabaseChangesWithError:(id)arg2;
- (void)fetchChangesOperation:(id)arg1 completedWithError:(id)arg2;
- (void)fetchChangesOperation:(id)arg1 databaseChangeTokenUpdated:(id)arg2;
- (void)fetchChangesOperation:(id)arg1 recordChanged:(id)arg2;
- (void)fetchChangesOperation:(id)arg1 recordWithIDWasDeleted:(id)arg2 recordType:(id)arg3;
- (void)fetchChangesOperation:(id)arg1 recordZoneWithIDChanged:(id)arg2;
- (void)fetchChangesOperation:(id)arg1 recordZoneWithIDWasDeleted:(id)arg2;
- (void)fetchChangesOperation:(id)arg1 recordZoneWithIDWasPurged:(id)arg2;
- (void)fetchChangesOperation:(id)arg1 updatedServerChangeToken:(id)arg2 clientChangeToken:(id)arg3 forRecordZoneID:(id)arg4;
- (void)fetchChangesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (BOOL)hasPendingModifications;
- (BOOL)hasSchedulerActivityWithIdentifier:(id)arg1;
- (void)identityUpdateNotification:(id)arg1;
- (id)init;
- (id)initWithDatabase:(id)arg1 dataSource:(id)arg2 metadata:(id)arg3;
- (id)initWithDatabase:(id)arg1 dataSource:(id)arg2 metadata:(id)arg3 machServiceName:(id)arg4;
- (id)initWithDatabase:(id)arg1 dataSource:(id)arg2 metadata:(id)arg3 machServiceName:(id)arg4 ignoringSystemConditions:(BOOL)arg5 useUniqueActivityIdentifiers:(BOOL)arg6 disableAutomaticSyncing:(BOOL)arg7;
- (id)initWithDatabase:(id)arg1 dataSource:(id)arg2 metadata:(id)arg3 machServiceName:(id)arg4 priorityForFetches:(long long)arg5 priorityForModifications:(long long)arg6;
- (id)initWithDatabase:(id)arg1 dataSource:(id)arg2 metadata:(id)arg3 useUniqueActivityIdentifiers:(BOOL)arg4 disableAutomaticSyncing:(BOOL)arg5;
- (BOOL)isReadyToSubmitSchedulerActivity;
- (id)modifyPendingChangesActivityIdentifier;
- (void)modifyPendingChangesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)modifyRecordBatchesOperation:(id)arg1 completedBatch:(id)arg2 withSavedRecords:(id)arg3 deletedRecordIDs:(id)arg4 error:(id)arg5;
- (void)modifyRecordBatchesOperation:(id)arg1 completedWithError:(id)arg2;
- (void)modifyRecordBatchesOperation:(id)arg1 perDeleteRecordIDCompletion:(id)arg2 inBatch:(id)arg3 error:(id)arg4;
- (void)modifyRecordBatchesOperation:(id)arg1 perRecordProgressForRecord:(id)arg2 progress:(double)arg3;
- (void)modifyRecordBatchesOperation:(id)arg1 perRecordSaveCompletionForRecord:(id)arg2 inBatch:(id)arg3 error:(id)arg4;
- (id)newOperationToFetchChangesWithOperationGroup:(id)arg1;
- (id)newOperationToModifyRecordBatchesWithOperationGroup:(id)arg1;
- (id)newOperationToModifyZonesToSave:(id)arg1 zoneIDsToDelete:(id)arg2 inOperationGroup:(id)arg3;
- (id)nextBatchOfRecordsToModify;
- (id)nextBatchOfRecordsToModifyDefaultBehavior;
- (id)nextBatchOfRecordsToModifyWithCustomBatching;
- (void)notifyDataSourceForUnserializedMetadataIfNecessary;
- (unsigned long long)numberOfModifyPendingRecordsOperations;
- (void)performFetchChangesActivity:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)performModifyPendingChangesActivity:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)performSaveSubscriptionActivity:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)registerForSubscriptions;
- (void)registerSchedulerActivities;
- (id)saveSubscriptionActivityIdentifier;
- (void)saveSubscriptionIfNecessaryWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)saveSubscriptionIfNecessaryWithOperationGroup:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)scheduleFetchChangesIfNecessaryWithEarliestStartDate:(id)arg1;
- (void)scheduleInitialWorkIfNecessary;
- (void)scheduleModifyPendingChangesIfNecessaryWithEarliestStartDate:(id)arg1;
- (void)scheduleSaveSubscriptionIfNecessaryWithEarliestStartDate:(id)arg1;
- (BOOL)shouldFetchChangesForZoneID:(id)arg1;
- (BOOL)shouldRetryAfterError:(id)arg1;
- (void)startWaitingForHSA2IfNecessary;
- (void)startWaitingForIdentityUpdateIfNecessary;
- (void)submitActivityIfNecessaryWithIdentifier:(id)arg1 earliestStartDate:(id)arg2 priority:(long long)arg3;
- (void)unregisterActivities;
- (void)updateAccountInfoAndScheduleWorkIfNecessaryWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)updateAccountInfoWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)updateReadinessStateFromError:(id)arg1;

@end

