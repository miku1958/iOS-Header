//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSDate, NSString;

@interface CKThrottle : NSObject
{
    int _operationType;
    NSString *_defaultsKey;
    NSString *_label;
    NSString *_containerIdentifier;
    long long _databaseScope;
    NSString *_zoneName;
    NSString *_serviceName;
    NSString *_functionName;
    NSDate *_throttleStartDate;
    unsigned long long _intervalLengthSeconds;
    unsigned long long _allowedRequestCount;
    NSDate *_expirationDate;
    unsigned long long _sentRequestCount;
    unsigned long long _currentRequestWindowIndex;
}

@property (nonatomic) unsigned long long allowedRequestCount; // @synthesize allowedRequestCount=_allowedRequestCount;
@property (copy, nonatomic) NSString *containerIdentifier; // @synthesize containerIdentifier=_containerIdentifier;
@property (nonatomic) unsigned long long currentRequestWindowIndex; // @synthesize currentRequestWindowIndex=_currentRequestWindowIndex;
@property (nonatomic) long long databaseScope; // @synthesize databaseScope=_databaseScope;
@property (copy, nonatomic) NSString *defaultsKey; // @synthesize defaultsKey=_defaultsKey;
@property (strong, nonatomic) NSDate *expirationDate; // @synthesize expirationDate=_expirationDate;
@property (copy, nonatomic) NSString *functionName; // @synthesize functionName=_functionName;
@property (nonatomic) unsigned long long intervalLengthSeconds; // @synthesize intervalLengthSeconds=_intervalLengthSeconds;
@property (copy, nonatomic) NSString *label; // @synthesize label=_label;
@property (nonatomic) int operationType; // @synthesize operationType=_operationType;
@property (nonatomic) unsigned long long sentRequestCount; // @synthesize sentRequestCount=_sentRequestCount;
@property (copy, nonatomic) NSString *serviceName; // @synthesize serviceName=_serviceName;
@property (strong, nonatomic) NSDate *throttleStartDate; // @synthesize throttleStartDate=_throttleStartDate;
@property (copy, nonatomic) NSString *zoneName; // @synthesize zoneName=_zoneName;

+ (id)CKStatusReportArray;
+ (BOOL)addThrottle:(id)arg1;
+ (id)allThrottles;
+ (id)enforcedThrottleForCriteria:(id)arg1 willSendRequest:(BOOL)arg2 outThrottleError:(id *)arg3;
+ (void)locked_removeThrottles:(id)arg1;
+ (void)removeThrottle:(id)arg1;
+ (void)removeThrottles:(id)arg1;
+ (void)resetThrottles;
+ (void)setThrottleList:(id)arg1;
+ (void)setThrottleObserver:(id)arg1;
+ (void)throttleWillBeRemoved:(id)arg1;
+ (id)throttlingErrorWithRetry:(double)arg1;
- (void).cxx_destruct;
- (BOOL)appliesToCriteria:(id)arg1;
- (BOOL)canTestInClientProcess;
- (double)delayUntilNextOperationAllowed;
- (id)description;
- (id)dictionaryRepresentation;
- (id)init;
- (id)initWithDefaultsKey:(id)arg1;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (BOOL)isExpired;
- (void)setThrottles:(id)arg1;
- (void)takeValuesFromThrottleDictionary:(id)arg1;
- (void)throttleDataWasChanged;
- (id)throttleDictionaryBlockingUntilNextRequestWindow;

@end

