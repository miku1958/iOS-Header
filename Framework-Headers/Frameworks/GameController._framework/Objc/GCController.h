//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <GameController/GCDevice-Protocol.h>
#import <GameController/GCDeviceLegacy-Protocol.h>
#import <GameController/NSSecureCoding-Protocol.h>
#import <GameController/_GCIPCObject-Protocol.h>

@class GCControllerSettings, GCDeviceBattery, GCDeviceHaptics, GCDeviceLight, GCExtendedGamepad, GCGamepad, GCMicroGamepad, GCMotion, GCPhysicalInputProfile, NSArray, NSMutableArray, NSString;
@protocol GCControllerMotionConfigurableSensors, GCControllerPlayerIndicator, GCControllerProductInfo, GCControllerSettingsComponent, GCDeviceBatteryComponent, GCDeviceHapticCapabilityInfo, GCDeviceLightComponent, GCNamedProfile, NSCopying><NSObject><NSSecureCoding, NSObject><NSCopying><NSSecureCoding, OS_dispatch_queue;

@interface GCController : NSObject <_GCIPCObject, NSSecureCoding, GCDeviceLegacy, GCDevice>
{
    NSObject<OS_dispatch_queue> *_handlerQueue;
    id<NSCopying><NSObject><NSSecureCoding> _identifier;
    NSArray *_components;
    id<GCControllerProductInfo> _info;
    GCPhysicalInputProfile *_physicalInput;
    GCMotion *_motion;
    id<GCControllerMotionConfigurableSensors> _motionConfigurableSensors;
    id<GCControllerSettingsComponent> _settings;
    id<GCControllerPlayerIndicator> _playerIndicator;
    id<GCDeviceHapticCapabilityInfo> _hapticCapabilityInfo;
    id<GCDeviceLightComponent> _light;
    id<GCDeviceBatteryComponent> _battery;
    id<GCNamedProfile> _profile;
    NSString *_uniqueIdentifier;
    unsigned int _service;
    NSMutableArray *_hidServices;
    NSString *_physicalDeviceUniqueID;
    NSString *_debugName;
    NSString *_vendorName;
    NSString *_description;
    unsigned long long _deviceHash;
    long long _playerIndex;
    BOOL _physicalDeviceUsesCompass;
    BOOL _forwarded;
    BOOL _allHIDDevicesConnected;
    BOOL _published;
    BOOL _isProxyController;
    BOOL _snapshot;
    CDUnknownBlockType _controllerPausedHandler;
}

@property (copy, nonatomic) CDUnknownBlockType __deprecated_controllerPausedHandler;
@property (nonatomic, getter=areAllHIDDevicesConnected) BOOL allHIDDevicesConnected;
@property (readonly, nonatomic, getter=isAttachedToDevice) BOOL attachedToDevice;
@property (readonly, copy, nonatomic) GCDeviceBattery *battery;
@property (readonly, nonatomic, getter=isComponentBased) BOOL componentBased;
@property (readonly, nonatomic) NSArray *components;
@property (copy, nonatomic) NSArray *components; // @synthesize components=_components;
@property (copy, nonatomic) CDUnknownBlockType controllerPausedHandler; // @synthesize controllerPausedHandler=_controllerPausedHandler;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *debugDescription;
@property (copy, nonatomic) NSString *debugName;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *description;
@property (readonly, nonatomic) unsigned long long deviceHash;
@property (readonly, nonatomic) GCExtendedGamepad *extendedGamepad;
@property (nonatomic, getter=isForwarded) BOOL forwarded;
@property (readonly, nonatomic) GCGamepad *gamepad;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *handlerQueue; // @synthesize handlerQueue=_handlerQueue;
@property (readonly, strong, nonatomic) GCDeviceHaptics *haptics;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) NSArray *hidServices;
@property (readonly) id<NSObject><NSCopying><NSSecureCoding> identifier;
@property (readonly, nonatomic) id<NSCopying><NSObject><NSSecureCoding> identifier; // @synthesize identifier=_identifier;
@property (readonly, strong, nonatomic) GCDeviceLight *light;
@property (readonly, nonatomic) GCMicroGamepad *microGamepad;
@property (readonly, nonatomic) GCMotion *motion;
@property (readonly, nonatomic) id<GCControllerMotionConfigurableSensors> motionConfigurableSensors;
@property (strong, nonatomic) NSString *physicalDeviceUniqueID;
@property (nonatomic) BOOL physicalDeviceUsesCompass;
@property (readonly, nonatomic) GCPhysicalInputProfile *physicalInputProfile;
@property (nonatomic) long long playerIndex;
@property (readonly, nonatomic) NSString *productCategory;
@property (readonly, nonatomic) NSString *productCategory;
@property (strong, nonatomic) GCPhysicalInputProfile<GCNamedProfile> *profile;
@property (nonatomic, getter=isPublished) BOOL published;
@property (readonly, nonatomic) unsigned int service;
@property (readonly, nonatomic) GCControllerSettings *settings;
@property (readonly, nonatomic) GCControllerSettings *settingsForBundleID;
@property (readonly, getter=isSnapshot) BOOL snapshot; // @synthesize snapshot=_snapshot;
@property (readonly) Class superclass;
@property (readonly) Class superclass;
@property (readonly) Class superclass;
@property (strong, nonatomic) NSString *uniqueIdentifier;
@property (readonly, copy, nonatomic) NSString *vendorName;

+ (void)__daemon__appDidEnterBackground;
+ (void)__daemon__appWillEnterForeground;
+ (void)__openXPC__;
+ (void)__openXPC_and_CBApplicationDidBecomeActive__;
+ (void)__open__;
+ (void)__setLogger__:(CDUnknownBlockType)arg1;
+ (void)_startWirelessControllerDiscoveryWithCompanions:(BOOL)arg1 btClassic:(BOOL)arg2 btle:(BOOL)arg3 completionHandler:(CDUnknownBlockType)arg4;
+ (id)controllerWithExtendedGamepad;
+ (id)controllerWithMicroGamepad;
+ (id)controllers;
+ (id)current;
+ (void)startWirelessControllerDiscoveryWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)stopWirelessControllerDiscovery;
+ (BOOL)supportsSecureCoding;
- (void).cxx_destruct;
- (void)_becomeCurrent;
- (id)_legacy_batteryStatus;
- (id)_legacy_description;
- (id)_legacy_extendedGamepad;
- (id)_legacy_gamepad;
- (BOOL)_legacy_isAttachedToDevice;
- (BOOL)_legacy_isEqualToController:(id)arg1;
- (id)_legacy_keyboard;
- (id)_legacy_microGamepad;
- (id)_legacy_motion;
- (id)_legacy_mouse;
- (id)_legacy_physicalInputProfile;
- (id)_legacy_physicalInputProfileName;
- (long long)_legacy_playerIndex;
- (id)_legacy_productCategory;
- (void)_legacy_setPlayerIndex:(long long)arg1;
- (id)_legacy_vendorName;
- (void)_setSnapshot:(BOOL)arg1;
- (void)addComponent:(id)arg1;
- (void)addServiceRef:(id)arg1;
- (void)addServiceRefs:(id)arg1;
- (void)addServiceRefsWithDevice:(id)arg1;
- (id)capture;
- (void)clearServiceRef;
- (id)controllerSettings;
- (void *)createInputBufferForDevice:(struct __IOHIDDevice *)arg1 withSize:(unsigned long long)arg2;
- (void)dealloc;
- (id)detailedProductCategory;
- (BOOL)displayTrueSiriRemoteName;
- (void)encodeWithCoder:(id)arg1;
- (void)handleEvent:(struct __IOHIDEvent *)arg1;
- (id)hapticEngines;
- (BOOL)hasServiceRef:(struct __IOHIDServiceClient *)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithComponents:(id)arg1;
- (id)initWithIdentifier:(id)arg1 components:(id)arg2;
- (id)initWithProfile:(id)arg1;
- (id)initWithProfileClass:(Class)arg1 serviceRef:(struct __IOHIDServiceClient *)arg2;
- (id)initWithProfileClass:(Class)arg1 services:(id)arg2;
- (id)initWithServiceRef:(struct __IOHIDServiceClient *)arg1;
- (void)initializeHapticEngines;
- (BOOL)isATVRemote;
- (BOOL)isEqualToController:(id)arg1;
- (BOOL)isProxyController;
- (id)physicalInputProfileName;
- (void)removeComponent:(id)arg1;
- (void)removeHapticEngines;
- (void)removeServiceRef:(struct __IOHIDServiceClient *)arg1;
- (unsigned int)sampleRate;
- (void)setDeviceHash:(unsigned long long)arg1;
- (void)setHidServices:(id)arg1;
- (void)setIsProxyController:(BOOL)arg1;
- (void)setService:(unsigned int)arg1;
- (void)setVendorName:(id)arg1;

@end

