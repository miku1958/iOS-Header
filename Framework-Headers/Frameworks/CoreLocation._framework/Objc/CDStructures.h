//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

@class MISSING_TYPE;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGSize {
    double width;
    double height;
};

struct CLAssertionInternal {
    id _field1;
    struct CLConnectionClient *_field2;
};

struct CLConnectionClient;

struct CLConnectionMessage;

struct CLLocationCoordinate2D {
    double latitude;
    double longitude;
};

struct _CLLocationManagerStateTrackerState {
    double distanceFilter;
    double desiredAccuracy;
    BOOL updatingLocation;
    BOOL requestingLocation;
    BOOL requestingRanging;
    BOOL updatingRanging;
    BOOL updatingHeading;
    double headingFilter;
    BOOL allowsLocationPrompts;
    BOOL allowsAlteredAccessoryLocations;
    BOOL dynamicAccuracyReductionEnabled;
    BOOL previousAuthorizationStatusValid;
    int previousAuthorizationStatus;
    BOOL limitsPrecision;
    long long activityType;
    int pausesLocationUpdatesAutomatically;
    BOOL paused;
    BOOL allowsBackgroundLocationUpdates;
    BOOL showsBackgroundLocationIndicator;
    BOOL allowsMapCorrection;
    BOOL batchingLocation;
    BOOL updatingVehicleSpeed;
    BOOL updatingVehicleHeading;
    BOOL matchInfoEnabled;
    BOOL groundAltitudeEnabled;
    BOOL fusionInfoEnabled;
    BOOL courtesyPromptNeeded;
    BOOL isAuthorizedForWidgetUpdates;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field1;
                struct __short {
                    union {
                        unsigned char _field1;
                        char _field2;
                    } _field1;
                    char _field2[23];
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct os_state_hints_s {
    unsigned int _field1;
    char *_field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct shared_ptr<CLConnectionMessage> {
    struct CLConnectionMessage *_field1;
    struct __shared_weak_count *_field2;
};

struct unique_ptr<CLConnectionClient, std::__1::default_delete<CLConnectionClient>> {
    struct __compressed_pair<CLConnectionClient *, std::__1::default_delete<CLConnectionClient>> {
        struct CLConnectionClient *__value_;
    } __ptr_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
} CDStruct_b7b5e951;

typedef struct {
    MISSING_TYPE *columns[3];
} CDStruct_8e0628e6;

typedef struct {
    MISSING_TYPE *columns[4];
} CDStruct_14d5dc5e;

typedef struct {
    float v[6][6];
} CDStruct_2972252c;

typedef struct {
    double x;
    double y;
    double z;
    double magneticHeading;
    double trueHeading;
    double accuracy;
    double timestamp;
    double temperature;
    double magnitude;
    double inclination;
    int calibration;
} CDStruct_b560b707;

typedef struct {
    double speed;
    double timestamp;
    double machContinuousTime;
    double machAbsoluteTime;
} CDStruct_6a5f25ec;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    int _field4;
} CDStruct_b141a4d0;

typedef struct {
    double coordinate__horizontalAccuracy;
} CDStruct_c3074bf1;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    float _field6;
    float _field7;
    float _field8;
    BOOL _field9;
    int _field10;
    struct {
        double _field1;
        double _field2;
    } _field11;
    double _field12;
    int _field13;
    int _field14;
    BOOL _field15;
    struct {
        double _field1;
        double _field2;
        BOOL _field3;
        BOOL _field4;
    } _field16;
    struct {
        double _field1;
        double _field2;
    } _field17;
    int _field18;
    float _field19;
    struct {
        double _field1;
        double _field2;
    } _field20;
    double _field21;
    double _field22;
    int _field23;
    BOOL _field24;
    double _field25;
    double _field26;
    double _field27;
    double _field28;
    double _field29;
    double _field30;
    BOOL _field31;
    struct {
        double _field1;
        double _field2;
    } _field32;
    double _field33;
    int _field34;
    double _field35;
    double _field36;
} CDStruct_9ef4a103;

typedef struct {
    int padding1;
    int suitability;
    CDStruct_2c43369c coordinate;
    double horizontalAccuracy;
    double altitude;
    double verticalAccuracy;
    double padding2;
    double padding3;
    double speed;
    double speedAccuracy;
    double course;
    double courseAccuracy;
    double timestamp;
    int confidence;
    double lifespan;
    int type;
    CDStruct_2c43369c rawCoordinate;
    double rawCourse;
    int floor;
    unsigned int integrity;
    int referenceFrame;
    int rawReferenceFrame;
    int signalEnvironmentType;
} CDStruct_0f4838e9;

typedef struct {
    char identifier[512];
    char onBehalfOfIdentifier[512];
    int type;
    BOOL notifyOnEntry;
    BOOL notifyOnExit;
    BOOL conservativeEntry;
    BOOL emergency;
    union {
        struct {
            char proximityUUID[512];
            unsigned short major;
            unsigned short minor;
            int definitionMask;
            BOOL notifyEntryStateOnDisplay;
        } beaconAttributes;
        struct {
            CDStruct_2c43369c center;
            double radius;
            double desiredAccuracy;
            int referenceFrame;
            BOOL allowMonitoringWhileNearby;
            BOOL lowPower;
        } circularAttributes;
        struct {
            CDStruct_2c43369c vertices[101];
            int verticesCount;
            int referenceFrame;
            BOOL allowMonitoringWhileNearby;
        } polygonalAttributes;
    } ;
} CDStruct_739493b2;

// Ambiguous groups
typedef struct {
    unsigned long long _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned char _field6;
    unsigned char _field7;
    unsigned char _field8;
    unsigned char _field9;
    unsigned char _field10;
    unsigned char _field11;
    unsigned char _field12;
} CDStruct_789f8997;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field1;
                struct __short {
                    union {
                        unsigned char _field1;
                        char _field2;
                    } _field1;
                    char _field2[23];
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
} basic_string_a1f69cfb;

typedef struct shared_ptr<CLConnectionMessage> {
    struct CLConnectionMessage *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_bdcc6d0f;

