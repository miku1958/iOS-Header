//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <MPSNeuralNetwork/MPSNNGradientFilterNode.h>

@class MPSCNNLossDescriptor;
@protocol MPSNNLossCallback;

@interface MPSNNLossGradientNode : MPSNNGradientFilterNode
{
    unsigned int _lossType;
    int _reductionType;
    float _weight;
    float _labelSmoothing;
    unsigned long long _numberOfClasses;
    float _epsilon;
    float _delta;
    MPSCNNLossDescriptor *_descriptor;
    BOOL _isLabelsGradientFilter;
    id<MPSNNLossCallback> _propertyCallBack;
    BOOL _reduceAcrossBatch;
}

@property (readonly, nonatomic) float delta; // @synthesize delta=_delta;
@property (readonly, nonatomic) float epsilon; // @synthesize epsilon=_epsilon;
@property (readonly, nonatomic) BOOL isLabelsGradientFilter; // @synthesize isLabelsGradientFilter=_isLabelsGradientFilter;
@property (readonly, nonatomic) float labelSmoothing; // @synthesize labelSmoothing=_labelSmoothing;
@property (readonly, nonatomic) unsigned int lossType; // @synthesize lossType=_lossType;
@property (readonly, nonatomic) unsigned long long numberOfClasses; // @synthesize numberOfClasses=_numberOfClasses;
@property (strong, nonatomic) id<MPSNNLossCallback> propertyCallBack; // @synthesize propertyCallBack=_propertyCallBack;
@property (readonly, nonatomic) BOOL reduceAcrossBatch; // @synthesize reduceAcrossBatch=_reduceAcrossBatch;
@property (readonly, nonatomic) int reductionType; // @synthesize reductionType=_reductionType;
@property (readonly, nonatomic) float weight; // @synthesize weight=_weight;

+ (id)nodeWithSourceGradient:(id)arg1 sourceImage:(id)arg2 labels:(id)arg3 gradientState:(id)arg4 lossDescriptor:(id)arg5 isLabelsGradientFilter:(BOOL)arg6;
+ (id)nodeWithSourceGradient:(id)arg1 sourceImage:(id)arg2 labels:(id)arg3 weights:(id)arg4 gradientState:(id)arg5 lossDescriptor:(id)arg6 isLabelsGradientFilter:(BOOL)arg7;
+ (id)nodeWithSources:(id)arg1 gradientState:(id)arg2 lossDescriptor:(id)arg3 isLabelsGradientFilter:(BOOL)arg4;
- (void)dealloc;
- (id)gradientFilterWithSources:(id)arg1;
- (id)initWithSourceGradient:(id)arg1 sourceImage:(id)arg2 labels:(id)arg3 gradientState:(id)arg4 lossDescriptor:(id)arg5 isLabelsGradientFilter:(BOOL)arg6;
- (id)initWithSourceGradient:(id)arg1 sourceImage:(id)arg2 labels:(id)arg3 weights:(id)arg4 gradientState:(id)arg5 lossDescriptor:(id)arg6 isLabelsGradientFilter:(BOOL)arg7;
- (id)initWithSources:(id)arg1 gradientState:(id)arg2 lossDescriptor:(id)arg3 isLabelsGradientFilter:(BOOL)arg4;
- (struct FilterGraphNode *)newFilterNode;

@end

