//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <MPSCore/MPSKernel.h>

@class MPSMatrixMultiplication;

@interface MPSRNNMatrixInferenceLayer : MPSKernel
{
    int *layerTypes;
    void **layers;
    void **forwardLayers;
    int *forwardLayerTypes;
    unsigned long long nForwardLayers;
    void **backwardLayers;
    int *backwardLayerTypes;
    unsigned long long nBackwardLayers;
    MPSMatrixMultiplication *gemmKernel;
    MPSMatrixMultiplication *gemmKernelNonTranspose;
    BOOL _recurrentOutputIsTemporary;
    BOOL _storeAllIntermediateStates;
    BOOL _propagateFullRecurrentRows;
    unsigned long long _numberOfLayers;
    unsigned long long _bidirectionalCombineMode;
    unsigned long long _inputFeatureChannels;
    unsigned long long _outputFeatureChannels;
}

@property (nonatomic) unsigned long long bidirectionalCombineMode; // @synthesize bidirectionalCombineMode=_bidirectionalCombineMode;
@property (readonly, nonatomic) unsigned long long inputFeatureChannels; // @synthesize inputFeatureChannels=_inputFeatureChannels;
@property (readonly, nonatomic) unsigned long long numberOfLayers; // @synthesize numberOfLayers=_numberOfLayers;
@property (readonly, nonatomic) unsigned long long outputFeatureChannels; // @synthesize outputFeatureChannels=_outputFeatureChannels;
@property (nonatomic) BOOL propagateFullRecurrentRows; // @synthesize propagateFullRecurrentRows=_propagateFullRecurrentRows;
@property (nonatomic) BOOL recurrentOutputIsTemporary; // @synthesize recurrentOutputIsTemporary=_recurrentOutputIsTemporary;
@property (nonatomic) BOOL storeAllIntermediateStates; // @synthesize storeAllIntermediateStates=_storeAllIntermediateStates;

+ (const struct MPSLibraryInfo *)libraryInfo:(struct MPSDevice *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1 device:(id)arg2;
- (void)dealloc;
- (void)encodeBidirectionalSequenceToCommandBuffer:(id)arg1 sourceSequence:(id)arg2 destinationForwardMatrices:(id)arg3 destinationBackwardMatrices:(id)arg4;
- (void)encodeSequenceToCommandBuffer:(id)arg1 sourceMatrices:(id)arg2 destinationMatrices:(id)arg3 recurrentInputState:(id)arg4 recurrentOutputStates:(id)arg5;
- (void)encodeSequenceToCommandBuffer:(id)arg1 sourceMatrices:(id)arg2 sourceOffsets:(unsigned long long *)arg3 destinationMatrices:(id)arg4 destinationOffsets:(unsigned long long *)arg5 recurrentInputState:(id)arg6 recurrentOutputStates:(id)arg7;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1 device:(id)arg2;
- (id)initWithDevice:(id)arg1 rnnDescriptor:(id)arg2;
- (id)initWithDevice:(id)arg1 rnnDescriptors:(id)arg2;
- (id)recurrentStateForBatchSize:(unsigned long long)arg1;
- (id)temporaryRecurrentStateForCommandBuffer:(id)arg1 batchSize:(unsigned long long)arg2;

@end

