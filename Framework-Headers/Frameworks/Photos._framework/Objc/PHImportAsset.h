//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <Photos/PHImportDuplicateCheckerItem-Protocol.h>

@class AVAssetImageGenerator, IPAMetadata, NSArray, NSData, NSDate, NSDictionary, NSMutableArray, NSMutableDictionary, NSNumber, NSSet, NSString, NSURL, PHImportSource;
@protocol OS_dispatch_queue;

@interface PHImportAsset : NSObject <PHImportDuplicateCheckerItem>
{
    PHImportSource *_source;
    PHImportSource *_strongSource;
    struct os_unfair_lock_s _metadataLock;
    BOOL _isImage;
    unsigned char _duplicateStateConfidence;
    BOOL _isJPEG;
    BOOL _isRAW;
    BOOL _isTIFF;
    BOOL _isHEIF;
    BOOL _isMovie;
    BOOL _isAudio;
    BOOL _isRelated;
    BOOL _canReference;
    BOOL _isDuplicate;
    BOOL _treatAsUnsupportedRAW;
    BOOL _sidecarsLoaded;
    unsigned char _fileLocation;
    id _uuid;
    IPAMetadata *_metadata;
    PHImportAsset *_rawAsset;
    PHImportAsset *_videoComplement;
    PHImportAsset *_largeRender;
    PHImportAsset *_audioAsset;
    NSMutableArray *_relatedBurstAssets;
    PHImportAsset *_burstPick;
    id _avchdAssetId;
    id _assetId;
    NSMutableDictionary *_duplicates;
    NSDate *_lastDuplicateCheck;
    NSURL *_url;
    NSString *_uti;
    NSString *_fileName;
    NSString *_createdFileName;
    unsigned long long _fileSize;
    NSString *_fileExtension;
    NSDictionary *_assetProperties;
    NSURL *_rawURL;
    NSDictionary *_rawAssetProperties;
    NSURL *_videoComplementURL;
    NSDictionary *_videoComplementAssetProperties;
    NSURL *_largeRenderURL;
    NSDictionary *_largeRenderAssetProperties;
    PHImportAsset *_thumbnailRender;
    NSURL *_thumbnailRenderURL;
    NSDictionary *_thumbnailRenderAssetProperties;
    PHImportAsset *_miniRender;
    NSURL *_miniRenderURL;
    NSURL *_audioAssetURL;
    id _sourceAssetIndetifier;
    NSDate *_fileCreationDate;
    NSDate *_fileModificationDate;
    NSSet *_duplicateAssets;
    AVAssetImageGenerator *_imageGenerator;
    NSMutableDictionary *_sidecarAssetsOfType;
    NSObject<OS_dispatch_queue> *_loadSidecars;
    NSDate *_exifImageDate;
    unsigned long long _copyMethod;
    NSData *_fileData;
    long long _resourceType;
    struct CGSize _thumbnailSize;
    struct CGSize _imageSize;
}

@property (readonly, nonatomic) unsigned long long approximateBytesRequiredToImport;
@property (readonly) id assetId; // @synthesize assetId=_assetId;
@property (strong, nonatomic) NSDictionary *assetProperties; // @synthesize assetProperties=_assetProperties;
@property (strong, nonatomic) PHImportAsset *audioAsset; // @synthesize audioAsset=_audioAsset;
@property (strong, nonatomic) NSURL *audioAssetURL; // @synthesize audioAssetURL=_audioAssetURL;
@property (readonly) id avchdAssetId; // @synthesize avchdAssetId=_avchdAssetId;
@property (strong, nonatomic) PHImportAsset *burstPick; // @synthesize burstPick=_burstPick;
@property (readonly, nonatomic) NSString *burstUUID;
@property (readonly, nonatomic) BOOL canDelete;
@property (readonly, nonatomic) BOOL canReference; // @synthesize canReference=_canReference;
@property (nonatomic) unsigned long long copyMethod; // @synthesize copyMethod=_copyMethod;
@property (strong, nonatomic) NSString *createdFileName; // @synthesize createdFileName=_createdFileName;
@property (readonly) NSDate *dateKey;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly, nonatomic) NSSet *duplicateAssets; // @synthesize duplicateAssets=_duplicateAssets;
@property unsigned char duplicateStateConfidence; // @synthesize duplicateStateConfidence=_duplicateStateConfidence;
@property (strong) NSMutableDictionary *duplicates; // @synthesize duplicates=_duplicates;
@property (readonly, nonatomic) NSNumber *duration;
@property (strong, nonatomic) NSDate *exifImageDate; // @synthesize exifImageDate=_exifImageDate;
@property (strong, nonatomic) NSDate *fileCreationDate; // @synthesize fileCreationDate=_fileCreationDate;
@property (strong, nonatomic) NSData *fileData; // @synthesize fileData=_fileData;
@property (strong, nonatomic) NSString *fileExtension; // @synthesize fileExtension=_fileExtension;
@property (nonatomic) unsigned char fileLocation; // @synthesize fileLocation=_fileLocation;
@property (strong, nonatomic) NSDate *fileModificationDate; // @synthesize fileModificationDate=_fileModificationDate;
@property (strong, nonatomic) NSString *fileName; // @synthesize fileName=_fileName;
@property (nonatomic) unsigned long long fileSize; // @synthesize fileSize=_fileSize;
@property (readonly, nonatomic) BOOL hasAdjustments;
@property (readonly, nonatomic) BOOL hasAudioAttachment;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) AVAssetImageGenerator *imageGenerator; // @synthesize imageGenerator=_imageGenerator;
@property (nonatomic) struct CGSize imageSize; // @synthesize imageSize=_imageSize;
@property (readonly, nonatomic) BOOL isAVCHD;
@property (readonly, nonatomic) BOOL isAudio; // @synthesize isAudio=_isAudio;
@property (readonly, nonatomic) BOOL isBurst;
@property BOOL isDuplicate; // @synthesize isDuplicate=_isDuplicate;
@property (readonly, nonatomic) BOOL isGrouped;
@property (readonly, nonatomic) BOOL isHDR;
@property (readonly, nonatomic) BOOL isHEIF; // @synthesize isHEIF=_isHEIF;
@property (readonly, nonatomic) BOOL isImage; // @synthesize isImage=_isImage;
@property (readonly, nonatomic) BOOL isJPEG; // @synthesize isJPEG=_isJPEG;
@property (readonly, nonatomic) BOOL isJpegPlusRAW;
@property (readonly, nonatomic) BOOL isLivePhoto;
@property (readonly, nonatomic) BOOL isMovie; // @synthesize isMovie=_isMovie;
@property (readonly, nonatomic) BOOL isRAW; // @synthesize isRAW=_isRAW;
@property (readonly, nonatomic) BOOL isRelated; // @synthesize isRelated=_isRelated;
@property (readonly, nonatomic) BOOL isRendered;
@property (readonly, nonatomic) BOOL isSDOF;
@property (readonly, nonatomic) BOOL isSloMo;
@property (readonly, nonatomic) BOOL isTIFF; // @synthesize isTIFF=_isTIFF;
@property (readonly, nonatomic) BOOL isTagged;
@property (readonly, nonatomic) BOOL isTimelapse;
@property (readonly, nonatomic) BOOL isViewable;
@property (strong, nonatomic) PHImportAsset *largeRender; // @synthesize largeRender=_largeRender;
@property (strong, nonatomic) NSDictionary *largeRenderAssetProperties; // @synthesize largeRenderAssetProperties=_largeRenderAssetProperties;
@property (strong, nonatomic) NSURL *largeRenderURL; // @synthesize largeRenderURL=_largeRenderURL;
@property (strong) NSDate *lastDuplicateCheck; // @synthesize lastDuplicateCheck=_lastDuplicateCheck;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *loadSidecars; // @synthesize loadSidecars=_loadSidecars;
@property (strong, nonatomic) IPAMetadata *metadata; // @synthesize metadata=_metadata;
@property (strong, nonatomic) PHImportAsset *miniRender; // @synthesize miniRender=_miniRender;
@property (strong, nonatomic) NSURL *miniRenderURL; // @synthesize miniRenderURL=_miniRenderURL;
@property (readonly) id nameKey;
@property (readonly) id originatingAssetID;
@property (readonly, nonatomic) NSString *parentFolderPath;
@property (strong, nonatomic) PHImportAsset *rawAsset; // @synthesize rawAsset=_rawAsset;
@property (strong, nonatomic) NSDictionary *rawAssetProperties; // @synthesize rawAssetProperties=_rawAssetProperties;
@property (strong, nonatomic) NSURL *rawURL; // @synthesize rawURL=_rawURL;
@property (strong, nonatomic) NSMutableArray *relatedBurstAssets; // @synthesize relatedBurstAssets=_relatedBurstAssets;
@property (readonly, nonatomic) id representedObject;
@property (nonatomic) long long resourceType; // @synthesize resourceType=_resourceType;
@property (readonly, nonatomic) NSArray *sidecarAssets;
@property (strong, nonatomic) NSMutableDictionary *sidecarAssetsOfType; // @synthesize sidecarAssetsOfType=_sidecarAssetsOfType;
@property (nonatomic) BOOL sidecarsLoaded; // @synthesize sidecarsLoaded=_sidecarsLoaded;
@property (readonly) id sizeKey;
@property (weak, nonatomic) PHImportSource *source; // @synthesize source=_source;
@property (strong, nonatomic) id sourceAssetIndetifier; // @synthesize sourceAssetIndetifier=_sourceAssetIndetifier;
@property (readonly) Class superclass;
@property (strong, nonatomic) PHImportAsset *thumbnailRender; // @synthesize thumbnailRender=_thumbnailRender;
@property (strong, nonatomic) NSDictionary *thumbnailRenderAssetProperties; // @synthesize thumbnailRenderAssetProperties=_thumbnailRenderAssetProperties;
@property (strong, nonatomic) NSURL *thumbnailRenderURL; // @synthesize thumbnailRenderURL=_thumbnailRenderURL;
@property (nonatomic) struct CGSize thumbnailSize; // @synthesize thumbnailSize=_thumbnailSize;
@property (nonatomic) BOOL treatAsUnsupportedRAW; // @synthesize treatAsUnsupportedRAW=_treatAsUnsupportedRAW;
@property (strong, nonatomic) NSURL *url; // @synthesize url=_url;
@property (strong, nonatomic) NSString *uti; // @synthesize uti=_uti;
@property (readonly, nonatomic) id uuid; // @synthesize uuid=_uuid;
@property (strong, nonatomic) PHImportAsset *videoComplement; // @synthesize videoComplement=_videoComplement;
@property (strong, nonatomic) NSDictionary *videoComplementAssetProperties; // @synthesize videoComplementAssetProperties=_videoComplementAssetProperties;
@property (strong, nonatomic) NSURL *videoComplementURL; // @synthesize videoComplementURL=_videoComplementURL;

+ (id)assetFileForURL:(id)arg1;
+ (BOOL)conformsToUTTypes:(id)arg1 forExtention:(id)arg2;
+ (void)determineIfTIFFIsRAW:(id)arg1 url:(id)arg2;
+ (BOOL)isAudio:(id)arg1;
+ (BOOL)isAudioUTI:(id)arg1;
+ (BOOL)isHeifUTI:(id)arg1;
+ (BOOL)isImage:(id)arg1;
+ (BOOL)isImageUTI:(id)arg1;
+ (BOOL)isJpegUTI:(id)arg1;
+ (BOOL)isMovie:(id)arg1;
+ (BOOL)isMovieUTI:(id)arg1;
+ (BOOL)isRawUTI:(id)arg1;
+ (BOOL)isSidecarType:(id)arg1;
+ (unsigned char)isSupportedFile:(id)arg1 uti:(id)arg2;
+ (BOOL)isTiffUTI:(id)arg1;
+ (id)loadDatesForAssets:(id)arg1 atEnd:(CDUnknownBlockType)arg2;
+ (void)logImageDateFileDateDifferencesForAsset:(id)arg1;
+ (id)supportedAudioTypes;
+ (id)supportedImageTypes;
+ (id)supportedMovieTypes;
+ (id)supportedTypes;
+ (BOOL)uti:(id)arg1 conformsToUTTypes:(id)arg2;
- (void).cxx_destruct;
- (void)_accessMetadata:(CDUnknownBlockType)arg1;
- (void)_addRelatedRecordsToRecord:(id)arg1 primaryRecord:(id)arg2;
- (void)_loadSidecarFiles;
- (void)_setMetadata:(id)arg1;
- (id)aaeSidecar;
- (void)addBurstAsset:(id)arg1;
- (void)addSidecarAsset:(id)arg1;
- (struct CGImage *)avThumbnailOfSize:(unsigned long long)arg1 canceler:(id)arg2 error:(id *)arg3;
- (int)burstPickType;
- (BOOL)canPreserveFolderStructure;
- (struct CGSize)cgImageSize;
- (id)checkForSidecarWithExtension:(id)arg1;
- (void)configureWithUTI:(id)arg1 supportedType:(unsigned char)arg2;
- (struct CGSize)cropEXIFThumbSize:(struct CGSize)arg1 originalSize:(struct CGSize)arg2;
- (id)descriptionWithPrefix:(id)arg1;
- (void)downloadToPathAsync:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)duplicateAssetsForLibrary:(id)arg1;
- (id)groupingUUID;
- (BOOL)hasOriginalResourceType;
- (struct CGImage *)imageThumbnailOfSize:(unsigned long long)arg1 canceler:(id)arg2 error:(id *)arg3;
- (id)importRecordForPrimaryAsset;
- (void)informDelegateOfAssetUpdates;
- (id)init;
- (id)initWithURL:(id)arg1 uti:(id)arg2 supportedType:(unsigned char)arg3;
- (BOOL)isAppropriateForUI;
- (BOOL)isBlessed:(id)arg1 includeXmp:(BOOL)arg2;
- (BOOL)isValidForReference;
- (BOOL)isValidMetadata:(id)arg1;
- (BOOL)isVideoComplementOf:(id)arg1;
- (void)loadMetadataAsync:(CDUnknownBlockType)arg1;
- (void)loadMetadataSync;
- (void)loadSidecarFiles;
- (id)mediaGroupId;
- (BOOL)performAdditionalLivePhotoChecksOnImageAsset:(id)arg1;
- (id)relatedAssets;
- (unsigned long long)relatedBytes;
- (struct CGImage *)removeBlackBarsFromExifThumbnail:(struct CGImage *)arg1 fullSize:(struct CGSize)arg2;
- (void)removeSidecarAsset:(id)arg1;
- (id)resourceTypes;
- (void)setDuplicates:(id)arg1 forLibrary:(id)arg2;
- (id)sidecarAssetAtPath:(id)arg1;
- (unsigned long long)sidecarAssetBytes;
- (id)sidecarInfoDictionaries;
- (id)sidecarInfoDictionary;
- (id)slmSidecar;
- (id)thumbnailForSize:(unsigned long long)arg1 atEnd:(CDUnknownBlockType)arg2;
- (id)thumbnailForSize:(unsigned long long)arg1 priority:(unsigned char)arg2 atEnd:(CDUnknownBlockType)arg3;
- (void)thumbnailUsingRequest:(id)arg1 atEnd:(CDUnknownBlockType)arg2;
- (id)timezoneCorrectedExifImageDate;
- (void)updateIsRAW:(BOOL)arg1 uti:(id)arg2;
- (id)validateMetadataForImportRecord:(id)arg1;
- (id)xmpSidecar;

@end

