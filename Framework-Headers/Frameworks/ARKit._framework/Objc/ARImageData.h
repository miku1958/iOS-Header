//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <ARKit/ARDictionaryCoding-Protocol.h>
#import <ARKit/ARSensorData-Protocol.h>
#import <ARKit/NSCopying-Protocol.h>
#import <ARKit/NSSecureCoding-Protocol.h>

@class ARFaceData, AVDepthData, MISSING_TYPE, NSDate, NSString;

@interface ARImageData : NSObject <ARDictionaryCoding, ARSensorData, NSCopying, NSSecureCoding>
{
    BOOL _mirrored;
    BOOL _secondary;
    float _exposureTargetOffset;
    float _temperature;
    float _signalToNoiseRatio;
    float _ISO;
    double _timestamp;
    NSDate *_captureDate;
    double _currentCaptureTimestamp;
    struct __CVBuffer *_pixelBuffer;
    unsigned long long _lensType;
    double _exposureDuration;
    long long _deviceOrientation;
    ARFaceData *_faceData;
    AVDepthData *_depthData;
    double _depthDataTimestamp;
    struct __CVBuffer *_visionData;
    long long _cameraPosition;
    NSString *_cameraType;
    long long _captureFramesPerSecond;
    struct CGSize _imageResolution;
    MISSING_TYPE *_tangentialDistortion;
    MISSING_TYPE *_radialDistortion;
    CDStruct_8e0628e6 _cameraIntrinsics;
}

@property (nonatomic) float ISO; // @synthesize ISO=_ISO;
@property (nonatomic) CDStruct_8e0628e6 cameraIntrinsics; // @synthesize cameraIntrinsics=_cameraIntrinsics;
@property (nonatomic) long long cameraPosition; // @synthesize cameraPosition=_cameraPosition;
@property (strong, nonatomic) NSString *cameraType; // @synthesize cameraType=_cameraType;
@property (copy, nonatomic) NSDate *captureDate; // @synthesize captureDate=_captureDate;
@property (nonatomic) long long captureFramesPerSecond; // @synthesize captureFramesPerSecond=_captureFramesPerSecond;
@property (nonatomic) double currentCaptureTimestamp; // @synthesize currentCaptureTimestamp=_currentCaptureTimestamp;
@property (readonly, copy) NSString *debugDescription;
@property (strong, nonatomic) AVDepthData *depthData; // @synthesize depthData=_depthData;
@property (nonatomic) double depthDataTimestamp; // @synthesize depthDataTimestamp=_depthDataTimestamp;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long deviceOrientation; // @synthesize deviceOrientation=_deviceOrientation;
@property (nonatomic) double exposureDuration; // @synthesize exposureDuration=_exposureDuration;
@property (nonatomic) float exposureTargetOffset; // @synthesize exposureTargetOffset=_exposureTargetOffset;
@property (strong, nonatomic) ARFaceData *faceData; // @synthesize faceData=_faceData;
@property (readonly) unsigned long long hash;
@property (nonatomic) struct CGSize imageResolution; // @synthesize imageResolution=_imageResolution;
@property (nonatomic) unsigned long long lensType; // @synthesize lensType=_lensType;
@property (nonatomic, getter=isMirrored) BOOL mirrored; // @synthesize mirrored=_mirrored;
@property (readonly, nonatomic) ARImageData *originalImage;
@property (nonatomic) struct __CVBuffer *pixelBuffer; // @synthesize pixelBuffer=_pixelBuffer;
@property (nonatomic) MISSING_TYPE *radialDistortion; // @synthesize radialDistortion=_radialDistortion;
@property (nonatomic, getter=isSecondary) BOOL secondary; // @synthesize secondary=_secondary;
@property (nonatomic) float signalToNoiseRatio; // @synthesize signalToNoiseRatio=_signalToNoiseRatio;
@property (readonly) Class superclass;
@property (nonatomic) MISSING_TYPE *tangentialDistortion; // @synthesize tangentialDistortion=_tangentialDistortion;
@property (nonatomic) float temperature; // @synthesize temperature=_temperature;
@property (nonatomic) double timestamp; // @synthesize timestamp=_timestamp;
@property (nonatomic) struct __CVBuffer *visionData; // @synthesize visionData=_visionData;

+ (id)captureDateFromPresentationTimestamp:(CDStruct_1b6d18a9)arg1 session:(id)arg2;
+ (BOOL)supportsSecureCoding;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)encodeToDictionary;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDictionary:(id)arg1;
- (id)initWithImageData:(id)arg1;
- (id)initWithPixelBuffer:(struct __CVBuffer *)arg1 captureFramePerSecond:(long long)arg2 captureDevice:(id)arg3 captureSession:(id)arg4 timestamp:(CDStruct_1b6d18a9)arg5 intrinsics:(CDStruct_8e0628e6)arg6 exif:(id)arg7;
- (id)initWithSampleBuffer:(struct opaqueCMSampleBuffer *)arg1 captureFramePerSecond:(long long)arg2 captureDevice:(id)arg3 captureSession:(id)arg4;
- (BOOL)isEqual:(id)arg1;
- (BOOL)matchesPixelBufferPointerRecursively:(void *)arg1;

@end

