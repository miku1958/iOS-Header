//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <SceneKit/SCNView.h>

#import <ARKit/ARInternalSessionObserver-Protocol.h>
#import <ARKit/_SCNSceneRendererDelegate-Protocol.h>

@class ARPointCloud, ARSession, NSMutableArray, NSMutableDictionary, NSObject, NSString, SCNNode, SCNScene, UIView;
@protocol ARSCNViewDelegate, OS_dispatch_semaphore, SCNCaptureDeviceOutputConsumer;

@interface ARSCNView : SCNView <ARInternalSessionObserver, _SCNSceneRendererDelegate>
{
    ARSession *_session;
    double _lastFrameTimestamp;
    id<SCNCaptureDeviceOutputConsumer> _captureDeviceOutputConsumer;
    SCNNode *_lightNode;
    SCNNode *_cameraNode;
    NSMutableDictionary *_nodesByAnchorIdentifier;
    NSMutableArray *_addedAnchors;
    NSMutableArray *_updatedAnchors;
    NSMutableArray *_removedAnchors;
    SCNNode *_worldOriginNode;
    SCNNode *_featurePointNode;
    ARPointCloud *_currentlyVisibleDebugPointerCloud;
    NSObject<OS_dispatch_semaphore> *_anchorsSemaphore;
    id _originalBackgroundContents;
    unsigned long long _arDebugOptions;
    long long _interfaceOrientation;
    long long _lastInterfaceOrientation;
    struct CGSize _viewportSize;
    UIView *_rotationSnapshot;
    BOOL _automaticallyUpdatesLighting;
    BOOL _shouldRestrictFrameRate;
    BOOL _drawsCameraImage;
    long long _targetFramesPerSecond;
    long long _developerPreferredFramesPerSecond;
    long long _frameToRemoveRotationSnapshotOn;
}

@property (nonatomic) long long actualPreferredFramesPerSecond;
@property (nonatomic) BOOL automaticallyUpdatesLighting; // @synthesize automaticallyUpdatesLighting=_automaticallyUpdatesLighting;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<ARSCNViewDelegate> delegate; // @dynamic delegate;
@property (readonly, copy) NSString *description;
@property long long developerPreferredFramesPerSecond; // @synthesize developerPreferredFramesPerSecond=_developerPreferredFramesPerSecond;
@property BOOL drawsCameraImage; // @synthesize drawsCameraImage=_drawsCameraImage;
@property long long frameToRemoveRotationSnapshotOn; // @synthesize frameToRemoveRotationSnapshotOn=_frameToRemoveRotationSnapshotOn;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) SCNScene *scene; // @dynamic scene;
@property (strong, nonatomic) ARSession *session;
@property BOOL shouldRestrictFrameRate; // @synthesize shouldRestrictFrameRate=_shouldRestrictFrameRate;
@property (readonly) Class superclass;
@property long long targetFramesPerSecond; // @synthesize targetFramesPerSecond=_targetFramesPerSecond;

- (void).cxx_destruct;
- (void)_addAnchors;
- (id)_anchorForNode:(id)arg1 inFrame:(id)arg2;
- (void)_commonInit;
- (void)_forceUpdateCamera;
- (id)_hitTest:(struct CGPoint)arg1 frame:(id)arg2 types:(unsigned long long)arg3;
- (void)_removeAnchors;
- (void)_renderCapturedPixelBuffer:(struct __CVBuffer *)arg1;
- (void)_renderer:(id)arg1 updateAtTime:(double)arg2;
- (void)_updateAnchors;
- (void)_updateCamera:(id)arg1;
- (void)_updateDebugVisualization:(id)arg1;
- (void)_updateFramesPerSecondWithTarget:(long long)arg1 shouldRestrictFrameRate:(BOOL)arg2;
- (void)_updateLighting:(id)arg1;
- (void)_updateNode:(id)arg1 forAnchor:(id)arg2;
- (void)_updatePreferredFramesPerSecond;
- (id)anchorForNode:(id)arg1;
- (void)cleanupLingeringRotationState;
- (unsigned long long)debugOptions;
- (void)deviceOrientationDidChange:(id)arg1;
- (void)didMoveToWindow;
- (void)encodeWithCoder:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1 types:(unsigned long long)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1 options:(id)arg2;
- (void)layoutSubviews;
- (id)nodeForAnchor:(id)arg1;
- (long long)preferredFramesPerSecond;
- (void)session:(id)arg1 cameraDidChangeTrackingState:(id)arg2;
- (void)session:(id)arg1 didAddAnchors:(id)arg2;
- (void)session:(id)arg1 didChangeState:(unsigned long long)arg2;
- (void)session:(id)arg1 didFailWithError:(id)arg2;
- (void)session:(id)arg1 didOutputAudioSampleBuffer:(struct opaqueCMSampleBuffer *)arg2;
- (void)session:(id)arg1 didRemoveAnchors:(id)arg2;
- (void)session:(id)arg1 didUpdateAnchors:(id)arg2;
- (void)session:(id)arg1 didUpdateFrame:(id)arg2;
- (void)sessionInterruptionEnded:(id)arg1;
- (void)sessionWasInterrupted:(id)arg1;
- (void)setDebugOptions:(unsigned long long)arg1;
- (void)setPointOfView:(id)arg1;
- (void)setPreferredFramesPerSecond:(long long)arg1;
- (void)windowDidRotateNotification:(id)arg1;
- (void)windowWillAnimateRotateNotification:(id)arg1;
- (void)windowWillRotateNotification:(id)arg1;

@end

