//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <Foundation/NSObject.h>

#import <UIKit/_UIKeyboardArbitrationClient-Protocol.h>
#import <UIKit/_UIRemoteKeyboardControllerDelegate-Protocol.h>
#import <UIKit/_UIRemoteKeyboardDistributedViewSource-Protocol.h>

@class FBSScene, NSArray, NSHashTable, NSMutableArray, NSMutableSet, NSString, NSXPCConnection, UIScreen, UIView, UIWindow, _UIKeyboardChangedInformation;
@protocol _UIKeyboardArbitration;

@interface _UIRemoteKeyboards : NSObject <_UIRemoteKeyboardDistributedViewSource, _UIKeyboardArbitrationClient, _UIRemoteKeyboardControllerDelegate>
{
    NSHashTable *_windowControllers;
    int _ignoreLayoutSubviews;
    FBSScene *_requiredScene;
    double _requiredLevel;
    NSMutableArray *_activePIDs;
    UIView *_keyboardSnapshot;
    BOOL _expectingInitialState;
    int _hostedCount;
    BOOL _hasFocus;
    BOOL _hadFocusBeforeOverlay;
    BOOL _expectedSuppression;
    int _externalSuppression;
    int _recursionCheck;
    NSMutableSet *_pendingKeyboardGrabs;
    BOOL _takingSnapshot;
    BOOL _windowEnabled;
    UIScreen *_lastScreen;
    BOOL _disablingKeyboard;
    BOOL _enableMultiscreenHack;
    BOOL _currentKeyboard;
    BOOL _updatingHeight;
    BOOL _handlingRemoteEvent;
    BOOL _shouldFence;
    NSXPCConnection *_connection;
    _UIKeyboardChangedInformation *_currentState;
}

@property (strong) NSXPCConnection *connection; // @synthesize connection=_connection;
@property (readonly, strong) NSArray *currentHostedPIDs;
@property BOOL currentKeyboard; // @synthesize currentKeyboard=_currentKeyboard;
@property (strong) _UIKeyboardChangedInformation *currentState; // @synthesize currentState=_currentState;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *description;
@property BOOL disableBecomeFirstResponder;
@property (nonatomic) BOOL enableMultiscreenHack; // @synthesize enableMultiscreenHack=_enableMultiscreenHack;
@property (readonly) BOOL handlingRemoteEvent; // @synthesize handlingRemoteEvent=_handlingRemoteEvent;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long hash;
@property (readonly) double iavHeight;
@property (readonly) double intersectionHeight;
@property (nonatomic) BOOL isSnapshotting;
@property (readonly) BOOL keyboardActive;
@property (readonly) BOOL keyboardVisible;
@property (readonly) UIWindow *keyboardWindow;
@property (readonly) BOOL oldPathForSnapshot;
@property (readonly) id<_UIKeyboardArbitration> proxy;
@property (readonly) BOOL remoteKeyboardUndocked;
@property (readonly, strong) FBSScene *requiredScene;
@property (nonatomic) BOOL shouldFence; // @synthesize shouldFence=_shouldFence;
@property (readonly) Class superclass;
@property (readonly) Class superclass;
@property (readonly) BOOL updatingHeight; // @synthesize updatingHeight=_updatingHeight;

+ (id)createArbiterConnection;
+ (BOOL)enabled;
+ (id)serviceName;
+ (id)sharedRemoteKeyboards;
+ (BOOL)useSystemService;
- (id)_activeScreen;
- (void)_lostWindow:(id)arg1;
- (void)_performOnDistributedControllersExceptSelf:(CDUnknownBlockType)arg1;
- (void)addHostedWindowView:(id)arg1 fromPID:(int)arg2;
- (BOOL)allowedToShowKeyboard;
- (void)applicationResume:(id)arg1;
- (void)checkConnection;
- (void)checkState;
- (void)cleanSuppression;
- (void)completeMoveKeyboardForWindow:(id)arg1;
- (void)completeTransition:(id)arg1 withInfo:(id)arg2;
- (void)controllerDidLayoutSubviews:(id)arg1;
- (void)dealloc;
- (void)didRemoveDeactivationReason:(id)arg1;
- (void)didSuspend:(id)arg1;
- (void)finishWithHostedWindow;
- (void)forceKeyboardAway;
- (void)ignoreLayoutNotifications:(CDUnknownBlockType)arg1;
- (id)init;
- (BOOL)isOnScreenRotating;
- (void)keyboardChanged:(id)arg1 shouldConsiderSnapshottingKeyboard:(BOOL)arg2 isLocalEvent:(BOOL)arg3;
- (void)keyboardChangedCompleted;
- (Class)keyboardWindowClass;
- (BOOL)needsToShowKeyboardForWindow:(id)arg1;
- (void)peekApplicationEvent:(id)arg1;
- (void)performOnControllers:(CDUnknownBlockType)arg1;
- (void)performOnDistributedControllers:(CDUnknownBlockType)arg1;
- (id)prepareForHostedWindow;
- (void)prepareToMoveKeyboard:(struct CGRect)arg1 withIAV:(struct CGRect)arg2 showing:(BOOL)arg3 forScreen:(id)arg4;
- (void)queue_applicationLostFocusWithCompletion:(CDUnknownBlockType)arg1;
- (void)queue_failedConnection:(id)arg1;
- (void)queue_getDebugInfoWithCompletion:(CDUnknownBlockType)arg1;
- (void)queue_keyboardChanged:(id)arg1 onComplete:(CDUnknownBlockType)arg2;
- (void)queue_keyboardChangedWithCompletion:(CDUnknownBlockType)arg1;
- (void)queue_keyboardSuppressed:(BOOL)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)queue_keyboardTransition:(id)arg1 event:(unsigned long long)arg2 withInfo:(id)arg3 onComplete:(CDUnknownBlockType)arg4;
- (void)queue_setKeyboardDisabled:(BOOL)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)registerController:(id)arg1;
- (void)reloadForSnapshotting;
- (void)resetSnapshotWithWindowCheck:(BOOL)arg1;
- (void)restorePreservedInputViewsIfNecessary;
- (void)sceneUpdated;
- (void)setPlacement:(id)arg1 quietly:(BOOL)arg2 animated:(BOOL)arg3 generateSplitNotification:(BOOL)arg4;
- (void)setSuppressingKeyboard:(BOOL)arg1;
- (void)setWindowEnabled:(BOOL)arg1;
- (void)setWindowLevel:(double)arg1 sceneLevel:(double)arg2 forResponder:(id)arg3;
- (BOOL)shouldAllowInputViewsRestoredForId:(id)arg1;
- (void)startConnection;
- (void)startTransition:(id)arg1 withInfo:(id)arg2;
- (void)stopConnection;
- (void)unregisterController:(id)arg1;
- (void)updateTransition:(id)arg1 withInfo:(id)arg2;
- (void)userSelectedApp:(id)arg1 onCompletion:(CDUnknownBlockType)arg2;
- (id)viewHostForWindow:(id)arg1;
- (BOOL)wantsToShowKeyboardForWindow:(id)arg1;
- (void)willAddDeactivationReason:(id)arg1;
- (void)willResume:(id)arg1;

@end

