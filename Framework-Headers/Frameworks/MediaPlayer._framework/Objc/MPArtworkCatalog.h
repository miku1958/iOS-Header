//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class MPArtworkRepresentationCollection, NSCache, NSString;
@protocol MPArtworkDataSource, MPArtworkDataSourceVisualIdenticality;

@interface MPArtworkCatalog : NSObject
{
    struct CGSize _fittingSize;
    long long _modelRevisionID;
    BOOL _allowsVideoConstrainedNetworkAccess;
    BOOL _loadingRepresentation;
    double _destinationScale;
    long long _preferredVideoFormat;
    NSString *_cacheIdentifier;
    id _requestingContext;
    id _destination;
    CDUnknownBlockType _configurationBlock;
    unsigned long long _representationKinds;
    MPArtworkRepresentationCollection *_bestAvailableRepresentationCollection;
    id _token;
    id<MPArtworkDataSource> _dataSource;
    unsigned long long _renderHint;
    unsigned long long _videoCacheStoragePolicy;
}

@property (readonly, nonatomic) long long MP_artworkType;
@property (nonatomic) BOOL allowsVideoConstrainedNetworkAccess; // @synthesize allowsVideoConstrainedNetworkAccess=_allowsVideoConstrainedNetworkAccess;
@property (strong, nonatomic) MPArtworkRepresentationCollection *bestAvailableRepresentationCollection; // @synthesize bestAvailableRepresentationCollection=_bestAvailableRepresentationCollection;
@property (readonly, nonatomic) NSCache *cache;
@property (copy, nonatomic) NSString *cacheIdentifier; // @synthesize cacheIdentifier=_cacheIdentifier;
@property (copy, nonatomic) CDUnknownBlockType configurationBlock; // @synthesize configurationBlock=_configurationBlock;
@property (readonly, weak, nonatomic) id<MPArtworkDataSource> dataSource; // @synthesize dataSource=_dataSource;
@property (weak, nonatomic) id destination; // @synthesize destination=_destination;
@property (nonatomic) double destinationScale; // @synthesize destinationScale=_destinationScale;
@property (nonatomic) struct CGSize fittingSize; // @synthesize fittingSize=_fittingSize;
@property (readonly, nonatomic) BOOL hasImageOnDisk;
@property (getter=isLoadingRepresentation) BOOL loadingRepresentation; // @synthesize loadingRepresentation=_loadingRepresentation;
@property (nonatomic) long long preferredVideoFormat; // @synthesize preferredVideoFormat=_preferredVideoFormat;
@property (nonatomic) unsigned long long renderHint; // @synthesize renderHint=_renderHint;
@property (nonatomic) unsigned long long representationKinds; // @synthesize representationKinds=_representationKinds;
@property (weak, nonatomic) id requestingContext; // @synthesize requestingContext=_requestingContext;
@property (readonly, nonatomic) struct CGSize scaledFittingSize;
@property (readonly, nonatomic) id token; // @synthesize token=_token;
@property (readonly, nonatomic) NSCache *videoCache;
@property (nonatomic) unsigned long long videoCacheStoragePolicy; // @synthesize videoCacheStoragePolicy=_videoCacheStoragePolicy;
@property (readonly, nonatomic) id<MPArtworkDataSourceVisualIdenticality> visualIdenticalityIdentifier;

+ (id)_artworkCacheForIdentifier:(id)arg1 requestingContext:(id)arg2 representationKind:(long long)arg3;
+ (id)_artworkLoadQueue;
+ (void)setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3;
+ (void)setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3 representationKind:(long long)arg4;
+ (void)setCachePurgesWhenEnteringBackground:(BOOL)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3;
+ (void)setCachePurgesWhenEnteringBackground:(BOOL)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3 representationKind:(long long)arg4;
+ (id)staticArtworkCatalogWithImage:(id)arg1;
+ (id)staticArtworkCatalogWithRepresentationCollection:(id)arg1;
- (void).cxx_destruct;
- (id)_existingRepresentationOfKind:(long long)arg1;
- (void)_loadBestRepresentationIfNeededOfKind:(long long)arg1;
- (void)_loadRepresentationOfKind:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_requestBestRepresentationOfKind:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_updateRepresentationOfKind:(long long)arg1;
- (void)_updateRepresentations;
- (void)_updateWithRepresentation:(id)arg1 isBestRepresentation:(BOOL)arg2 modelRevisionID:(long long)arg3;
- (id)bestImageFromDisk;
- (void)dealloc;
- (id)description;
- (id)existingColorAnalysisWithAlgorithm:(long long)arg1;
- (unsigned long long)hash;
- (id)initWithToken:(id)arg1 dataSource:(id)arg2;
- (BOOL)isArtworkVisuallyIdenticalToCatalog:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (void)requestColorAnalysisWithAlgorithm:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)requestExportableArtworkPropertiesWithCompletion:(CDUnknownBlockType)arg1;
- (void)requestImageWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)requestRadiosityImageWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)requestVideoWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)setCacheIdentifier:(id)arg1 forRequestingContext:(id)arg2;
- (void)setDestination:(id)arg1 configurationBlock:(CDUnknownBlockType)arg2;
- (void)setDestination:(id)arg1 forRepresentationKinds:(unsigned long long)arg2 configurationBlock:(CDUnknownBlockType)arg3;
- (void)setDestination:(id)arg1 progressiveConfigurationBlock:(CDUnknownBlockType)arg2;
- (void)setPreferredVideoKind:(long long)arg1;

@end

