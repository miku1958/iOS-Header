//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

@class MTLBlitPassSampleBufferAttachmentDescriptorArrayInternal, MTLComputePassSampleBufferAttachmentDescriptorArrayInternal, MTLFunctionConstantValues, MTLLinkedFunctions, MTLPipelineBufferDescriptorArrayInternal, MTLRenderPassColorAttachmentDescriptorArrayInternal, MTLRenderPassSampleBufferAttachmentDescriptorArrayInternal, MTLRenderPipelineColorAttachmentDescriptorArrayInternal, MTLResourceList, MTLResourceStatePassSampleBufferAttachmentDescriptorArrayInternal, MTLStageInputOutputDescriptor, MTLStencilDescriptorInternal, MTLTileRenderPipelineColorAttachmentDescriptorArrayInternal, MTLVertexDescriptorInternal, NSArray, NSData, NSDictionary, NSObject, NSString;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Chunk {
    struct VariantEntry _field1[4];
    struct Chunk *_field2;
};

struct DebugLocation {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct DebugSubProgram {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct FileIdentifier {
    int dev;
    unsigned long long ino;
};

struct FlatArray<MTLBoundsCheck::ConstantDataHeader> {
    unsigned int _field1;
    unsigned int _field2;
};

struct FlatArray<MTLBoundsCheck::DebugLocation> {
    unsigned int _field1;
    unsigned int _field2;
};

struct FlatArray<MTLBoundsCheck::DebugSubProgram> {
    unsigned int _field1;
    unsigned int _field2;
};

struct FlatArray<MTLSerializedDebugInstrumentationData::FlatArray<char>> {
    unsigned int _field1;
    unsigned int _field2;
};

struct FlatArray<unsigned char> {
    unsigned int _field1;
    unsigned int _field2;
};

struct IndirectArgumentBufferCapabilities {
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :29;
};

struct LoaderGlobalState {
    id _field1;
    id _field2;
    struct unordered_map<FileIdentifier, MTLLoadedFile *, FileIdentifier::Hash, std::__1::equal_to<FileIdentifier>, std::__1::allocator<std::__1::pair<const FileIdentifier, MTLLoadedFile *>>> _field3;
};

struct MTLArgumentDescriptorPrivate {
    unsigned long long dataType;
    unsigned long long index;
    unsigned long long arrayLength;
    unsigned long long access;
    unsigned long long textureType;
    unsigned long long constantBlockAlignment;
};

struct MTLAttributeFlags {
    union {
        struct {
            unsigned int :1;
            unsigned int :1;
            unsigned int :1;
            unsigned int :5;
        } _field1;
        unsigned char _field2;
    } _field1;
};

struct MTLBlitPassDescriptorPrivate {
    MTLBlitPassSampleBufferAttachmentDescriptorArrayInternal *sampleBufferAttachments;
};

struct MTLBlitPassSampleBufferAttachmentDescriptorPrivate {
    id sampleBuffer;
    unsigned long long startOfEncoderSampleIndex;
    unsigned long long endOfEncoderSampleIndex;
};

struct MTLCompileLibraryRequestData {
    BOOL _field1;
    id _field2;
    unsigned int _field3;
    id _field4;
    id _field5;
};

struct MTLCompilerCache {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    int _field3;
    int _field4;
};

struct MTLCompilerConnectionManager {
    CDUnknownFunctionPointerType *_field1;
};

struct MTLCompilerFunctionRequest {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    id _field3;
    id _field4;
    id _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    id _field9;
    id _field10;
    unsigned long long _field11;
    id _field12;
    id _field13;
    id _field14;
    id _field15;
    int _field16;
};

struct MTLComputePassDescriptorPrivate {
    unsigned long long dispatchType;
    MTLComputePassSampleBufferAttachmentDescriptorArrayInternal *sampleBufferAttachments;
};

struct MTLComputePassSampleBufferAttachmentDescriptorPrivate {
    id sampleBuffer;
    unsigned long long startOfEncoderSampleIndex;
    unsigned long long endOfEncoderSampleIndex;
};

struct MTLComputePipelineDescriptorPrivate {
    NSString *label;
    id computeFunction;
    BOOL threadGroupSizeIsMultipleOfThreadExecutionWidth;
    unsigned short maxTotalThreadsPerThreadgroup;
    MTLStageInputOutputDescriptor *stageInputDescriptor;
    NSDictionary *driverCompilerOptions;
    MTLPipelineBufferDescriptorArrayInternal *buffers;
    NSArray *binaryArchives;
    NSArray *insertLibraries;
    id pipelineLibrary;
    BOOL supportIndirectCommandBuffers;
    long long textureWriteRoundingMode;
    BOOL forceResourceIndex;
    unsigned long long resourceIndex;
    NSDictionary *pluginData;
    BOOL needsCustomBorderColorSamplers;
    unsigned int openGLMode:1;
    unsigned int openCLMode:1;
    unsigned int reserved:30;
    NSArray *functionPointers;
    NSDictionary *functionPointerGroups;
    MTLLinkedFunctions *linkedFunctions;
    unsigned long long maxStackCallDepth;
    BOOL supportAddingBinaryFunctions;
};

struct MTLConstantStorage {
    struct map<std::__1::basic_string<char>, MTLConstantStorage::ConstantData, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLConstantStorage::ConstantData>>> _field1;
    struct map<unsigned short, MTLConstantStorage::ConstantData, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, MTLConstantStorage::ConstantData>>> _field2;
};

struct MTLDepthStencilDescriptorPrivate {
    MTLStencilDescriptorInternal *frontFaceStencil;
    MTLStencilDescriptorInternal *backFaceStencil;
    unsigned long long depthCompareFunction;
    BOOL depthWriteEnabled;
    NSString *label;
};

struct MTLDispatch {
    struct MTLDispatch *_field1;
    CDUnknownBlockType _field2;
};

struct MTLFunctionData {
    unsigned long long bitCodeOffset;
    unsigned long long bitCodeFileSize;
    unsigned long long publicArgumentsOffset;
    unsigned long long privateArgumentsOffset;
    unsigned long long sourceArchiveOffset;
    unsigned short airMajorVersion;
    unsigned short airMinorVersion;
    unsigned short languageMajorVersion;
    unsigned short languageMinorVersion;
    CDStruct_41a22ec7 bitcodeHash;
    unsigned char bitcodeType;
    NSData *pluginData;
    unsigned char renderTargetArrayIndexType;
    unsigned int patchType:2;
    unsigned int controlPointCount:6;
    NSObject *functionInputs;
};

struct MTLFunctionDescriptorPrivate {
    NSString *name;
    NSString *specializedName;
    unsigned long long options;
    MTLFunctionConstantValues *constantValues;
};

struct MTLHeapDescriptorPrivate {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    BOOL _field5;
    long long _field6;
    unsigned long long _field7;
};

struct MTLIndirectCommandBufferDescriptorState {
    unsigned long long commandTypes;
    BOOL inheritPipelineState;
    BOOL inheritBuffers;
    unsigned long long maxVertexBufferBindCount;
    unsigned long long maxFragmentBufferBindCount;
    unsigned long long maxKernelBufferBindCount;
    unsigned long long resourceIndex;
};

struct MTLIntersectionFunctionTableDescriptorPrivate {
    unsigned long long functionCount;
    BOOL forceResourceIndex;
    unsigned long long resourceIndex;
};

struct MTLLibraryBuilder {
    id _field1;
    struct map<MTLLibraryIdentifier, MTLLibraryContainer *, std::__1::less<MTLLibraryIdentifier>, std::__1::allocator<std::__1::pair<const MTLLibraryIdentifier, MTLLibraryContainer *>>> _field2;
    id _field3;
    BOOL _field4;
    id _field5;
};

struct MTLLibraryContainer {
    struct MTLPipelineCollection *_field1;
    _Atomic int _field2;
    CDStruct_41a22ec7 _field3;
    struct MTLLibraryData *_field4;
    id _field5;
    id _field6;
    id _field7;
    id _field8;
    id _field9;
};

struct MTLLibraryData {
    CDUnknownFunctionPointerType *_field1;
    CDStruct_41a22ec7 _field2;
    _Atomic int _field3;
    id _field4;
    id _field5;
};

struct MTLLinkedFunctionsPrivate {
    NSArray *functions;
    NSArray *privateFunctions;
    NSArray *binaryFunctions;
    NSDictionary *groups;
};

struct MTLLoaderMachOPayload {
    id _field1;
    CDStruct_41a22ec7 _field2;
    BOOL _field3;
    unsigned long long _field4;
    id _field5;
    id _field6;
    id _field7;
    id _field8;
    id _field9;
};

struct MTLLoaderSliceIdentifier {
    int _field1;
    int _field2;
};

struct MTLPipelineBufferDescriptorPrivate {
    union {
        struct {
            unsigned int mutability:2;
        } ;
        CDStruct_914d909e ;
    } ;
};

struct MTLPipelineCollection {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    unsigned long long _field2;
    struct map<MTLLibraryIdentifier, MTLPipelineLibrarySerializer::LibraryDescriptor *, std::__1::less<MTLLibraryIdentifier>, std::__1::allocator<std::__1::pair<const MTLLibraryIdentifier, MTLPipelineLibrarySerializer::LibraryDescriptor *>>> _field3;
    struct unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>>> _field4;
    struct unordered_map<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>>> _field5;
    struct map<MTLLibraryIdentifier, unsigned long, std::__1::less<MTLLibraryIdentifier>, std::__1::allocator<std::__1::pair<const MTLLibraryIdentifier, unsigned long>>> _field6;
    struct unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field7;
    id _field8;
    struct MTLPipelineDescriptorHash _field9;
    struct MTLPipelineDescriptorHash _field10;
    struct MTLPipelineDescriptorHash _field11;
};

struct MTLPipelineDescriptions;

struct MTLPipelineDescriptorHash {
    struct unordered_map<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>>> _field1;
    struct vector<NSObject *, std::__1::allocator<NSObject *>> _field2;
};

struct MTLPipelineLibraryBuilder {
    id _field1;
    id _field2;
};

struct MTLProgramObject {
    struct VariantList<4> _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
};

struct MTLRenderPassAttachmentDescriptorPrivate {
    id texture;
    unsigned long long level;
    unsigned long long slice;
    unsigned long long depthPlane;
    unsigned long long loadAction;
    unsigned long long storeAction;
    unsigned long long storeActionOptions;
    CDStruct_3ead2808 clearColor;
    double clearDepth;
    unsigned int clearStencil;
    unsigned long long stencilResolveFilter;
    id resolveTexture;
    unsigned long long resolveLevel;
    unsigned long long resolveSlice;
    unsigned long long resolveDepthPlane;
    unsigned long long resolveFilter;
    unsigned long long width;
    unsigned long long height;
    BOOL yInvert;
};

struct MTLRenderPassDescriptorPrivate {
    MTLRenderPassColorAttachmentDescriptorArrayInternal *attachments;
    id visibilityResultBuffer;
    unsigned long long renderTargetWidth;
    unsigned long long renderTargetHeight;
    unsigned long long defaultColorSampleCount;
    BOOL fineGrainedBackgroundVisibilityEnabled;
    BOOL ditherEnabled;
    BOOL openGLModeEnabled;
    unsigned long long renderTargetArrayLength;
    unsigned long long tileWidth;
    unsigned long long tileHeight;
    union {
        unsigned long long defaultSampleCount;
        unsigned long long defaultRasterSampleCount;
    } ;
    unsigned long long imageBlockSampleLength;
    unsigned long long threadgroupMemoryLength;
    CDStruct_6e3f967a customSamplePositions[4];
    unsigned long long numCustomSamplePositions;
    id rasterizationRateMap;
    MTLRenderPassSampleBufferAttachmentDescriptorArrayInternal *sampleBufferAttachments;
    BOOL pointCoordYFlipEnabled;
};

struct MTLRenderPassSampleBufferAttachmentDescriptorPrivate {
    id sampleBuffer;
    unsigned long long startOfVertexSampleIndex;
    unsigned long long endOfVertexSampleIndex;
    unsigned long long startOfFragmentSampleIndex;
    unsigned long long endOfFragmentSampleIndex;
};

struct MTLRenderPipelineAttachmentDescriptorPrivate {
    union {
        struct {
            unsigned int blendingEnabled:1;
            unsigned int rgbBlendOperation:3;
            unsigned int alphaBlendOperation:3;
            unsigned int sourceRGBBlendFactor:5;
            unsigned int sourceAlphaBlendFactor:5;
            unsigned int destinationRGBBlendFactor:5;
            unsigned int destinationAlphaBlendFactor:5;
            unsigned int writeMask:4;
            unsigned int logicOpEnabled:1;
            unsigned int logicOp:4;
            unsigned int pixelFormat:28;
        } ;
        CDStruct_914d909e ;
    } ;
};

struct MTLRenderPipelineDescriptorPrivate {
    MTLRenderPipelineColorAttachmentDescriptorArrayInternal *attachments;
    unsigned long long rtBlendDescHash[8];
    unsigned long long depthAttachmentPixelFormat;
    unsigned long long stencilAttachmentPixelFormat;
    unsigned long long tessellationPartitionMode;
    unsigned long long maxTessellationFactor;
    BOOL tessellationFactorScaleEnabled;
    unsigned long long tessellationFactorFormat;
    unsigned long long tessellationControlPointIndexType;
    unsigned long long tessellationFactorStepFunction;
    unsigned long long tessellationOutputWindingOrder;
    unsigned long long postVertexDumpBufferIndex;
    BOOL supportIndirectCommandBuffers;
    long long textureWriteRoundingMode;
    CDUnion_a2c16d69 ;
    unsigned long long sampleMask;
    union {
        unsigned int sampleCoverageHash;
        float sampleCoverage;
    } ;
    unsigned long long paddingToRemove;
    unsigned long long colorSampleCount;
    union {
        unsigned int miscHash[2];
        struct {
            unsigned int alphaToCoverageEnabled:1;
            unsigned int alphaToOneEnabled:1;
            unsigned int rasterizationEnabled:1;
            unsigned int inputPrimitiveTopology:2;
            unsigned int private0:1;
            unsigned int depthStencilWriteDisabled:1;
            unsigned int openGLMode:1;
            unsigned int sampleCoverageInvert:1;
            unsigned int private4:1;
            unsigned int vertexAmplificationMode:1;
            unsigned int twoSideEnabled:1;
            unsigned int pointSizeOutputVS:1;
            unsigned int pointCoordLowerLeft:1;
            unsigned int pointSmoothEnabled:1;
            unsigned int clipDistanceEnableMask:8;
            unsigned int alphaTestFunc:3;
            unsigned int alphaTestEnabled:1;
            unsigned int logicOp:4;
            unsigned int logicOpEnabled:1;
            unsigned int forceResourceIndex:1;
            unsigned int forceSoftwareVertexFetch:1;
        } ;
    } ;
    unsigned int vertexDepthCompareClampMask;
    unsigned int fragmentDepthCompareClampMask;
    unsigned long long resourceIndex;
    NSString *label;
    id vertexFunction;
    id fragmentFunction;
    MTLVertexDescriptorInternal *vertexDescriptor;
    MTLPipelineBufferDescriptorArrayInternal *vertexBuffers;
    MTLPipelineBufferDescriptorArrayInternal *fragmentBuffers;
    NSDictionary *driverCompilerOptions;
    id pipelineLibrary;
    void *pad0;
    void *pad1;
    NSDictionary *pluginData;
    BOOL needsCustomBorderColorSamplers;
    unsigned int maxVertexAmplificationCount;
    NSArray *binaryArchives;
};

struct MTLResourceListEntry;

struct MTLResourceStatePassDescriptorPrivate {
    MTLResourceStatePassSampleBufferAttachmentDescriptorArrayInternal *sampleBufferAttachments;
};

struct MTLResourceStatePassSampleBufferAttachmentDescriptorPrivate {
    id sampleBuffer;
    unsigned long long startOfEncoderSampleIndex;
    unsigned long long endOfEncoderSampleIndex;
};

struct MTLSamplerDescriptorPrivate {
    union {
        struct {
            unsigned int minFilter:2;
            unsigned int magFilter:2;
            unsigned int mipFilter:2;
            unsigned int sAddressMode:3;
            unsigned int tAddressMode:3;
            unsigned int rAddressMode:3;
            unsigned int normalizedCoords:1;
            unsigned int borderColor:2;
            unsigned int lodAverage:1;
            unsigned int compareFunction:3;
            unsigned int supportArgumentBuffers:1;
            unsigned int forceResourceIndex:1;
            unsigned int forceSeamsOnCubemapFiltering:1;
        } ;
        unsigned int miscHash;
    } ;
    union {
        unsigned int lodMinClampHash;
        float lodMinClamp;
    } ;
    union {
        unsigned int lodMaxClampHash;
        float lodMaxClamp;
    } ;
    union {
        unsigned int lodBiasHash;
        float lodBias;
    } ;
    unsigned long long maxAnisotropy;
    NSString *label;
    unsigned long long resourceIndex;
    unsigned int customBorderColorValue[4];
    unsigned long long pixelFormat;
};

struct MTLSerializedDebugInstrumentationData {
    unsigned long long _field1;
    struct FlatArray<MTLSerializedDebugInstrumentationData::FlatArray<char>> _field2;
    struct FlatArray<MTLBoundsCheck::DebugLocation> _field3;
    struct FlatArray<MTLBoundsCheck::DebugSubProgram> _field4;
    struct FlatArray<MTLBoundsCheck::ConstantDataHeader> _field5;
    struct FlatArray<unsigned char> _field6;
    struct FlatArray<unsigned char> _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned long long _field10;
    union InstrumentationStatusFlags _field11;
};

struct MTLSharedEventHandlePrivate {
    unsigned int _field1;
    id _field2;
    unsigned long long _field3;
};

struct MTLStencilDescriptorPrivate {
    unsigned long long stencilCompareFunction;
    unsigned long long stencilFailureOperation;
    unsigned long long depthFailureOperation;
    unsigned long long depthStencilPassOperation;
    unsigned int readMask;
    unsigned int writeMask;
};

struct MTLSyncDispatch {
    struct MTLSyncDispatch *_field1;
    CDUnknownBlockType _field2;
};

struct MTLTargetDeviceArch {
    unsigned long long _field1;
    unsigned int _field2;
    char *_field3;
};

struct MTLTextureDescriptorPrivate {
    unsigned long long textureType;
    unsigned long long pixelFormat;
    unsigned long long width;
    unsigned long long height;
    unsigned long long depth;
    unsigned long long mipmapLevelCount;
    unsigned long long sampleCount;
    unsigned long long arrayLength;
    BOOL zeroFill;
    unsigned long long rotation;
    BOOL framebufferOnly;
    BOOL isDrawable;
    unsigned int swizzle;
    BOOL writeSwizzleEnabled;
    unsigned long long compressionMode;
    union {
        unsigned long long textureUsage;
        unsigned long long usage;
    } ;
    unsigned long long resourceOptions;
    unsigned long long sparseSurfaceDefaultValue;
    BOOL allowGPUOptimizedContents;
    BOOL forceResourceIndex;
    unsigned long long resourceIndex;
    unsigned long long protectionOptions;
    unsigned long long resolvedUsage;
    unsigned long long cpuCacheMode;
    unsigned long long storageMode;
};

struct MTLTileRenderPipelineAttachmentDescriptorPrivate {
    union {
        struct {
            unsigned int pixelFormat;
        } ;
        struct {
            unsigned int bits;
        } ;
    } ;
};

struct MTLTileRenderPipelineDescriptorPrivate {
    MTLTileRenderPipelineColorAttachmentDescriptorArrayInternal *attachments;
    CDUnion_a2c16d69 ;
    NSString *label;
    id tileFunction;
    BOOL threadgroupSizeMatchesTileSize;
    unsigned long long paddingToRemove;
    unsigned long long colorSampleCount;
    MTLPipelineBufferDescriptorArrayInternal *tileBuffers;
    unsigned short maxTotalThreadsPerThreadgroup;
    long long textureWriteRoundingMode;
    NSDictionary *pluginData;
    NSArray *binaryArchives;
};

struct MTLVisibleFunctionTableDescriptorPrivate {
    unsigned long long functionCount;
    BOOL forceResourceIndex;
    unsigned long long resourceIndex;
};

struct MultiLevelPipelineCache {
    BOOL _field1;
    id _field2;
    id _field3;
    struct MTLCompilerCache *_field4;
    struct MTLCompilerCache *_field5;
    struct MTLCompilerCache *_field6;
    BOOL _field7;
};

struct PipelineCache<PipelineKey> {
    struct unordered_map<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>, PipelineCache<PipelineKey>::Hasher, std::__1::equal_to<PipelineCache<PipelineKey>::HashKey>, std::__1::allocator<std::__1::pair<const PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>>> map;
};

struct PipelineKey {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    BOOL _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    float _field10;
    float _field11;
    float _field12;
    BOOL _field13;
    BOOL _field14;
};

struct PipelineLibraryData {
    struct shared_ptr<MTLPipelineDescriptions> _field1;
    id _field2;
    id _field3;
};

struct VariantEntry {
    char *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    id _field5;
    id _field6;
    unsigned long long _field7;
    id _field8;
};

struct VariantKey {
    void *_field1;
    void *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    id _field5;
    void *_field6;
    unsigned long long _field7;
};

struct VariantList<4> {
    struct Chunk _field1;
    struct Chunk *_field2;
    unsigned int _field3;
    struct VariantEntry _field4;
};

struct _MTLIndirectArgumentBufferLayoutPrivate {
    id _field1;
    struct unordered_map<unsigned long, _MTLIndirectArgumentBufferLayout *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, _MTLIndirectArgumentBufferLayout *>>> _field2;
};

struct _MTLResourceListPoolPrivate {
    struct resourceListQueue queue;
    struct os_unfair_lock_s lock;
    int count;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __CFString;

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> *_field1;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field1;
                struct __short {
                    union {
                        unsigned char _field1;
                        char _field2;
                    } _field1;
                    char _field2[23];
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct map<MTLLibraryIdentifier, MTLLibraryContainer *, std::__1::less<MTLLibraryIdentifier>, std::__1::allocator<std::__1::pair<const MTLLibraryIdentifier, MTLLibraryContainer *>>> {
    struct __tree<std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>, std::__1::__map_value_compare<MTLLibraryIdentifier, std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>, std::__1::less<MTLLibraryIdentifier>, true>, std::__1::allocator<std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<MTLLibraryIdentifier, std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>, std::__1::less<MTLLibraryIdentifier>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<MTLLibraryIdentifier, MTLPipelineLibrarySerializer::LibraryDescriptor *, std::__1::less<MTLLibraryIdentifier>, std::__1::allocator<std::__1::pair<const MTLLibraryIdentifier, MTLPipelineLibrarySerializer::LibraryDescriptor *>>> {
    struct __tree<std::__1::__value_type<MTLLibraryIdentifier, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::__map_value_compare<MTLLibraryIdentifier, std::__1::__value_type<MTLLibraryIdentifier, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::less<MTLLibraryIdentifier>, true>, std::__1::allocator<std::__1::__value_type<MTLLibraryIdentifier, MTLPipelineLibrarySerializer::LibraryDescriptor *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MTLLibraryIdentifier, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<MTLLibraryIdentifier, std::__1::__value_type<MTLLibraryIdentifier, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::less<MTLLibraryIdentifier>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<MTLLibraryIdentifier, unsigned long, std::__1::less<MTLLibraryIdentifier>, std::__1::allocator<std::__1::pair<const MTLLibraryIdentifier, unsigned long>>> {
    struct __tree<std::__1::__value_type<MTLLibraryIdentifier, unsigned long>, std::__1::__map_value_compare<MTLLibraryIdentifier, std::__1::__value_type<MTLLibraryIdentifier, unsigned long>, std::__1::less<MTLLibraryIdentifier>, true>, std::__1::allocator<std::__1::__value_type<MTLLibraryIdentifier, unsigned long>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MTLLibraryIdentifier, unsigned long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<MTLLibraryIdentifier, std::__1::__value_type<MTLLibraryIdentifier, unsigned long>, std::__1::less<MTLLibraryIdentifier>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<MTLUINT256_t, std::__1::pair<unsigned int, unsigned long long>, CompareHash, std::__1::allocator<std::__1::pair<const MTLUINT256_t, std::__1::pair<unsigned int, unsigned long long>>>> {
    struct __tree<std::__1::__value_type<MTLUINT256_t, std::__1::pair<unsigned int, unsigned long long>>, std::__1::__map_value_compare<MTLUINT256_t, std::__1::__value_type<MTLUINT256_t, std::__1::pair<unsigned int, unsigned long long>>, CompareHash, true>, std::__1::allocator<std::__1::__value_type<MTLUINT256_t, std::__1::pair<unsigned int, unsigned long long>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MTLUINT256_t, std::__1::pair<unsigned int, unsigned long long>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<MTLUINT256_t, std::__1::__value_type<MTLUINT256_t, std::__1::pair<unsigned int, unsigned long long>>, CompareHash, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::basic_string<char>, MTLConstantStorage::ConstantData, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLConstantStorage::ConstantData>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, MTLConstantStorage::ConstantData>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, MTLConstantStorage::ConstantData>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, MTLConstantStorage::ConstantData>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, MTLConstantStorage::ConstantData>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, MTLConstantStorage::ConstantData>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned short, MTLConstantStorage::ConstantData, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, MTLConstantStorage::ConstantData>>> {
    struct __tree<std::__1::__value_type<unsigned short, MTLConstantStorage::ConstantData>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, MTLConstantStorage::ConstantData>, std::__1::less<unsigned short>, true>, std::__1::allocator<std::__1::__value_type<unsigned short, MTLConstantStorage::ConstantData>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, MTLConstantStorage::ConstantData>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, MTLConstantStorage::ConstantData>, std::__1::less<unsigned short>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct once_flag {
    unsigned long long __state_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct pair<FunctionHashFactory::HashType, MTLBinaryKey *>;

struct resourceListQueue {
    MTLResourceList *tqh_first;
    id *tqh_last;
};

struct shared_ptr<MTLCompilerCache> {
    struct MTLCompilerCache *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<MTLPipelineDescriptions> {
    struct MTLPipelineDescriptions *_field1;
    struct __shared_weak_count *_field2;
};

struct unique_ptr<MTLPipelineCollection, std::__1::default_delete<MTLPipelineCollection>> {
    struct __compressed_pair<MTLPipelineCollection *, std::__1::default_delete<MTLPipelineCollection>> {
        struct MTLPipelineCollection *__value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_map<FileIdentifier, MTLLoadedFile *, FileIdentifier::Hash, std::__1::equal_to<FileIdentifier>, std::__1::allocator<std::__1::pair<const FileIdentifier, MTLLoadedFile *>>> {
    struct __hash_table<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, std::__1::__unordered_map_hasher<FileIdentifier, std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, FileIdentifier::Hash, true>, std::__1::__unordered_map_equal<FileIdentifier, std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, std::__1::equal_to<FileIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FileIdentifier, std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, FileIdentifier::Hash, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<FileIdentifier, std::__1::__hash_value_type<FileIdentifier, MTLLoadedFile *>, std::__1::equal_to<FileIdentifier>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<MTLLoadedFile *, id, std::__1::hash<MTLLoadedFile *>, std::__1::equal_to<MTLLoadedFile *>, std::__1::allocator<std::__1::pair<MTLLoadedFile *const, id>>> {
    struct __hash_table<std::__1::__hash_value_type<MTLLoadedFile *, id>, std::__1::__unordered_map_hasher<MTLLoadedFile *, std::__1::__hash_value_type<MTLLoadedFile *, id>, std::__1::hash<MTLLoadedFile *>, true>, std::__1::__unordered_map_equal<MTLLoadedFile *, std::__1::__hash_value_type<MTLLoadedFile *, id>, std::__1::equal_to<MTLLoadedFile *>, true>, std::__1::allocator<std::__1::__hash_value_type<MTLLoadedFile *, id>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLoadedFile *, id>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<MTLLoadedFile *, std::__1::__hash_value_type<MTLLoadedFile *, id>, std::__1::hash<MTLLoadedFile *>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<MTLLoadedFile *, std::__1::__hash_value_type<MTLLoadedFile *, id>, std::__1::equal_to<MTLLoadedFile *>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<MTLUINT256_t, MTLProgramObject *, UnorderedContainerHash, UnorderedContainerHash, std::__1::allocator<std::__1::pair<const MTLUINT256_t, MTLProgramObject *>>> {
    struct __hash_table<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, std::__1::__unordered_map_hasher<MTLUINT256_t, std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, UnorderedContainerHash, true>, std::__1::__unordered_map_equal<MTLUINT256_t, std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, UnorderedContainerHash, true>, std::__1::allocator<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<MTLUINT256_t, std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, UnorderedContainerHash, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<MTLUINT256_t, std::__1::__hash_value_type<MTLUINT256_t, MTLProgramObject *>, UnorderedContainerHash, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>, PipelineCache<PipelineKey>::Hasher, std::__1::equal_to<PipelineCache<PipelineKey>::HashKey>, std::__1::allocator<std::__1::pair<const PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>>> {
    struct __hash_table<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, std::__1::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey, std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, PipelineCache<PipelineKey>::Hasher, true>, std::__1::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey, std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, std::__1::equal_to<PipelineCache<PipelineKey>::HashKey>, true>, std::__1::allocator<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey, std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, PipelineCache<PipelineKey>::Hasher, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey, std::__1::__hash_value_type<PipelineCache<PipelineKey>::HashKey, id<MTLComputePipelineState>>, std::__1::equal_to<PipelineCache<PipelineKey>::HashKey>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_map<std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long, _MTLIndirectArgumentBufferLayout *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, _MTLIndirectArgumentBufferLayout *>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, std::__1::hash<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, _MTLIndirectArgumentBufferLayout *>, std::__1::equal_to<unsigned long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, std::__1::hash<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, std::__1::vector<NSObject *, std::__1::allocator<NSObject *>>>, std::__1::equal_to<unsigned long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __hash_table<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<std::__1::basic_string<char>>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<std::__1::basic_string<char>>> {
            float _field1;
        } _field4;
    } _field1;
};

struct vector<MTLDebugLocation *, std::__1::allocator<MTLDebugLocation *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<MTLDebugLocation **, std::__1::allocator<MTLDebugLocation *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<MTLDebugSubProgram *, std::__1::allocator<MTLDebugSubProgram *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<MTLDebugSubProgram **, std::__1::allocator<MTLDebugSubProgram *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<MTLRasterizationRateLayerDescriptor *, std::__1::allocator<MTLRasterizationRateLayerDescriptor *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<MTLRasterizationRateLayerDescriptor **, std::__1::allocator<MTLRasterizationRateLayerDescriptor *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<NSObject *, std::__1::allocator<NSObject *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<NSObject **, std::__1::allocator<NSObject *>> {
        id *_field1;
    } _field3;
};

struct vector<const __CFString *, std::__1::allocator<const __CFString *>> {
    struct __CFString **__begin_;
    struct __CFString **__end_;
    struct __compressed_pair<const __CFString **, std::__1::allocator<const __CFString *>> {
        struct __CFString **__value_;
    } __end_cap_;
};

struct vector<std::__1::pair<FunctionHashFactory::HashType, MTLBinaryKey *>, std::__1::allocator<std::__1::pair<FunctionHashFactory::HashType, MTLBinaryKey *>>> {
    struct pair<FunctionHashFactory::HashType, MTLBinaryKey *> *_field1;
    struct pair<FunctionHashFactory::HashType, MTLBinaryKey *> *_field2;
    struct __compressed_pair<std::__1::pair<FunctionHashFactory::HashType, MTLBinaryKey *>*, std::__1::allocator<std::__1::pair<FunctionHashFactory::HashType, MTLBinaryKey *>>> {
        struct pair<FunctionHashFactory::HashType, MTLBinaryKey *> *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

typedef struct {
    CDUnknownBlockType _field1;
    CDUnknownBlockType _field2;
    CDUnknownBlockType _field3;
    CDUnknownBlockType _field4;
} CDStruct_14783bb7;

typedef struct {
    BOOL _field1;
    BOOL _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    BOOL _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    unsigned long long _field9;
} CDStruct_8c76fc6d;

typedef struct {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
} CDStruct_a06f635e;

typedef struct {
    unsigned int maxFramebufferStorageBits;
    unsigned int linearTextureArrayAlignmentBytes;
    unsigned int linearTextureArrayAlignmentSlice;
    unsigned int maxTileBuffers;
    unsigned int maxTileTextures;
    unsigned int maxTileSamplers;
    unsigned int maxTileInlineDataSize;
    unsigned int minTilePixels;
    unsigned int maxColorAttachments;
    unsigned int maxVertexAttributes;
    unsigned int maxVertexBuffers;
    unsigned int maxVertexTextures;
    unsigned int maxVertexSamplers;
    unsigned int maxVertexInlineDataSize;
    unsigned int maxInterpolants;
    unsigned int maxFragmentBuffers;
    unsigned int maxFragmentTextures;
    unsigned int maxFragmentSamplers;
    unsigned int maxFragmentInlineDataSize;
    unsigned int maxComputeBuffers;
    unsigned int maxComputeTextures;
    unsigned int maxComputeSamplers;
    unsigned int maxComputeInlineDataSize;
    unsigned int maxComputeLocalMemorySizes;
    unsigned int maxTotalComputeThreadsPerThreadgroup;
    unsigned int maxComputeThreadgroupMemory;
    float maxLineWidth;
    float maxPointSize;
    unsigned int maxVisibilityQueryOffset;
    unsigned int padmaxBufferLength;
    unsigned int minConstantBufferAlignmentBytes;
    unsigned int minBufferNoCopyAlignmentBytes;
    unsigned int maxTextureWidth1D;
    unsigned int maxTextureWidth2D;
    unsigned int maxTextureHeight2D;
    unsigned int maxTextureWidth3D;
    unsigned int maxTextureHeight3D;
    unsigned int maxTextureDepth3D;
    unsigned int maxTextureDimensionCube;
    unsigned int maxTextureLayers;
    unsigned int linearTextureAlignmentBytes;
    unsigned int iosurfaceTextureAlignmentBytes;
    unsigned int iosurfaceReadOnlyTextureAlignmentBytes;
    unsigned int deviceLinearTextureAlignmentBytes;
    unsigned int deviceLinearReadOnlyTextureAlignmentBytes;
    unsigned int maxFunctionConstantIndices;
    unsigned int maxComputeThreadgroupMemoryAlignmentBytes;
    unsigned int maxInterpolatedComponents;
    unsigned int maxTessellationFactor;
    unsigned int maxIndirectBuffers;
    unsigned int maxIndirectTextures;
    unsigned int maxIndirectSamplers;
    unsigned int maxIndirectSamplersPerDevice;
    unsigned int maxFenceInstances;
    unsigned int maxViewportCount;
    unsigned int maxCustomSamplePositions;
    unsigned int maxVertexAmplificationFactor;
    unsigned int maxVertexAmplificationCount;
    unsigned int maxTextureBufferWidth;
    unsigned int maxComputeAttributes;
    unsigned int maxConstantBufferArguments;
    unsigned long long maxBufferLength;
} CDStruct_19ca2cda;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
} CDStruct_32a7f38a;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
} CDStruct_c0454aff;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
} CDStruct_33dcf794;

typedef struct {
    unsigned long long width;
    unsigned long long height;
    unsigned long long depth;
} CDStruct_da2e99ad;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
} CDStruct_4bcfbbae;

typedef struct {
    unsigned long long bits;
} CDStruct_914d909e;

typedef struct {
    unsigned char key[32];
} CDStruct_41a22ec7;

typedef struct {
    unsigned int fragmentUsesDiscard:1;
    unsigned int fragmentWritesSampleMask:1;
    unsigned int fragmentWritesDepth:1;
    unsigned int vertexRegisterSpill:1;
    unsigned int fragmentRegisterSpill:1;
    unsigned int fragmentReadsFramebufferValues:1;
    unsigned int fragmentPunchThrough:1;
    unsigned int vertexWritesPointSize:1;
    unsigned int private2:1;
    unsigned int reserved:55;
} CDStruct_7ce1aa5b;

typedef struct {
    unsigned int kernelRegisterSpill:1;
    unsigned int threadgroupBarrier:1;
    unsigned int deviceMemoryAtomics:1;
    unsigned int threadgroupMemoryAtomics:1;
    unsigned int reserved:60;
} CDStruct_596dc0d1;

typedef struct {
    unsigned int :8;
    unsigned int :24;
    unsigned int _field1;
    unsigned long long _field2;
    unsigned long long _field3;
} CDStruct_4af8c268;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
} CDStruct_8727d297;

typedef struct {
    double red;
    double green;
    double blue;
    double alpha;
} CDStruct_3ead2808;

typedef struct {
    float x;
    float y;
} CDStruct_6e3f967a;

typedef struct {
    BOOL _field1;
    unsigned long long _field2;
    struct *_field3;
} CDStruct_dbc1e4aa;

typedef struct {
    CDStruct_da2e99ad _field1;
    CDStruct_da2e99ad _field2;
} CDStruct_caaed6bc;

// Template types
typedef struct vector<std::__1::pair<FunctionHashFactory::HashType, MTLBinaryKey *>, std::__1::allocator<std::__1::pair<FunctionHashFactory::HashType, MTLBinaryKey *>>> {
    struct pair<FunctionHashFactory::HashType, MTLBinaryKey *> *_field1;
    struct pair<FunctionHashFactory::HashType, MTLBinaryKey *> *_field2;
    struct __compressed_pair<std::__1::pair<FunctionHashFactory::HashType, MTLBinaryKey *>*, std::__1::allocator<std::__1::pair<FunctionHashFactory::HashType, MTLBinaryKey *>>> {
        struct pair<FunctionHashFactory::HashType, MTLBinaryKey *> *_field1;
    } _field3;
} vector_78402f50;

#pragma mark Named Unions

union InstrumentationStatusFlags {
    struct {
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
    } _field1;
    unsigned short _field2;
};

#pragma mark Typedef'd Unions

typedef union {
    CDStruct_4af8c268 _field1;
    CDStruct_4af8c268 _field2;
} CDUnion_c6e49ed4;

// Ambiguous groups
typedef union {
    unsigned long long sampleCount;
    unsigned long long rasterSampleCount;
} CDUnion_a2c16d69;

