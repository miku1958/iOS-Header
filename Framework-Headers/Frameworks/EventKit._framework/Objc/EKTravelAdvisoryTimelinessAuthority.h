//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <EventKit/CalActivatable-Protocol.h>

@class NSDate;
@protocol CalDateProvider, OS_dispatch_queue, OS_dispatch_source;

@interface EKTravelAdvisoryTimelinessAuthority : NSObject <CalActivatable>
{
    BOOL _internalActive;
    NSObject<OS_dispatch_queue> *_workQueue;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    NSObject<OS_dispatch_source> *_timer;
    NSDate *_startOfLeaveNowPeriodInternal;
    NSDate *_startOfRunningLatePeriodInternal;
    unsigned long long _internalPeriod;
    CDUnknownBlockType _internalPeriodChangedCallback;
    id<CalDateProvider> _dateProvider;
}

@property (strong, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
@property (readonly, nonatomic) id<CalDateProvider> dateProvider; // @synthesize dateProvider=_dateProvider;
@property (nonatomic) BOOL internalActive; // @synthesize internalActive=_internalActive;
@property (nonatomic) unsigned long long internalPeriod; // @synthesize internalPeriod=_internalPeriod;
@property (copy, nonatomic) CDUnknownBlockType internalPeriodChangedCallback; // @synthesize internalPeriodChangedCallback=_internalPeriodChangedCallback;
@property (readonly, nonatomic) unsigned long long period;
@property (copy, nonatomic) CDUnknownBlockType periodChangedCallback;
@property (readonly, nonatomic) NSDate *startOfLeaveNowPeriod;
@property (strong, nonatomic) NSDate *startOfLeaveNowPeriodInternal; // @synthesize startOfLeaveNowPeriodInternal=_startOfLeaveNowPeriodInternal;
@property (readonly, nonatomic) NSDate *startOfRunningLatePeriod;
@property (strong, nonatomic) NSDate *startOfRunningLatePeriodInternal; // @synthesize startOfRunningLatePeriodInternal=_startOfRunningLatePeriodInternal;
@property (strong, nonatomic) NSObject<OS_dispatch_source> *timer; // @synthesize timer=_timer;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *workQueue; // @synthesize workQueue=_workQueue;

+ (id)stringForPeriod:(unsigned long long)arg1;
- (void).cxx_destruct;
- (void)_refresh;
- (void)_refreshOnDate:(id)arg1;
- (void)_refreshPeriod;
- (void)_refreshTimer;
- (void)_uninstallTimer;
- (void)activate;
- (BOOL)active;
- (void)deactivate;
- (void)dealloc;
- (id)init;
- (id)initWithDateProvider:(id)arg1;
- (void)updateWithHypothesis:(id)arg1;

@end

