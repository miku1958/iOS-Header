//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <EventKit/EKCalendarItem.h>

#import <EventKit/CalDateRangeProtocol-Protocol.h>
#import <EventKit/EKJunkInvitationProtocol_Private-Protocol.h>

@class EKCalendarDate, EKEventStore, EKParticipant, EKReadWriteLock, EKRecurrenceIdentifier, EKStructuredLocation, EKSuggestedEventInfo, NSArray, NSDate, NSNumber, NSSet, NSString, NSURL;

@interface EKEvent : EKCalendarItem <EKJunkInvitationProtocol_Private, CalDateRangeProtocol>
{
    EKStructuredLocation *_cachedLocationPrediction;
    NSDate *_cachedLocationPredictionExpirationDate;
    BOOL _locationPredictionFrozen;
    BOOL _locationPredictionAllowed;
    EKReadWriteLock *_locationPredictionLock;
    BOOL _occurrenceIsAllDay;
    BOOL _requiresDetachDueToSnoozedAlarm;
    BOOL _currentUserInvitedAttendee;
    int _clearModifiedFlags;
    NSString *_birthdayPersonUniqueID;
    EKCalendarDate *_occurrenceStartDate;
    EKCalendarDate *_occurrenceEndDate;
    EKCalendarDate *_originalOccurrenceStartDate;
    EKCalendarDate *_originalOccurrenceEndDate;
    NSNumber *_originalOccurrenceIsAllDay;
    NSDate *_proposedEndDate;
}

@property (readonly, nonatomic) NSString *UUID; // @dynamic UUID;
@property (copy, nonatomic) NSSet *actions;
@property (nonatomic, getter=isAllDay) BOOL allDay;
@property (readonly, nonatomic) BOOL allowsAllDayModifications;
@property (readonly, nonatomic) BOOL allowsAvailabilityModifications;
@property (readonly, nonatomic) BOOL allowsParticipantStatusModifications;
@property (readonly, nonatomic) BOOL allowsParticipationStatusModifications;
@property (readonly, nonatomic) BOOL allowsPrivacyLevelModifications;
@property (readonly, nonatomic) BOOL allowsProposedTimeModifications;
@property (readonly, nonatomic) BOOL allowsResponseCommentModifications;
@property (readonly, nonatomic) BOOL allowsTravelTimeModifications;
@property (nonatomic) BOOL attendeeComment;
@property (nonatomic) BOOL attendeeDeclinedStartDate;
@property (nonatomic) BOOL attendeeProposedStartDate;
@property (nonatomic) BOOL attendeeReplyChanged; // @dynamic attendeeReplyChanged;
@property (nonatomic) BOOL attendeeStatus;
@property (readonly, nonatomic) BOOL automaticLocationGeocodingAllowed;
@property (nonatomic) long long availability;
@property (readonly, nonatomic) NSString *birthdayContactIdentifier;
@property (readonly, nonatomic) long long birthdayPersonID;
@property (readonly, nonatomic) NSString *birthdayPersonUniqueID; // @synthesize birthdayPersonUniqueID=_birthdayPersonUniqueID;
@property (nonatomic) unsigned long long cachedJunkStatus; // @dynamic cachedJunkStatus;
@property (readonly, nonatomic) BOOL canBeRespondedTo;
@property (readonly, nonatomic) BOOL canDetachSingleOccurrence;
@property (nonatomic) int clearModifiedFlags; // @synthesize clearModifiedFlags=_clearModifiedFlags;
@property (strong, nonatomic) NSURL *conferenceURL;
@property (readonly, nonatomic) long long currentUserGeneralizedParticipantRole;
@property (readonly, nonatomic, getter=isCurrentUserInvitedAttendee) BOOL currentUserInvitedAttendee; // @synthesize currentUserInvitedAttendee=_currentUserInvitedAttendee;
@property (nonatomic) BOOL dateChanged;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly, nonatomic) double duration;
@property (readonly, nonatomic) double durationIncludingTravel;
@property (readonly, nonatomic) BOOL eligibleForTravelAdvisories;
@property (readonly, nonatomic) EKCalendarDate *endCalendarDate;
@property (copy, nonatomic) NSDate *endDate;
@property (strong, nonatomic) EKStructuredLocation *endLocation; // @dynamic endLocation;
@property (readonly, nonatomic) NSString *eventIdentifier;
@property (readonly, nonatomic) NSString *eventOccurrenceID;
@property (readonly, nonatomic) EKEventStore *eventStore;
@property (nonatomic) int externalTrackingStatus;
@property (readonly, nonatomic) NSURL *externalURL;
@property (nonatomic) BOOL firedTTL;
@property (readonly, nonatomic) BOOL hasAttachmentChanges;
@property (readonly, nonatomic) BOOL hasComplexRecurrence;
@property (readonly, nonatomic) BOOL hasPredictedLocation;
@property (readonly) unsigned long long hash;
@property (readonly, copy, nonatomic) NSDate *initialEndDate;
@property (readonly, copy, nonatomic) NSDate *initialStartDate;
@property (nonatomic) unsigned long long invitationStatus;
@property (nonatomic) BOOL isAlerted;
@property (readonly, nonatomic) BOOL isAllDayDirty;
@property (readonly, nonatomic) BOOL isDetached;
@property (readonly, nonatomic) BOOL isEditable;
@property (readonly, nonatomic) BOOL isEndDateDirty;
@property (readonly, nonatomic) BOOL isMaster;
@property (readonly, nonatomic) BOOL isMasterOrDetachedOccurrence;
@property (nonatomic) BOOL isPhantom;
@property (readonly, nonatomic) BOOL isPrivateEventSharedToMe;
@property (readonly, nonatomic) BOOL isSignificantlyDetached;
@property (readonly, nonatomic) BOOL isSignificantlyDetachedIgnoringParticipation;
@property (readonly, nonatomic) BOOL isStartDateDirty;
@property (readonly, nonatomic) BOOL isStatusDirty;
@property (nonatomic) unsigned long long junkStatus;
@property (readonly, nonatomic) NSURL *launchURL;
@property (nonatomic) BOOL locationChanged;
@property (readonly, nonatomic) BOOL locationIsAConferenceRoom;
@property (nonatomic) long long locationPredictionState;
@property (readonly, nonatomic) NSString *locationWithoutPrediction;
@property (strong, nonatomic) NSArray *locations;
@property (readonly, nonatomic) NSArray *locationsWithoutPrediction;
@property (readonly, nonatomic) NSDate *occurrenceDate;
@property (copy, nonatomic) EKCalendarDate *occurrenceEndDate; // @synthesize occurrenceEndDate=_occurrenceEndDate;
@property (nonatomic) BOOL occurrenceIsAllDay; // @synthesize occurrenceIsAllDay=_occurrenceIsAllDay;
@property (copy, nonatomic) EKCalendarDate *occurrenceStartDate; // @synthesize occurrenceStartDate=_occurrenceStartDate;
@property (readonly, nonatomic) EKParticipant *organizer; // @dynamic organizer;
@property (copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate; // @synthesize originalOccurrenceEndDate=_originalOccurrenceEndDate;
@property (copy, nonatomic) NSNumber *originalOccurrenceIsAllDay; // @synthesize originalOccurrenceIsAllDay=_originalOccurrenceIsAllDay;
@property (copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate; // @synthesize originalOccurrenceStartDate=_originalOccurrenceStartDate;
@property (readonly, nonatomic) NSDate *originalStartDate;
@property (nonatomic) long long participationStatus;
@property (strong, nonatomic) NSDate *participationStatusModifiedDate;
@property (readonly, nonatomic) long long pendingParticipationStatus;
@property (readonly, nonatomic) BOOL potentiallyEligibleForTravelAdvisories;
@property (readonly, nonatomic) EKStructuredLocation *preferredLocationWithoutPrediction;
@property (nonatomic) long long privacyLevel;
@property (readonly, nonatomic, getter=isPrivacySet) BOOL privacySet;
@property (strong, nonatomic) NSDate *proposedEndDate; // @synthesize proposedEndDate=_proposedEndDate;
@property (strong, nonatomic) NSDate *proposedStartDate;
@property (readonly, nonatomic) NSDate *recurrenceDate;
@property (readonly, nonatomic) EKRecurrenceIdentifier *recurrenceIdentifier;
@property (copy, nonatomic) NSString *recurrenceSet;
@property (nonatomic) BOOL requiresDetachDueToSnoozedAlarm; // @synthesize requiresDetachDueToSnoozedAlarm=_requiresDetachDueToSnoozedAlarm;
@property (readonly, nonatomic) BOOL responseMustApplyToAll;
@property (readonly, nonatomic) NSString *sendersEmail;
@property (readonly, nonatomic) NSString *sendersPhoneNumber;
@property (readonly, nonatomic) EKCalendarDate *startCalendarDate;
@property (readonly, nonatomic) EKCalendarDate *startCalendarDateIncludingTravelTime;
@property (copy, nonatomic) NSDate *startDate;
@property (readonly, nonatomic) NSDate *startDateIncludingTravel;
@property (nonatomic) long long status;
@property (copy, nonatomic) EKStructuredLocation *structuredLocation; // @dynamic structuredLocation;
@property (strong, nonatomic) EKSuggestedEventInfo *suggestionInfo;
@property (readonly) Class superclass;
@property (readonly, nonatomic) BOOL supportsJunkReporting;
@property (readonly, nonatomic) BOOL supportsParticipationStatusModificationsWithoutNotification;
@property (nonatomic) BOOL timeChanged;
@property (nonatomic) BOOL titleChanged;
@property (nonatomic) long long travelAdvisoryBehavior;
@property (readonly, nonatomic) BOOL travelAdvisoryBehaviorIsEffectivelyEnabled;
@property (readonly, nonatomic) long long travelRoutingMode;
@property (strong, nonatomic) EKStructuredLocation *travelStartLocation; // @dynamic travelStartLocation;
@property (nonatomic) double travelTime;

+ (id)EKObjectChangeSummarizer_multiValueDiffKeys;
+ (id)EKObjectChangeSummarizer_singleValueDiffKeys;
+ (id)_basicChangesRequiringSpanAll;
+ (BOOL)_calendarsAreSharedToMeInSameSourceAndHaveSameOwner:(id)arg1;
+ (long long)_coercedEventAvailabilityForDesiredAvailability:(long long)arg1 supportedAvailabilities:(unsigned long long)arg2;
+ (long long)_eventAvailabilityForParticipantStatus:(long long)arg1 supportedEventAvailabilities:(unsigned long long)arg2 isAllDayEvent:(BOOL)arg3;
+ (id)_locationStringForLocations:(id)arg1;
+ (id)_relatedCachedTimeKeys;
+ (id)_updatedPredictedLocationRespectingTimeoutBudgetForEvent:(id)arg1 error:(id *)arg2;
+ (id)eventWithEventStore:(id)arg1;
+ (id)externalUriScheme;
+ (Class)frozenClass;
+ (id)generateUniqueIDWithEvent:(id)arg1 originalEvent:(id)arg2 calendar:(id)arg3;
+ (BOOL)isMultiDayTimedEventWithStartDate:(id)arg1 endDate:(id)arg2 allDay:(BOOL)arg3 inCalendar:(id)arg4;
+ (id)knownKeysToSkipForFutureChanges;
+ (id)knownKeysToUseForFutureChanges;
+ (id)knownPerUserPropertyKeys;
+ (id)knownRelationshipMultiValueKeys;
+ (id)knownRelationshipSingleValueKeys;
+ (id)knownRequireRSVPKeys;
+ (id)knownSingleValueKeysForComparison;
- (void).cxx_destruct;
- (void)_addDefaultAlarms;
- (void)_addNewAttendeesToRecentsIfNeeded;
- (void)_addOrganizerToRecentsIfNeeded;
- (void)_adjustAfterRebaseForMovingFromOldSource:(id)arg1 toNewSource:(id)arg2 committingItem:(id)arg3;
- (void)_adjustForNewCalendarBeforeCommit;
- (id)_adjustedPersistedDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2 pinMode:(unsigned long long)arg3 clientCalendarDate:(id *)arg4;
- (void)_applyTimeChangesToMaster;
- (id)_calculateDurationWithStart:(id)arg1 end:(id)arg2 allDay:(BOOL)arg3;
- (BOOL)_canMoveOrCopyFromCalendar:(id)arg1 toCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id *)arg4;
- (BOOL)_canWriteConferenceURL;
- (void)_cancelDetachedEventsWithSpan:(long long)arg1;
- (BOOL)_cancelWithSpan:(long long)arg1 error:(id *)arg2;
- (BOOL)_checkStartDateConstraintAgainstDate:(CDStruct_79f9e052)arg1 timeZone:(id)arg2 error:(id *)arg3;
- (void)_clearAttendeeChangedFlags;
- (void)_clearExceptionDatesAndUpdateDetachedOriginalDates;
- (void)_clearLocationPredictionCacheIfNotFrozen;
- (void)_clearLocationPredictionCacheIfNotFrozenHoldingLock;
- (void)_clearOriginalDateFields;
- (id)_committedEndDate;
- (id)_committedStartDate;
- (id)_conferenceRoomDisplayStrings;
- (BOOL)_couldBeJunkCommon;
- (id)_dateForNextOccurrence;
- (void)_deleteFromOccurrenceDateOnward:(id)arg1;
- (void)_deleteThisOccurrence;
- (BOOL)_deleteWithSpan:(long long)arg1 error:(id *)arg2;
- (void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(BOOL)arg3;
- (id)_detectConferenceURL;
- (BOOL)_diff:(id)arg1 isDifferentFromCommittedEventHelperRequiresReschedule:(BOOL)arg2;
- (BOOL)_eligibleForTravelAdvisoriesIncludePotential:(BOOL)arg1;
- (BOOL)_eventIsTheOnlyRemainingOccurrence;
- (BOOL)_fetchedEventIsConflict:(id)arg1 forStartDate:(id)arg2 endDate:(id)arg3;
- (void)_filterExceptionDates;
- (id)_firstNonConferenceRoomLocationTitle;
- (id)_generateNewUniqueID;
- (BOOL)_hasAbsoluteAlarms;
- (BOOL)_hasBasicChangesRequiringSpanAll;
- (BOOL)_hasChangesForConferenceURLDetection;
- (BOOL)_hasExternalIDOrDeliverySource;
- (BOOL)_hasOrHadRecurrenceRule;
- (BOOL)_hasRecurrenceRuleChangeRequiringSpanAll;
- (BOOL)_invitationChangedPropertyForFlag:(unsigned int)arg1;
- (BOOL)_isAllDay;
- (BOOL)_isOriginalOccurrenceStartDateSameAsCommittedStartDate;
- (BOOL)_isParticipationStatusDirty;
- (BOOL)_isSignificantlyDetachedComparedToMaster:(id)arg1 shouldIgnorePartStat:(BOOL)arg2;
- (BOOL)_isSimpleRepeatingEvent;
- (id)_keysToChangeForDuplicateWithOptions:(long long)arg1;
- (BOOL)_needsPredictedLocationCacheUpdateHoldingLock;
- (BOOL)_noRemainingEarlierOccurrences;
- (id)_nsCalendar;
- (BOOL)_occurrenceExistsOnDate:(id)arg1 timeZone:(id)arg2;
- (long long)_parentParticipationStatus;
- (id)_pinDate:(id)arg1 withPinMode:(unsigned long long)arg2;
- (id)_prioritizedConferencesSources;
- (void)_propagateChangesToDetachedEvents:(id)arg1 significantlyDetachedEvents:(id)arg2 startDateOffset:(id)arg3 duration:(id)arg4 calendar:(id)arg5;
- (void)_removeDefaultAlarms;
- (BOOL)_requirementsToMoveOrCopyToCalendarHelperAllowedToMoveOrCopyEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (BOOL)_requirementsToMoveToCalendarHelperAlterationsRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (BOOL)_requirementsToMoveToCalendarHelperDuplicationRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (BOOL)_requirementsToMoveToCalendarHelperNeedToRemoveOriginalToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (BOOL)_requirementsToMoveToCalendarHelperReinviteAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (BOOL)_requirementsToMoveToCalendarHelperRemoveAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (BOOL)_reset;
- (void)_resetInternalState;
- (void)_setInvitationChangedProperty:(BOOL)arg1 forFlag:(unsigned int)arg2;
- (void)_setInvitationStatusAlertedIfNecessary;
- (void)_setInvitationStatusUnalertedIfNecessary;
- (void)_setStartDate:(id)arg1 andClearProposedTimes:(BOOL)arg2;
- (BOOL)_settingTimeZoneChangesStartEndDates;
- (BOOL)_shouldAlertInviteeDeclines;
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(long long)arg1;
- (BOOL)_shouldDeclineInsteadOfDelete;
- (BOOL)_shouldPreserveFutureWhenSlicingWithStartDate:(id)arg1 newStartDate:(id)arg2;
- (BOOL)_suggestedStartDateHelperRecurrenceRuleRequiresExpansion:(id)arg1 forDate:(id)arg2;
- (id)_travelTimeInternalDescription;
- (void)_updateConferenceURL;
- (void)_updateDefaultAlarms;
- (void)_updateEndDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;
- (id)_updateMasterDate:(id)arg1 forChangeToOccurrenceDate:(id)arg2 fromOriginalOccurrenceDate:(id)arg3;
- (void)_updateModifiedProperties;
- (void)_updateModifiedPropertiesForThisEventAndAllDetachments;
- (id)_updatePredictedLocationCacheIfNeeded;
- (id)_updatePredictedLocationCacheIfNeededHoldingLock;
- (void)_updateSelfFromDetachedEventIfNeededForDelete;
- (void)_updateStartDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;
- (BOOL)_userAddressesRepresentInvitedAttendee:(id)arg1 checkEmailAddresses:(BOOL)arg2;
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(long long)arg1;
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(long long)arg1 error:(id *)arg2;
- (void)_willCommit;
- (void)addConferenceRooms:(id)arg1;
- (void)addEventAction:(id)arg1;
- (id)adjustedPersistedDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;
- (BOOL)allowsAlarmModifications;
- (BOOL)allowsAttendeesModifications;
- (BOOL)allowsCalendarModifications;
- (BOOL)allowsRecurrenceModifications;
- (BOOL)allowsSpansOtherThanThisEvent;
- (id)birthdayContactName;
- (id)birthdayID;
- (BOOL)canForward;
- (BOOL)canMoveOrCopyToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;
- (BOOL)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id *)arg4;
- (BOOL)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;
- (BOOL)changingAllDayPropertyIsAllowed;
- (void)clearCachedTimeValues;
- (void)clearDetectedConferenceURL;
- (void)clearInvitationStatus;
- (BOOL)commitWithSpan:(long long)arg1 error:(id *)arg2;
- (id)committedValueForKey:(id)arg1;
- (long long)compareStartDateIncludingTravelWithEvent:(id)arg1;
- (long long)compareStartDateWithEvent:(id)arg1;
- (id)conferenceURLDetected;
- (id)conferenceURLForDisplay;
- (void)confirmPredictedLocation:(id)arg1;
- (BOOL)conformsToRecurrenceRules:(id)arg1;
- (BOOL)couldBeJunk;
- (unsigned long long)countOfAttendeeProposedTimes;
- (BOOL)currentUserMayActAsOrganizer;
- (long long)daysSpannedInCalendar:(id)arg1;
- (id)defaultAlarms;
- (id)diffFromCommitted;
- (BOOL)disallowProposeNewTime;
- (void)dismissAcceptedProposeNewTimeNotification;
- (id)duplicateWithOptions:(long long)arg1;
- (BOOL)durationOverlapsRecurrenceInterval;
- (id)effectiveTimeZone;
- (id)endDateRaw;
- (unsigned long long)entityType;
- (id)externalURI;
- (void)forceSetTimeZone:(id)arg1;
- (BOOL)hasAttendeeProposedTimes;
- (BOOL)hasChangesRequiringSpanAll;
- (BOOL)hasValidEventAction;
- (id)init;
- (id)initWithEventStore:(id)arg1;
- (id)initWithObjectForCopy:(id)arg1;
- (id)initWithPersistentObject:(id)arg1;
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;
- (unsigned int)invitationChangedProperties;
- (BOOL)isBirthday;
- (BOOL)isDifferentAndHasForwardedAttendeesWithDiff:(id)arg1;
- (BOOL)isDifferentAndHasNewProposedTimeWithDiff:(id)arg1;
- (BOOL)isDifferentAndHasUnscheduledAttendeesWithDiff:(id)arg1;
- (BOOL)isDifferentAndModifiedAttendeesWithDiff:(id)arg1;
- (BOOL)isDifferentAndRequiresRSVPWithDiff:(id)arg1;
- (BOOL)isDifferentAndRequiresRescheduleWithDiff:(id)arg1;
- (BOOL)isDifferentExceptingPerUserPropertiesWithDiff:(id)arg1;
- (BOOL)isDifferentFromCommittedEventAndHasUnscheduledAttendees;
- (BOOL)isDifferentFromCommittedEventAndRequiresRSVP;
- (BOOL)isDifferentFromCommittedEventAndRequiresReschedule;
- (BOOL)isDifferentWithDiff:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqual:(id)arg1 comparingKeys:(id)arg2;
- (BOOL)isFirstOccurrence;
- (BOOL)isFloating;
- (BOOL)isMainOccurrence;
- (BOOL)isMultiDayTimedEventInCalendar:(id)arg1;
- (BOOL)isOnlyOccurrence;
- (BOOL)isProposedTimeEvent;
- (BOOL)isTentative;
- (BOOL)isValidAttendee:(id)arg1 forCalendar:(id)arg2;
- (id)lunarCalendarString;
- (void)makeRecurrenceEndCountBased;
- (void)makeRecurrenceEndDateBased;
- (void)markAsCommitted;
- (void)markAsSaved;
- (void)markEventAsAttendeeForward;
- (id)masterEvent;
- (BOOL)needsOccurrenceCacheUpdate;
- (BOOL)overlapsWithOrIsSameDayAsEventInSeries;
- (void)overrideStartDate:(id)arg1;
- (BOOL)phantomMaster;
- (void)postModifiedNotification;
- (id)potentialConflictOccurrenceDatesInTimePeriod:(double *)arg1;
- (id)privacyDescription;
- (id)privacyLevelString;
- (void)rebase;
- (id)recurrenceRule;
- (BOOL)refresh;
- (void)rejectPredictedLocation;
- (void)removeConferenceRooms:(id)arg1;
- (void)removeEventAction:(id)arg1;
- (BOOL)removeWithSpan:(long long)arg1 error:(id *)arg2;
- (long long)requirementsToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (long long)requirementsToMoveToCalendar:(id)arg1;
- (BOOL)requiresCopyToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (BOOL)requiresDetach;
- (void)reset;
- (id)responseComment;
- (BOOL)revert;
- (void)rollback;
- (id)roomAttendees;
- (id)scanForConflicts;
- (BOOL)seriesHasOutOfOrderEvents;
- (BOOL)seriesHasOverlappingOrOnSameDayOrOutOfOrderEvents;
- (BOOL)serverSupportedProposeNewTime;
- (void)setBirthdayContact:(id)arg1;
- (void)setBirthdayContactIdentifier:(id)arg1;
- (void)setCalendar:(id)arg1;
- (void)setEndDateRaw:(id)arg1;
- (void)setInvitationChangedProperties:(unsigned int)arg1;
- (void)setIsJunk:(BOOL)arg1 shouldSave:(BOOL)arg2;
- (void)setLocationPredictionAllowed:(BOOL)arg1;
- (void)setLunarCalendarString:(id)arg1;
- (void)setNeedsOccurrenceCacheUpdate:(BOOL)arg1;
- (void)setNotes:(id)arg1;
- (void)setNotesCommon:(id)arg1;
- (void)setOriginalStartDate:(id)arg1;
- (void)setPhantomMaster:(BOOL)arg1;
- (void)setPredictedLocationFrozen:(BOOL)arg1;
- (void)setRecurrenceRule:(id)arg1;
- (void)setResponseComment:(id)arg1;
- (void)setStartDateRaw:(id)arg1;
- (void)setStructuredLocation:(id)arg1 preserveConferenceRooms:(BOOL)arg2;
- (void)setTimeZone:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setURL:(id)arg1;
- (void)setURLCommon:(id)arg1;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (id)specificIdentifier;
- (id)startDateForRecurrence;
- (id)startDateRaw;
- (id)startOfDayForEndDateInCalendar:(id)arg1;
- (id)startOfDayForStartDateInCalendar:(id)arg1;
- (id)suggestedStartDateForCurrentRecurrenceRule;
- (BOOL)supportsAddingAttachments;
- (id)title;
- (id)uniqueId;
- (void)updateConferenceURLIfNeeded;
- (BOOL)updateEventToEvent:(id)arg1;
- (BOOL)updateEventToEvent:(id)arg1 commit:(BOOL)arg2;
- (BOOL)updateWithGeocodedMapItemAndSaveWithCommit:(id)arg1 eventStore:(id)arg2 error:(id *)arg3;
- (BOOL)validate:(id *)arg1;
- (BOOL)validateAndUpdateOccurrenceDateFieldsAfterRefresh;
- (BOOL)validateRecurrenceRule:(id)arg1 error:(id *)arg2;
- (BOOL)validateWithSpan:(long long)arg1 error:(id *)arg2;

@end

