//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <EventKit/EKCalendarItem.h>

@class EKCalendarDate, EKParticipant, EKStructuredLocation, NSArray, NSDate, NSNumber, NSString;

@interface EKEvent : EKCalendarItem
{
    EKStructuredLocation *_cachedLocationPrediction;
    NSDate *_cachedLocationPredictionExpirationDate;
    BOOL _locationPredictionFrozen;
    BOOL _occurrenceIsAllDay;
    BOOL _requiresDetachDueToSnoozedAlarm;
    EKCalendarDate *_occurrenceStartDate;
    EKCalendarDate *_occurrenceEndDate;
    EKCalendarDate *_originalOccurrenceStartDate;
    EKCalendarDate *_originalOccurrenceEndDate;
    NSNumber *_originalOccurrenceIsAllDay;
    NSString *_birthdayPersonUniqueID;
}

@property (nonatomic, getter=isAllDay) BOOL allDay;
@property (strong) NSArray *attachments; // @dynamic attachments;
@property (nonatomic) long long availability;
@property (readonly, nonatomic) NSString *birthdayContactIdentifier;
@property (readonly, nonatomic) long long birthdayPersonID;
@property (readonly, nonatomic) NSString *birthdayPersonUniqueID; // @synthesize birthdayPersonUniqueID=_birthdayPersonUniqueID;
@property (copy, nonatomic) NSDate *endDate;
@property (readonly, nonatomic) NSString *eventIdentifier;
@property (readonly, nonatomic) BOOL isDetached;
@property (readonly, nonatomic) unsigned int modifiedProperties;
@property (readonly, nonatomic) NSDate *occurrenceDate;
@property (copy, nonatomic) EKCalendarDate *occurrenceEndDate; // @synthesize occurrenceEndDate=_occurrenceEndDate;
@property (nonatomic) BOOL occurrenceIsAllDay; // @synthesize occurrenceIsAllDay=_occurrenceIsAllDay;
@property (copy, nonatomic) EKCalendarDate *occurrenceStartDate; // @synthesize occurrenceStartDate=_occurrenceStartDate;
@property (readonly, nonatomic) EKParticipant *organizer; // @dynamic organizer;
@property (copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate; // @synthesize originalOccurrenceEndDate=_originalOccurrenceEndDate;
@property (copy, nonatomic) NSNumber *originalOccurrenceIsAllDay; // @synthesize originalOccurrenceIsAllDay=_originalOccurrenceIsAllDay;
@property (copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate; // @synthesize originalOccurrenceStartDate=_originalOccurrenceStartDate;
@property (nonatomic) BOOL requiresDetachDueToSnoozedAlarm; // @synthesize requiresDetachDueToSnoozedAlarm=_requiresDetachDueToSnoozedAlarm;
@property (copy, nonatomic) NSDate *startDate;
@property (readonly, nonatomic) long long status;
@property (copy, nonatomic) EKStructuredLocation *structuredLocation; // @dynamic structuredLocation;

+ (long long)_eventAvailabilityForParticipantStatus:(long long)arg1 supportedEventAvailabilities:(unsigned long long)arg2 isAllDayEvent:(BOOL)arg3;
+ (id)eventWithEventStore:(id)arg1;
- (void).cxx_destruct;
- (void)_cancelDetachedEventsWithSpan:(long long)arg1;
- (BOOL)_cancelWithSpan:(long long)arg1 error:(id *)arg2;
- (BOOL)_checkStartDateConstraintAgainstDate:(CDStruct_79f9e052)arg1 timeZone:(id)arg2 error:(id *)arg3;
- (void)_clearLocationPredictionCacheIfNotFrozen;
- (id)_dateForNextOccurrence;
- (void)_deleteThisOccurrence;
- (BOOL)_deleteWithSpan:(long long)arg1 error:(id *)arg2;
- (void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(BOOL)arg3;
- (id)_effectiveTimeZone;
- (BOOL)_eventIsTheOnlyRemainingOccurrence;
- (BOOL)_fetchedEventIsConflict:(id)arg1 forStartDate:(id)arg2 endDate:(id)arg3;
- (CDStruct_79f9e052)_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)arg1 orNSDate:(id)arg2;
- (BOOL)_isAllDay;
- (BOOL)_isInitialOccurrenceDate:(id)arg1;
- (BOOL)_isSimpleRepeatingEvent;
- (BOOL)_noRemainingEarlierOccurrences;
- (BOOL)_occurrenceExistsOnDate:(double)arg1 timeZone:(id)arg2;
- (long long)_parentParticipationStatus;
- (id)_persistentEvent;
- (void)_sendModifiedNote;
- (void)_setStartDate:(id)arg1 andClearProposedTimes:(BOOL)arg2;
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(long long)arg1;
- (BOOL)_shouldDeclineInsteadOfDelete;
- (id)_suggestedEventInfoRelation;
- (id)_travelTimeInternalDescription;
- (void)_updatePredictedLocationCacheIfNeeded;
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(long long)arg1;
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(long long)arg1 error:(id *)arg2;
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;
- (id)actualProposedStartDate;
- (BOOL)allowsAlarmModifications;
- (BOOL)allowsAttendeesModifications;
- (BOOL)allowsAvailabilityModifications;
- (BOOL)allowsCalendarModifications;
- (BOOL)allowsPrivacyLevelModifications;
- (BOOL)allowsProposedTimeModifications;
- (BOOL)allowsRecurrenceModifications;
- (BOOL)allowsSpansOtherThanThisEvent;
- (BOOL)allowsTravelTimeModifications;
- (BOOL)attendeeReplyChanged;
- (BOOL)automaticLocationGeocodingAllowed;
- (BOOL)canBeRespondedTo;
- (BOOL)canDetachSingleOccurrence;
- (BOOL)canForward;
- (BOOL)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;
- (BOOL)changingAllDayPropertyIsAllowed;
- (void)clearInvitationStatus;
- (BOOL)commitWithSpan:(long long)arg1 error:(id *)arg2;
- (id)committedValueForKey:(id)arg1;
- (long long)compareStartDateWithEvent:(id)arg1;
- (void)confirmPredictedLocation:(id)arg1;
- (BOOL)conformsToRecurrenceRules:(id)arg1;
- (BOOL)dateChanged;
- (void)dealloc;
- (id)description;
- (void)didCommit;
- (id)dirtyPropertiesToSkip;
- (double)duration;
- (double)durationIncludingTravel;
- (BOOL)eligibleForTravelAdvisories;
- (id)endCalendarDate;
- (CDStruct_79f9e052)endDateGr;
- (CDStruct_79f9e052)endDatePinnedForAllDay;
- (id)eventStore;
- (id)externalURI;
- (id)externalURL;
- (BOOL)firedTTL;
- (BOOL)hasAttendeeProposedTimes;
- (BOOL)hasPredictedLocation;
- (BOOL)hasSelfAttendee;
- (unsigned long long)hash;
- (id)init;
- (id)initWithEventStore:(id)arg1;
- (id)initWithPersistentObject:(id)arg1;
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;
- (id)initialEndDate;
- (id)initialStartDate;
- (unsigned long long)invitationStatus;
- (BOOL)isAllDayDirty;
- (BOOL)isEditable;
- (BOOL)isEndDateDirty;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isPredictedLocationFrozen;
- (BOOL)isStartDateDirty;
- (BOOL)isStatusDirty;
- (BOOL)isTentative;
- (BOOL)locationChanged;
- (BOOL)locationIsAConferenceRoom;
- (long long)locationPredictionState;
- (id)locationWithoutPrediction;
- (BOOL)needsOccurrenceCacheUpdate;
- (void)overrideStartDate:(id)arg1;
- (long long)participationStatus;
- (id)participationStatusModifiedDate;
- (long long)pendingParticipationStatus;
- (id)preferredLocationWithoutPrediction;
- (long long)privacyLevel;
- (id)privacyLevelString;
- (id)proposedStartDate;
- (void)rebaseWithOldPCI:(id)arg1 newPCI:(id)arg2;
- (id)recurrenceRule;
- (BOOL)refresh;
- (void)rejectPredictedLocation;
- (BOOL)removeWithSpan:(long long)arg1 error:(id *)arg2;
- (BOOL)requiresDetach;
- (void)reset;
- (id)responseComment;
- (BOOL)responseMustApplyToAll;
- (void)revert;
- (void)rollback;
- (id)scanForConflicts;
- (BOOL)serverSupportedProposeNewTime;
- (void)setFiredTTL:(BOOL)arg1;
- (void)setInvitationStatus:(unsigned long long)arg1;
- (void)setLocation:(id)arg1;
- (void)setLocationPredictionState:(long long)arg1;
- (void)setModifiedProperties:(unsigned int)arg1;
- (void)setNeedsOccurrenceCacheUpdate:(BOOL)arg1;
- (void)setParticipationStatus:(long long)arg1;
- (void)setPredictedLocationFrozen:(BOOL)arg1;
- (void)setPrivacyLevel:(long long)arg1;
- (void)setProposedStartDate:(id)arg1;
- (void)setRecurrenceRule:(id)arg1;
- (void)setResponseComment:(id)arg1;
- (void)setSuggestionInfo:(id)arg1;
- (void)setTimeZone:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTravelAdvisoryBehavior:(long long)arg1;
- (void)setTravelTime:(double)arg1;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (id)startCalendarDate;
- (id)startCalendarDateIncludingTravelTime;
- (id)startDateForRecurrence;
- (CDStruct_79f9e052)startDateGr;
- (id)startDateIncludingTravel;
- (CDStruct_79f9e052)startDatePinnedForAllDay;
- (id)structuredLocationWithoutPrediction;
- (id)suggestionInfo;
- (BOOL)timeChanged;
- (id)title;
- (BOOL)titleChanged;
- (long long)travelAdvisoryBehavior;
- (BOOL)travelAdvisoryBehaviorIsEffectivelyEnabled;
- (long long)travelRoutingMode;
- (double)travelTime;
- (id)uniqueId;
- (BOOL)updateEventToEvent:(id)arg1;
- (BOOL)validateRecurrenceRule:(id)arg1 error:(id *)arg2;
- (BOOL)validateWithSpan:(long long)arg1 error:(id *)arg2;

@end

