//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <EventKit/EKCalendarItem.h>

@class EKCalendarDate, EKEventStore, EKParticipant, EKStructuredLocation, EKSuggestedEventInfo, NSArray, NSDate, NSNumber, NSString, NSURL;

@interface EKEvent : EKCalendarItem
{
    BOOL _occurrenceIsAllDay;
    BOOL _requiresDetachDueToSnoozedAlarm;
    EKCalendarDate *_occurrenceStartDate;
    EKCalendarDate *_occurrenceEndDate;
    EKCalendarDate *_originalOccurrenceStartDate;
    EKCalendarDate *_originalOccurrenceEndDate;
    NSNumber *_originalOccurrenceIsAllDay;
    NSString *_birthdayPersonUniqueID;
}

@property (readonly, nonatomic) NSString *UUID; // @dynamic UUID;
@property (nonatomic, getter=isAllDay) BOOL allDay;
@property (readonly, nonatomic) BOOL allowsPrivacyLevelModifications;
@property (readonly, nonatomic) NSArray *attachments; // @dynamic attachments;
@property (readonly, nonatomic) BOOL attendeeReplyChanged;
@property (readonly, nonatomic) BOOL automaticLocationGeocodingAllowed;
@property (nonatomic) long long availability;
@property (readonly, nonatomic) NSString *birthdayContactIdentifier;
@property (readonly, nonatomic) long long birthdayPersonID;
@property (readonly, nonatomic) NSString *birthdayPersonUniqueID; // @synthesize birthdayPersonUniqueID=_birthdayPersonUniqueID;
@property (readonly, nonatomic) BOOL canBeRespondedTo;
@property (readonly, nonatomic) BOOL canDetachSingleOccurrence;
@property (readonly, nonatomic) BOOL canSetAvailability;
@property (readonly, nonatomic) BOOL dateChanged;
@property (readonly, nonatomic) double duration;
@property (readonly, nonatomic) double durationIncludingTravel;
@property (readonly, nonatomic) BOOL eligibleForTravelAdvisories;
@property (readonly, nonatomic) EKCalendarDate *endCalendarDate;
@property (copy, nonatomic) NSDate *endDate;
@property (readonly, nonatomic) CDStruct_79f9e052 endDateGr;
@property (readonly, nonatomic) NSString *eventIdentifier;
@property (readonly, nonatomic) EKEventStore *eventStore;
@property (readonly, nonatomic) NSURL *externalURL;
@property (readonly, copy, nonatomic) NSDate *initialEndDate;
@property (readonly, copy, nonatomic) NSDate *initialStartDate;
@property (nonatomic) unsigned long long invitationStatus;
@property (readonly, nonatomic) BOOL isAllDayDirty;
@property (readonly, nonatomic) BOOL isDetached;
@property (readonly, nonatomic) BOOL isEditable;
@property (readonly, nonatomic) BOOL isEndDateDirty;
@property (readonly, nonatomic) BOOL isStartDateDirty;
@property (readonly, nonatomic) BOOL isStatusDirty;
@property (readonly, nonatomic) BOOL isTravelTimeEditable;
@property (readonly, nonatomic) BOOL locationChanged;
@property (readonly, nonatomic) BOOL locationIsAConferenceRoom;
@property (readonly, nonatomic) unsigned int modifiedProperties;
@property (readonly, nonatomic) NSDate *occurrenceDate;
@property (copy, nonatomic) EKCalendarDate *occurrenceEndDate; // @synthesize occurrenceEndDate=_occurrenceEndDate;
@property (nonatomic) BOOL occurrenceIsAllDay; // @synthesize occurrenceIsAllDay=_occurrenceIsAllDay;
@property (copy, nonatomic) EKCalendarDate *occurrenceStartDate; // @synthesize occurrenceStartDate=_occurrenceStartDate;
@property (readonly, nonatomic) EKParticipant *organizer; // @dynamic organizer;
@property (copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate; // @synthesize originalOccurrenceEndDate=_originalOccurrenceEndDate;
@property (copy, nonatomic) NSNumber *originalOccurrenceIsAllDay; // @synthesize originalOccurrenceIsAllDay=_originalOccurrenceIsAllDay;
@property (copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate; // @synthesize originalOccurrenceStartDate=_originalOccurrenceStartDate;
@property (nonatomic) long long participationStatus;
@property (readonly, nonatomic) NSDate *participationStatusModifiedDate;
@property (readonly, nonatomic) long long pendingParticipationStatus;
@property (nonatomic) long long privacyLevel;
@property (nonatomic) BOOL requiresDetachDueToSnoozedAlarm; // @synthesize requiresDetachDueToSnoozedAlarm=_requiresDetachDueToSnoozedAlarm;
@property (copy, nonatomic) NSString *responseComment;
@property (readonly, nonatomic) BOOL responseMustApplyToAll;
@property (readonly, nonatomic) EKCalendarDate *startCalendarDate;
@property (readonly, nonatomic) EKCalendarDate *startCalendarDateIncludingTravelTime;
@property (copy, nonatomic) NSDate *startDate;
@property (readonly, nonatomic) CDStruct_79f9e052 startDateGr;
@property (readonly, nonatomic) NSDate *startDateIncludingTravel;
@property (readonly, nonatomic) long long status;
@property (copy, nonatomic) EKStructuredLocation *structuredLocation; // @dynamic structuredLocation;
@property (strong, nonatomic) EKSuggestedEventInfo *suggestionInfo;
@property (readonly, nonatomic) BOOL timeChanged;
@property (readonly, nonatomic) BOOL titleChanged;
@property (nonatomic) long long travelAdvisoryBehavior;
@property (readonly, nonatomic) BOOL travelAdvisoryBehaviorIsEffectivelyEnabled;
@property (readonly, nonatomic) long long travelRoutingMode;
@property (nonatomic) double travelTime;
@property (readonly, copy, nonatomic) NSString *uniqueId;

+ (id)eventWithEventStore:(id)arg1;
+ (id)privacyLevelAsString:(long long)arg1;
- (BOOL)_cancelWithSpan:(long long)arg1 error:(id *)arg2;
- (BOOL)_checkStartDateConstraintAgainstDate:(CDStruct_79f9e052)arg1 timeZone:(id)arg2 error:(id *)arg3;
- (id)_dateForNextOccurrence;
- (void)_deleteThisOccurrence;
- (BOOL)_deleteWithSpan:(long long)arg1 error:(id *)arg2;
- (void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(BOOL)arg3;
- (id)_effectiveTimeZone;
- (BOOL)_eventIsTheOnlyRemainingRecurrence;
- (CDStruct_79f9e052)_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)arg1 orNSDate:(id)arg2;
- (BOOL)_isAllDay;
- (BOOL)_isInitialOccurrenceDate:(id)arg1;
- (BOOL)_isSimpleRepeatingEvent;
- (BOOL)_occurrenceExistsOnDate:(double)arg1 timeZone:(id)arg2;
- (long long)_parentParticipationStatus;
- (id)_persistentEvent;
- (void)_sendModifiedNote;
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(long long)arg1;
- (BOOL)_shouldDeclineInsteadOfDelete;
- (id)_suggestedEventInfoRelation;
- (id)_travelTimeInternalDescription;
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(long long)arg1;
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(long long)arg1 error:(id *)arg2;
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;
- (BOOL)allowsAlarmModifications;
- (BOOL)allowsCalendarModifications;
- (BOOL)allowsRecurrenceModifications;
- (BOOL)allowsSpansOtherThanThisEvent;
- (BOOL)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;
- (BOOL)changingAllDayPropertyIsAllowed;
- (void)clearInvitationStatus;
- (BOOL)commitWithSpan:(long long)arg1 error:(id *)arg2;
- (id)committedValueForKey:(id)arg1;
- (long long)compareStartDateWithEvent:(id)arg1;
- (BOOL)conformsToRecurrenceRules:(id)arg1;
- (void)dealloc;
- (id)description;
- (void)didCommit;
- (id)dirtyPropertiesToSkip;
- (CDStruct_79f9e052)endDatePinnedForAllDay;
- (id)exportToICS;
- (id)externalURI;
- (BOOL)hasSelfAttendee;
- (unsigned long long)hash;
- (id)init;
- (id)initWithEventStore:(id)arg1;
- (id)initWithPersistentObject:(id)arg1;
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isTentative;
- (BOOL)needsOccurrenceCacheUpdate;
- (id)recurrenceRule;
- (BOOL)refresh;
- (BOOL)removeWithSpan:(long long)arg1 error:(id *)arg2;
- (BOOL)requiresDetach;
- (void)revert;
- (void)rollback;
- (void)setModifiedProperties:(unsigned int)arg1;
- (void)setNeedsOccurrenceCacheUpdate:(BOOL)arg1;
- (void)setRecurrenceRule:(id)arg1;
- (void)setTimeZone:(id)arg1;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (id)startDateForRecurrence;
- (CDStruct_79f9e052)startDatePinnedForAllDay;
- (id)title;
- (BOOL)updateEventToEvent:(id)arg1;
- (BOOL)validateRecurrenceRule:(id)arg1 error:(id *)arg2;
- (BOOL)validateWithSpan:(long long)arg1 error:(id *)arg2;

@end

