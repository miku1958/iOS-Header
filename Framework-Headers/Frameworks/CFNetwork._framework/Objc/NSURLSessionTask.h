//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <CFNetwork/NSCopying-Protocol.h>
#import <CFNetwork/NSProgressReporting-Protocol.h>

@class NSArray, NSData, NSDate, NSDictionary, NSError, NSProgress, NSString, NSURL, NSURLRequest, NSURLResponse, NSURLSession, NSURLSessionEffectiveConfiguration, NSURLSessionTaskDependency, NSURLSessionTaskDependencyTree, NSURLSessionTaskHTTPAuthenticator, NSUUID, __CFN_TaskMetrics, __CFN_TransactionMetrics;
@protocol NSURLSessionAppleIDContext, OS_dispatch_queue, OS_nw_activity, OS_nw_endpoint, OS_voucher, SZExtractor, __NSURLSessionTaskGroupForConfiguration;

@interface NSURLSessionTask : NSObject <NSCopying, NSProgressReporting>
{
    NSProgress *_uploadProgress;
    NSProgress *_downloadProgress;
    struct __CFDictionary *_atsStateCache;
    struct os_unfair_lock_s _unfair_lock;
    BOOL _isInUpload;
    BOOL _undeterminedUploadProgressState;
    BOOL _undeterminedDownloadProgressState;
    BOOL _progressReportingFinished;
    BOOL _seenFirstResume;
    BOOL _shouldSkipPreferredClientCertificateLookup;
    BOOL _cacheOnly;
    BOOL _preventsSystemHTTPProxyAuthentication;
    BOOL _requiresSecureHTTPSProxyConnection;
    BOOL _preventsAppSSO;
    BOOL _appSSOFallback;
    BOOL _appleIDContextRedirect;
    BOOL _shouldPipelineHTTP;
    BOOL _shouldUsePipelineHeuristics;
    BOOL _shouldSkipPipelineProbe;
    BOOL _shouldHandleCookies;
    BOOL _preventsIdleSystemSleep;
    BOOL _allowsCellular;
    BOOL _prohibitAuthUI;
    BOOL _strictContentLength;
    BOOL _connectionIsCellular;
    BOOL _connectionIsCompanionLink;
    BOOL _allowsQUIC;
    BOOL _extractorFinishedDecoding;
    BOOL _extractorPreparedForExtraction;
    BOOL _hasSZExtractor;
    BOOL _doesSZExtractorConsumeExtractedData;
    BOOL _authenticatorConfiguredViaTaskProperty;
    BOOL _isTopLevelNavigation;
    BOOL _disallowCellular;
    BOOL _knownHTTP3Capable;
    BOOL _preconnect;
    BOOL _prefersIncrementalDeliveryAPIStorage;
    unsigned short __TLSMinimumSupportedProtocolVersion;
    unsigned short __TLSMaximumSupportedProtocolVersion;
    unsigned short _TLSNegotiatedCipherSuite;
    int _cookieAcceptPolicy;
    unsigned int _qos;
    unsigned int _powerAssertion;
    unsigned int _darkWakePowerAssertion;
    int _allowsCellularOverride;
    int _allowsExpensiveOverride;
    int _allowsConstrainedOverride;
    int _networkServiceType;
    float _priorityAPIStorage;
    unsigned long long _taskIdentifier;
    NSString *_taskDescription;
    NSString *_loggableDescription;
    NSURLRequest *_originalRequest;
    NSURLRequest *_currentRequest;
    NSURLResponse *_response;
    long long _countOfBytesClientExpectsToSend;
    long long _countOfBytesClientExpectsToReceive;
    long long _countOfBytesReceived;
    long long __countOfPendingBytesReceivedEncoded;
    long long __countOfBytesReceivedEncoded;
    long long _countOfBytesSent;
    long long _countOfBytesExpectedToSend;
    long long _countOfBytesExpectedToReceive;
    long long _state;
    NSError *_error;
    double _startTime;
    long long _priorityValue;
    double _loadingPriorityValue;
    __CFN_TransactionMetrics *_backgroundTransactionMetrics;
    NSString *_pathToDownloadTaskFile;
    struct _CFHSTSPolicy *_cfHSTS;
    const struct _CFURLCache *_cfCache;
    struct _CFURLCredentialStorage *_cfCreds;
    struct OpaqueCFHTTPCookieStorage *_cfCookies;
    unsigned long long _cachePolicy;
    double _timeoutInterval;
    double _timeoutIntervalForResource_ivar;
    NSDictionary *_proxySettings;
    NSDictionary *_sslSettings;
    NSArray *_contentDispositionFallbackArray;
    NSObject<OS_voucher> *_voucher;
    long long _suspensionThreshhold;
    unsigned long long _allowedProtocolTypes;
    long long _requestPriority;
    NSUUID *_uniqueIdentifier;
    NSString *_storagePartitionIdentifier;
    id _protocolForTask;
    NSURLSessionTaskHTTPAuthenticator *_authenticator;
    NSDictionary *_dependencyInfo_ivar;
    NSURLSessionTaskDependencyTree *_dependencyTree;
    NSURLSessionTaskDependency *_taskDependency;
    NSDictionary *_DuetActivityProperties;
    NSData *__TCPConnectionMetadata;
    NSDictionary *_trailers;
    long long _discretionaryOverride;
    id<SZExtractor> _extractor;
    id<NSURLSessionAppleIDContext> _appleIDContext;
    NSURL *_publishingURL;
    NSURL *_backgroundPublishingURL;
    NSString *_APSRelayTopic;
    NSURL *_siteForCookies;
    CDUnknownBlockType _httpConnectionInfoCompletionBlock;
    NSObject<OS_nw_endpoint> *_hostOverride;
    id<__NSURLSessionTaskGroupForConfiguration> __taskGroup;
    NSURLSessionEffectiveConfiguration *_effectiveConfiguration;
    NSDate *earliestBeginDate;
    NSProgress *_progress;
    __CFN_TaskMetrics *_metrics;
    NSObject<OS_nw_activity> *_nw_activity;
    NSObject<OS_nw_activity> *_private_nw_activity;
    NSDictionary *_legacySocketStreamProperties;
    NSDictionary *_cachedSocketStreamProperties;
    long long _bytesPerSecondLimitValue;
    unsigned long long _expectedProgressTargetValue;
    long long _expectedWorkload;
    double _timeWindowDelay;
    double _timeWindowDuration;
    NSString *_boundInterfaceIdentifier;
    NSArray *_resolvedCNAMEChain;
    CDUnknownBlockType _cookieTransformCallback;
}

@property (copy, nonatomic) NSString *_APSRelayTopic; // @synthesize _APSRelayTopic;
@property (copy) NSDictionary *_DuetActivityProperties; // @synthesize _DuetActivityProperties;
@property (copy) NSData *_TCPConnectionMetadata; // @synthesize _TCPConnectionMetadata=__TCPConnectionMetadata;
@property unsigned short _TLSMaximumSupportedProtocolVersion; // @synthesize _TLSMaximumSupportedProtocolVersion=__TLSMaximumSupportedProtocolVersion;
@property unsigned short _TLSMinimumSupportedProtocolVersion; // @synthesize _TLSMinimumSupportedProtocolVersion=__TLSMinimumSupportedProtocolVersion;
@property (readonly) unsigned short _TLSNegotiatedCipherSuite; // @synthesize _TLSNegotiatedCipherSuite;
@property unsigned long long _allowedProtocolTypes; // @synthesize _allowedProtocolTypes;
@property BOOL _allowsCellular; // @synthesize _allowsCellular;
@property int _allowsCellularOverride; // @synthesize _allowsCellularOverride;
@property int _allowsConstrainedOverride; // @synthesize _allowsConstrainedOverride;
@property int _allowsExpensiveOverride; // @synthesize _allowsExpensiveOverride;
@property (nonatomic) BOOL _allowsQUIC; // @synthesize _allowsQUIC;
@property BOOL _appSSOFallback; // @synthesize _appSSOFallback;
@property (copy, setter=_setAppleIDContext:) id<NSURLSessionAppleIDContext> _appleIDContext; // @synthesize _appleIDContext;
@property BOOL _appleIDContextRedirect; // @synthesize _appleIDContextRedirect;
@property BOOL _authenticatorConfiguredViaTaskProperty; // @synthesize _authenticatorConfiguredViaTaskProperty;
@property (strong, nonatomic) NSURL *_backgroundPublishingURL; // @synthesize _backgroundPublishingURL;
@property (strong) __CFN_TransactionMetrics *_backgroundTransactionMetrics; // @synthesize _backgroundTransactionMetrics;
@property (copy) NSString *_boundInterfaceIdentifier; // @synthesize _boundInterfaceIdentifier;
@property long long _bytesPerSecondLimit; // @synthesize _bytesPerSecondLimit=_bytesPerSecondLimitValue;
@property BOOL _cacheOnly; // @synthesize _cacheOnly;
@property unsigned long long _cachePolicy; // @synthesize _cachePolicy;
@property (copy) NSDictionary *_cachedSocketStreamProperties; // @synthesize _cachedSocketStreamProperties;
@property (strong) const struct _CFURLCache *_cfCache; // @synthesize _cfCache;
@property (strong) struct OpaqueCFHTTPCookieStorage *_cfCookies; // @synthesize _cfCookies;
@property (strong) struct _CFURLCredentialStorage *_cfCreds; // @synthesize _cfCreds;
@property (strong) struct _CFHSTSPolicy *_cfHSTS; // @synthesize _cfHSTS;
@property (setter=_setConnectionIsCellular:) BOOL _connectionIsCellular; // @synthesize _connectionIsCellular;
@property BOOL _connectionIsCompanionLink; // @synthesize _connectionIsCompanionLink;
@property (copy) NSArray *_contentDispositionFallbackArray; // @synthesize _contentDispositionFallbackArray;
@property int _cookieAcceptPolicy; // @synthesize _cookieAcceptPolicy;
@property (copy, nonatomic) CDUnknownBlockType _cookieTransformCallback; // @synthesize _cookieTransformCallback;
@property long long _countOfBytesReceivedEncoded; // @synthesize _countOfBytesReceivedEncoded=__countOfBytesReceivedEncoded;
@property long long _countOfPendingBytesReceivedEncoded; // @synthesize _countOfPendingBytesReceivedEncoded=__countOfPendingBytesReceivedEncoded;
@property unsigned int _darkWakePowerAssertion; // @synthesize _darkWakePowerAssertion;
@property (strong, nonatomic) NSDictionary *_dependencyInfo; // @synthesize _dependencyInfo=_dependencyInfo_ivar;
@property BOOL _disallowCellular; // @synthesize _disallowCellular;
@property (nonatomic) long long _discretionaryOverride; // @synthesize _discretionaryOverride;
@property (nonatomic) BOOL _doesSZExtractorConsumeExtractedData; // @synthesize _doesSZExtractorConsumeExtractedData;
@property (readonly, copy) NSURLSessionEffectiveConfiguration *_effectiveConfiguration;
@property (copy, nonatomic) NSURLSessionEffectiveConfiguration *_effectiveConfiguration; // @synthesize _effectiveConfiguration;
@property (nonatomic) unsigned long long _expectedProgressTarget; // @synthesize _expectedProgressTarget=_expectedProgressTargetValue;
@property long long _expectedWorkload; // @synthesize _expectedWorkload;
@property (strong, nonatomic, setter=set_extractor:) id<SZExtractor> _extractor; // @synthesize _extractor;
@property BOOL _extractorFinishedDecoding; // @synthesize _extractorFinishedDecoding;
@property BOOL _extractorPreparedForExtraction; // @synthesize _extractorPreparedForExtraction;
@property (nonatomic) BOOL _hasSZExtractor; // @synthesize _hasSZExtractor;
@property (strong, nonatomic) NSObject<OS_nw_endpoint> *_hostOverride; // @synthesize _hostOverride;
@property (copy, nonatomic) CDUnknownBlockType _httpConnectionInfoCompletionBlock; // @synthesize _httpConnectionInfoCompletionBlock;
@property (readonly, nonatomic) BOOL _isAVAssetTask;
@property BOOL _isTopLevelNavigation; // @synthesize _isTopLevelNavigation;
@property BOOL _knownHTTP3Capable; // @synthesize _knownHTTP3Capable;
@property (copy) NSDictionary *_legacySocketStreamProperties; // @synthesize _legacySocketStreamProperties;
@property double _loadingPriority;
@property double _loadingPriorityValue; // @synthesize _loadingPriorityValue;
@property (readonly, nonatomic) NSString *_loggableDescription; // @synthesize _loggableDescription;
@property (strong) __CFN_TaskMetrics *_metrics; // @synthesize _metrics;
@property int _networkServiceType; // @synthesize _networkServiceType;
@property (strong) NSObject<OS_nw_activity> *_nw_activity; // @synthesize _nw_activity;
@property (copy) NSString *_pathToDownloadTaskFile; // @synthesize _pathToDownloadTaskFile;
@property unsigned int _powerAssertion; // @synthesize _powerAssertion;
@property (nonatomic) BOOL _preconnect; // @synthesize _preconnect;
@property BOOL _preventsAppSSO; // @synthesize _preventsAppSSO;
@property BOOL _preventsIdleSystemSleep; // @synthesize _preventsIdleSystemSleep;
@property BOOL _preventsSystemHTTPProxyAuthentication; // @synthesize _preventsSystemHTTPProxyAuthentication;
@property long long _priority;
@property long long _priorityValue; // @synthesize _priorityValue;
@property (strong) NSObject<OS_nw_activity> *_private_nw_activity; // @synthesize _private_nw_activity;
@property BOOL _prohibitAuthUI; // @synthesize _prohibitAuthUI;
@property (nonatomic) id _protocolForTask; // @synthesize _protocolForTask;
@property (copy) NSDictionary *_proxySettings; // @synthesize _proxySettings;
@property (strong, nonatomic) NSURL *_publishingURL; // @synthesize _publishingURL;
@property (nonatomic) unsigned int _qos; // @synthesize _qos;
@property long long _requestPriority; // @synthesize _requestPriority;
@property BOOL _requiresSecureHTTPSProxyConnection; // @synthesize _requiresSecureHTTPSProxyConnection;
@property (readonly, nonatomic) NSArray *_resolvedCNAMEChain; // @synthesize _resolvedCNAMEChain;
@property BOOL _shouldHandleCookies; // @synthesize _shouldHandleCookies;
@property BOOL _shouldPipelineHTTP; // @synthesize _shouldPipelineHTTP;
@property BOOL _shouldSkipPipelineProbe; // @synthesize _shouldSkipPipelineProbe;
@property BOOL _shouldSkipPreferredClientCertificateLookup; // @synthesize _shouldSkipPreferredClientCertificateLookup;
@property BOOL _shouldUsePipelineHeuristics; // @synthesize _shouldUsePipelineHeuristics;
@property (strong) NSURL *_siteForCookies; // @synthesize _siteForCookies;
@property (copy) NSDictionary *_sslSettings; // @synthesize _sslSettings;
@property (copy) NSString *_storagePartitionIdentifier; // @synthesize _storagePartitionIdentifier;
@property BOOL _strictContentLength; // @synthesize _strictContentLength;
@property long long _suspensionThreshhold; // @synthesize _suspensionThreshhold;
@property (readonly, strong) id<__NSURLSessionTaskGroupForConfiguration> _taskGroup; // @synthesize _taskGroup=__taskGroup;
@property double _timeWindowDelay; // @synthesize _timeWindowDelay;
@property double _timeWindowDuration; // @synthesize _timeWindowDuration;
@property double _timeoutInterval; // @synthesize _timeoutInterval;
@property double _timeoutIntervalForResource; // @synthesize _timeoutIntervalForResource=_timeoutIntervalForResource_ivar;
@property (strong, nonatomic) NSDictionary *_trailers; // @synthesize _trailers;
@property (copy) NSUUID *_uniqueIdentifier; // @synthesize _uniqueIdentifier;
@property (strong) NSObject<OS_voucher> *_voucher; // @synthesize _voucher;
@property (copy) NSURLSessionTaskHTTPAuthenticator *authenticator; // @synthesize authenticator=_authenticator;
@property long long countOfBytesClientExpectsToReceive; // @synthesize countOfBytesClientExpectsToReceive=_countOfBytesClientExpectsToReceive;
@property long long countOfBytesClientExpectsToSend; // @synthesize countOfBytesClientExpectsToSend=_countOfBytesClientExpectsToSend;
@property long long countOfBytesExpectedToReceive; // @synthesize countOfBytesExpectedToReceive=_countOfBytesExpectedToReceive;
@property long long countOfBytesExpectedToSend; // @synthesize countOfBytesExpectedToSend=_countOfBytesExpectedToSend;
@property long long countOfBytesReceived; // @synthesize countOfBytesReceived=_countOfBytesReceived;
@property long long countOfBytesSent; // @synthesize countOfBytesSent=_countOfBytesSent;
@property (copy) NSURLRequest *currentRequest; // @synthesize currentRequest=_currentRequest;
@property (readonly, strong) NSURL *currentRequest_URL;
@property (readonly, strong) NSURL *currentRequest_mainDocumentURL;
@property (readonly, copy) NSString *debugDescription;
@property (strong, nonatomic) NSURLSessionTaskDependencyTree *dependencyTree; // @synthesize dependencyTree=_dependencyTree;
@property (readonly, copy) NSString *description;
@property (copy) NSDate *earliestBeginDate; // @synthesize earliestBeginDate;
@property (copy) NSError *error; // @synthesize error=_error;
@property (readonly) unsigned long long hash;
@property (copy) NSURLRequest *originalRequest; // @synthesize originalRequest=_originalRequest;
@property BOOL prefersIncrementalDelivery;
@property float priority;
@property (readonly) NSProgress *progress; // @synthesize progress=_progress;
@property (copy) NSURLResponse *response; // @synthesize response=_response;
@property (readonly, strong) NSURLSession *session;
@property double startTime; // @synthesize startTime=_startTime;
@property long long state; // @synthesize state=_state;
@property (readonly) Class superclass;
@property (strong, nonatomic) NSURLSessionTaskDependency *taskDependency; // @synthesize taskDependency=_taskDependency;
@property (copy) NSString *taskDescription; // @synthesize taskDescription=_taskDescription;
@property unsigned long long taskIdentifier; // @synthesize taskIdentifier=_taskIdentifier;
@property (readonly, strong) NSObject<OS_dispatch_queue> *workQueue;

+ (id)new;
- (void)_adoptEffectiveConfiguration:(id)arg1;
- (void)_appendCountOfPendingBytesReceivedEncoded:(long long)arg1;
- (void)_completeUploadProgress;
- (void)_consumePendingBytesReceivedEncoded;
- (const struct __CFDictionary *)_copyATSState;
- (struct _CFHSTSPolicy *)_copyHSTSPolicy;
- (const struct __CFDictionary *)_copySocketStreamProperties;
- (const struct XCookieStorage *)_createXCookieStorage;
- (const struct XCredentialStorage *)_createXCredentialStorage;
- (void)_didSendMetrics;
- (void)_finishProgressReporting;
- (void)_getAuthenticationHeadersForResponse:(struct _CFURLResponse *)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (const struct __CFSet *)_getAuthenticatorStatusCodes;
- (id)_incompleteCurrentTaskTransactionMetrics;
- (id)_incompleteTaskMetrics;
- (BOOL)_needSendingMetrics;
- (void)_onSessionQueue_cleanupAndBreakCycles;
- (void)_onqueue_adjustBytesPerSecondLimit:(long long)arg1;
- (void)_onqueue_adjustPriorityHint:(float)arg1 incremental:(BOOL)arg2;
- (void)_onqueue_adoptEffectiveConfiguration:(id)arg1;
- (void)_onqueue_expectedProgressTargetChanged;
- (void)_onqueue_releasePowerAsssertion;
- (void)_releasePreventIdleSleepAssertionIfAppropriate;
- (void)_setConnectionCacheKey:(struct HTTPConnectionCacheKey *)arg1;
- (void)_setExplicitCookieStorage:(struct OpaqueCFHTTPCookieStorage *)arg1;
- (void)_setExplicitStorageSession:(struct __CFURLStorageSession *)arg1;
- (void)_setSocketProperties:(struct __CFDictionary *)arg1 connectionProperties:(struct __CFDictionary *)arg2;
- (void)_takePreventIdleSleepAssertionIfAppropriate;
- (id)_timingData;
- (void)_withXURLCache:(CDUnknownBlockType)arg1;
- (void)cancel;
- (long long)computeAdjustedPoolPriority;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)getUnderlyingHTTPConnectionInfoWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)init;
- (id)initWithOriginalRequest:(id)arg1 ident:(unsigned long long)arg2 taskGroup:(id)arg3;
- (id)initWithTask:(id)arg1;
- (id)initWithTaskGroup:(id)arg1;
- (void)initializeHTTPAuthenticatorWithAppleIDContext:(id)arg1 statusCodes:(id)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)resume;
- (void)set_TLSNegotiatedCipherSuite:(unsigned short)arg1;
- (void)set_resolvedCNAMEChain:(id)arg1;
- (BOOL)shouldHandleCookiesAndSchemeIsAppropriate;
- (void)suspend;
- (void)updateCurrentRequest:(id)arg1;

@end

