//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <CoreBluetooth/CBActivatable-Protocol.h>
#import <CoreBluetooth/CBLabelable-Protocol.h>
#import <CoreBluetooth/CBStateReporting-Protocol.h>
#import <CoreBluetooth/CUXPCCodable-Protocol.h>

@class NSString;
@protocol OS_dispatch_queue, OS_xpc_object;

@interface CBController : NSObject <CUXPCCodable, CBActivatable, CBLabelable, CBStateReporting>
{
    BOOL _activateAssertionCalled;
    BOOL _activateCalled;
    CDUnknownBlockType _activateCompletion;
    BOOL _changesPending;
    BOOL _direct;
    BOOL _invalidateCalled;
    BOOL _invalidateDone;
    struct LogCategory *_ucat;
    NSObject<OS_xpc_object> *_xpcCnx;
    int _discoverableState;
    int _inquiryState;
    unsigned int _assertionFlags;
    unsigned int _clientID;
    unsigned int _internalFlags;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    CDUnknownBlockType _invalidationHandler;
    NSString *_label;
    long long _bluetoothState;
    CDUnknownBlockType _bluetoothStateChangedHandler;
    CDUnknownBlockType _discoverableStateChangedHandler;
    CDUnknownBlockType _errorHandler;
    CDUnknownBlockType _inquiryStateChangedHandler;
    CDUnknownBlockType _interruptionHandler;
    NSObject<OS_xpc_object> *_testListenerEndpoint;
}

@property (nonatomic) unsigned int assertionFlags; // @synthesize assertionFlags=_assertionFlags;
@property (readonly, nonatomic) long long bluetoothState; // @synthesize bluetoothState=_bluetoothState;
@property (copy, nonatomic) CDUnknownBlockType bluetoothStateChangedHandler; // @synthesize bluetoothStateChangedHandler=_bluetoothStateChangedHandler;
@property (nonatomic) unsigned int clientID; // @synthesize clientID=_clientID;
@property (readonly, nonatomic) int discoverableState; // @synthesize discoverableState=_discoverableState;
@property (copy, nonatomic) CDUnknownBlockType discoverableStateChangedHandler; // @synthesize discoverableStateChangedHandler=_discoverableStateChangedHandler;
@property (strong, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue; // @synthesize dispatchQueue=_dispatchQueue;
@property (copy, nonatomic) CDUnknownBlockType errorHandler; // @synthesize errorHandler=_errorHandler;
@property (readonly, nonatomic) int inquiryState; // @synthesize inquiryState=_inquiryState;
@property (copy, nonatomic) CDUnknownBlockType inquiryStateChangedHandler; // @synthesize inquiryStateChangedHandler=_inquiryStateChangedHandler;
@property (nonatomic) unsigned int internalFlags; // @synthesize internalFlags=_internalFlags;
@property (copy, nonatomic) CDUnknownBlockType interruptionHandler; // @synthesize interruptionHandler=_interruptionHandler;
@property (copy, nonatomic) CDUnknownBlockType invalidationHandler; // @synthesize invalidationHandler=_invalidationHandler;
@property (copy, nonatomic) NSString *label; // @synthesize label=_label;
@property (strong, nonatomic) NSObject<OS_xpc_object> *testListenerEndpoint; // @synthesize testListenerEndpoint=_testListenerEndpoint;

- (void).cxx_destruct;
- (void)_activate;
- (void)_activateAssertionWithFlagsDirect:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_activateAssertionWithFlagsXPC:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_activateDirectStart;
- (void)_activateXPCCompleted:(id)arg1;
- (void)_activateXPCStart:(BOOL)arg1;
- (id)_ensureXPCStarted;
- (void)_interrupted;
- (void)_invalidateDirect;
- (void)_invalidated;
- (void)_update;
- (void)_updateIfNeededWithBlock:(CDUnknownBlockType)arg1;
- (void)_xpcReceivedDiscoverableStateChanged:(id)arg1;
- (void)_xpcReceivedEvent:(id)arg1;
- (void)_xpcReceivedInquiryStateChanged:(id)arg1;
- (void)_xpcReceivedMessage:(id)arg1;
- (void)_xpcReceivedPowerStateChanged:(id)arg1;
- (void)activateAssertionWithFlags:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;
- (void)activateWithCompletion:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)description;
- (id)descriptionWithLevel:(int)arg1;
- (void)diagnosticControl:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)diagnosticLog:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)diagnosticShow:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)encodeWithXPCObject:(id)arg1;
- (void)getPowerStateWithCompletion:(CDUnknownBlockType)arg1;
- (id)init;
- (id)initWithXPCObject:(id)arg1 error:(id *)arg2;
- (void)invalidate;
- (void)setPowerState:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)updateIdentities:(id)arg1 completion:(CDUnknownBlockType)arg2;

@end

