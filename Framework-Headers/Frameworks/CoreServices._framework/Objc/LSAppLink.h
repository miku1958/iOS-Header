//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <CoreServices/NSSecureCoding-Protocol.h>

@class LSApplicationProxy, LSApplicationRecord, NSDictionary, NSURL, _LSValidationToken;

@interface LSAppLink : NSObject <NSSecureCoding>
{
    NSURL *_URL;
    LSApplicationProxy *_targetApplicationProxy;
    LSApplicationRecord *_targetApplicationRecord;
    _LSValidationToken *__validationToken;
}

@property (copy) NSURL *URL; // @synthesize URL=_URL;
@property (strong) _LSValidationToken *_validationToken; // @synthesize _validationToken=__validationToken;
@property (strong, nonatomic) NSDictionary *browserSettings;
@property (nonatomic, getter=isEnabled) BOOL enabled; // @dynamic enabled;
@property long long openStrategy; // @dynamic openStrategy;
@property (readonly) LSApplicationProxy *targetApplicationProxy; // @synthesize targetApplicationProxy=_targetApplicationProxy;
@property (strong) LSApplicationRecord *targetApplicationRecord; // @synthesize targetApplicationRecord=_targetApplicationRecord;

+ (BOOL)URLComponentsAreValidForAppLinks:(id)arg1 error:(id *)arg2;
+ (BOOL)_URLIsValidForAppLinks:(id)arg1 error:(id *)arg2;
+ (id)_appLinkWithURL:(id)arg1 applicationRecord:(id)arg2 plugInClass:(Class)arg3;
+ (id)_appLinksWithState:(id)arg1 context:(struct LSContext *)arg2 limit:(unsigned long long)arg3 URLComponents:(id)arg4 error:(id *)arg5;
+ (id)_appLinksWithState:(id)arg1 context:(struct LSContext *)arg2 limit:(unsigned long long)arg3 requireEntitlement:(BOOL)arg4 error:(id *)arg5;
+ (id)_appLinksWithState:(id)arg1 limit:(unsigned long long)arg2 requireEntitlement:(BOOL)arg3 error:(id *)arg4;
+ (id)_dispatchQueue;
+ (void)_openAppLink:(id)arg1 state:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (void)_openWithAppLink:(id)arg1 state:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (id)appLinksWithURL:(id)arg1 limit:(unsigned long long)arg2 error:(id *)arg3;
+ (BOOL)areEnabledByDefault;
+ (void)getAppLinkWithURL:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)getAppLinksWithURL:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)openWithURL:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)openWithURL:(id)arg1 configuration:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (BOOL)removeAllSettingsReturningError:(id *)arg1;
+ (BOOL)setSettingsSwitchState:(long long)arg1 forApplicationIdentifier:(id)arg2 error:(id *)arg3;
+ (long long)settingsSwitchStateForApplicationIdentifier:(id)arg1;
+ (BOOL)supportsSecureCoding;
- (void).cxx_destruct;
- (id)_userActivityWithState:(id)arg1 error:(id *)arg2;
- (BOOL)_validateReturningError:(id *)arg1;
- (id)_validationTokenPayload;
- (id)debugDescription;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (void)openInWebBrowser:(BOOL)arg1 setAppropriateOpenStrategyAndWebBrowserState:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)openInWebBrowser:(BOOL)arg1 setOpenStrategy:(long long)arg2 webBrowserState:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)openInWebBrowser:(BOOL)arg1 setOpenStrategy:(long long)arg2 webBrowserState:(id)arg3 configuration:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)openWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)openWithConfiguration:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (BOOL)removeSettingsReturningError:(id *)arg1;
- (BOOL)setBrowserSettings:(id)arg1 error:(id *)arg2;
- (BOOL)setEnabled:(BOOL)arg1 error:(id *)arg2;

@end

