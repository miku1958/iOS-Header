//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

@class NSError, NSString, _LSDatabase;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BindingEvaluator {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    struct LSVersionNumber _field7;
    id _field8;
    BOOL _field9;
    unsigned long long _field10;
    unsigned int _field11;
    unsigned int _field12;
    struct vector<LSBundleClass, std::__1::allocator<LSBundleClass>> _field13;
    CDUnknownBlockType _field14;
    id _field15;
    CDUnknownBlockType _field16;
    id _field17;
};

struct CSMap {
    unsigned int table;
    struct CSMapCallbacks cb;
    struct CSMapContext *context;
    struct os_unfair_lock_s _lock;
    unsigned int _generation;
    struct _CSMapHeader *_header;
    unsigned int *_keys;
    unsigned int *_values;
};

struct CSMapCallbacks {
    CDUnknownFunctionPointerType retainKey;
    CDUnknownFunctionPointerType releaseKey;
    CDUnknownFunctionPointerType getKeyHash;
    CDUnknownFunctionPointerType keyMatchesData;
    CDUnknownFunctionPointerType retainValue;
    CDUnknownFunctionPointerType releaseValue;
};

struct CSMapContext;

struct Context {
    struct LSContext *_contextPointer;
    struct LSContext _contextStorage;
    BOOL _created;
    NSError *_error;
};

struct ExtendedBinding;

struct FileInfo {
    unsigned int _field1;
    unsigned int _field2;
    unsigned short _field3;
    struct Point _field4;
    unsigned short _field5;
};

struct Flags {
    unsigned int :1;
    unsigned int :1;
};

struct FolderInfo {
    struct Rect _field1;
    unsigned short _field2;
    struct Point _field3;
    unsigned short _field4;
};

struct LSAppClipFields {
    unsigned int parentAppIDs;
};

struct LSBinding {
    unsigned int bundle;
    struct LSBundleData *bundleData;
    unsigned int claim;
    CDStruct_183601bc *claimData;
    id userInfo;
    NSString *reason;
};

struct LSBundleBaseData {
    unsigned int bookmark;
    unsigned int container;
    unsigned int execPath;
    unsigned int exactIdentifier;
    unsigned int platform;
    int registrationTime;
    struct LSVersionNumber version;
    struct LSVersionNumber execSDKVersion;
    unsigned int machOUUIDs;
    unsigned int dataContainerAlias;
    unsigned int bundleName;
    unsigned int localizedShortDisplayName;
    unsigned int displayName;
    unsigned int localizedDisplayName;
    unsigned int localizedMicrophoneUsageDescription;
    unsigned int codeInfoIdentifier;
    unsigned int signerOrganization;
    unsigned int infoDictionary;
    unsigned int entitlements;
    unsigned int groupContainers;
    unsigned char containingDirectoryClass;
    unsigned char profileValidationState;
    unsigned int intentDefinitionURLs;
    unsigned short _archFlags;
};

struct LSBundleData {
    struct LSBundleBaseData base;
    unsigned int _clas;
    unsigned long long _bundleFlags;
    unsigned int _plistContentFlags;
    unsigned int _itemFlags;
    unsigned char _iconFlags;
    struct LSBundleMoreFlags moreFlags;
    unsigned int _hfsType;
    int _mtime;
    struct LSVersionNumber _minSystemVersion;
    struct LSVersionNumber _maxSystemVersion;
    unsigned int appStoreToolsBuildVersion;
    unsigned long long sequenceNumber;
    unsigned long long compatibilityState;
    unsigned long long itemID;
    unsigned int deviceFamilies;
    unsigned int teamID;
    unsigned int identifier;
    unsigned int counterpartIdentifiers;
    unsigned int filename;
    unsigned int bundleVersion;
    unsigned int shortVersionString;
    unsigned int installType;
    unsigned long long installFailureReason;
    unsigned int vendorName;
    unsigned int signerIdentity;
    unsigned int appType;
    unsigned long long staticDiskUsage;
    unsigned long long purchaserDSID;
    unsigned long long downloaderDSID;
    unsigned long long familyID;
    unsigned int itemName;
    unsigned long long storefront;
    unsigned long long versionIdentifier;
    unsigned int sourceAppBundleID;
    unsigned int appVariant;
    unsigned long long ratingRank;
    unsigned int ratingLabel;
    unsigned long long genreID;
    unsigned int genre;
    unsigned int primaryIconName;
    unsigned int iconsDict;
    unsigned int iconFileNames;
    unsigned int libraryPath;
    unsigned int libraryItems;
    unsigned int claims;
    unsigned int types;
    unsigned int plugins;
    unsigned int extensionPoints;
    unsigned int activityTypes;
    unsigned int schemesWhitelist;
    unsigned int bgPermittedIDs;
    unsigned int carPlayInstrumentClusterURLSchemes;
    unsigned int appContainerAlias;
    unsigned char revision;
    unsigned char retries;
    unsigned char _reserved4;
    unsigned int sandboxEnvironmentVariables;
    unsigned int localizedNameWithContext[1];
    unsigned int managedPersonas;
    struct LSAppClipFields appClipFields;
    int recordModificationTime;
    unsigned int supportedGameControllers;
    unsigned int mobileInstallIDs;
    unsigned int signatureVersion;
    unsigned int _reserved5;
};

struct LSBundleMoreFlags {
    unsigned int isWebBrowser:1;
    unsigned int isMailClient:1;
    unsigned int supportsControllerUserInteraction:1;
    unsigned int supportsSpotlightQueryContinuation:1;
    unsigned int isCodeSigningInfoNotAuthoritative:1;
    unsigned int _reserved:1;
};

struct LSContext {
    _LSDatabase *db;
};

struct LSExtensionPointData {
    int _field1;
    unsigned int _field2;
    struct LSVersionNumber _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
};

struct LSPersistentIdentifierData {
    unsigned char _field1;
    unsigned char _field2[3];
    unsigned int _field3;
    unsigned int _field4;
    unsigned char _field5[16];
    char _field6[0];
};

struct LSPluginData {
    struct LSBundleBaseData _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    struct LSVersionNumber _field7;
    unsigned int _field8;
    unsigned int _field9;
};

struct LSSchema {
    unsigned int headerTable;
    unsigned int bundleTable;
    unsigned int claimTable;
    unsigned int serviceTable;
    unsigned int utypeTable;
    struct {
        struct CSMap map;
    } bindableKeyMap;
    struct {
        struct CSMap map;
        unsigned int bindingClass;
        unsigned char isCaseInsensitive;
    } bindingMaps[12];
    unsigned int handlerPrefTable;
    unsigned int containerTable;
    unsigned int aliasTable;
    unsigned int pluginTable;
    unsigned int extensionPointTable;
    unsigned int bindingListTable;
    unsigned int propertyListTable;
    unsigned int localizedStringTable;
    unsigned int canonicalStringTable;
    struct _LSSchemaCache *_cache;
};

struct LSVersionNumber {
    unsigned char _opaque[32];
};

struct LocalizedString {
    unsigned int _field1;
    unsigned int _field2;
    struct Flags _field3;
};

struct NotifyToken {
    struct atomic<int> rawValue;
};

struct Point {
    short _field1;
    short _field2;
};

struct Rect {
    short _field1;
    short _field2;
    short _field3;
    short _field4;
};

struct _CSMapHeader;

struct _LSSchemaCache;

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> *_field1;
};

struct atomic<int> {
    struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int>> {
        _Atomic int __a_value;
    } __a_;
};

struct atomic_flag {
    struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool>> {
        _Atomic BOOL __a_value;
    } __a_;
};

struct optional<LSBinding> {
    union {
        char _field1;
        struct LSBinding _field2;
    } _field1;
    BOOL _field2;
};

struct optional<LaunchServices::BindingEvaluator> {
    union {
        char _field1;
        struct BindingEvaluator _field2;
    } _field1;
    BOOL _field2;
};

struct optional<bool> {
    union {
        char _field1;
        BOOL _field2;
    } _field1;
    BOOL _field2;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct pair<SEL *, void (*)(id, SEL *)>;

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_map<SEL *, id, std::__1::hash<SEL *>, std::__1::equal_to<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, id>>> {
    struct __hash_table<std::__1::__hash_value_type<SEL *, id>, std::__1::__unordered_map_hasher<SEL *, std::__1::__hash_value_type<SEL *, id>, std::__1::hash<SEL *>, true>, std::__1::__unordered_map_equal<SEL *, std::__1::__hash_value_type<SEL *, id>, std::__1::equal_to<SEL *>, true>, std::__1::allocator<std::__1::__hash_value_type<SEL *, id>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SEL *, id>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<SEL *, std::__1::__hash_value_type<SEL *, id>, std::__1::hash<SEL *>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<SEL *, std::__1::__hash_value_type<SEL *, id>, std::__1::equal_to<SEL *>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __hash_table<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<std::__1::basic_string<char>>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<std::__1::basic_string<char>>> {
            float _field1;
        } _field4;
    } _field1;
};

struct vector<LSBundleClass, std::__1::allocator<LSBundleClass>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<LSBundleClass *, std::__1::allocator<LSBundleClass>> {
        unsigned int *_field1;
    } _field3;
};

struct vector<LaunchServices::BindingEvaluation::ExtendedBinding, std::__1::allocator<LaunchServices::BindingEvaluation::ExtendedBinding>> {
    struct ExtendedBinding *_field1;
    struct ExtendedBinding *_field2;
    struct __compressed_pair<LaunchServices::BindingEvaluation::ExtendedBinding *, std::__1::allocator<LaunchServices::BindingEvaluation::ExtendedBinding>> {
        struct ExtendedBinding *_field1;
    } _field3;
};

struct vector<std::__1::pair<SEL *, void (*)(id, SEL *)>, std::__1::allocator<std::__1::pair<SEL *, void (*)(id, SEL *)>>> {
    struct pair<SEL *, void (*)(id, SEL *)> *_field1;
    struct pair<SEL *, void (*)(id, SEL *)> *_field2;
    struct __compressed_pair<std::__1::pair<SEL *, void (*)(id, SEL *)>*, std::__1::allocator<std::__1::pair<SEL *, void (*)(id, SEL *)>>> {
        struct pair<SEL *, void (*)(id, SEL *)> *_field1;
    } _field3;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *__begin_;
    unsigned int *__end_;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *__value_;
    } __end_cap_;
};

#if 0
// Names with conflicting types:
typedef struct {
    id _field1;
    BOOL _field2;
    BOOL _field3;
    BOOL _field4;
    BOOL _field5;
    BOOL _field6;
} State_54569a5c;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8[8];
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned int _field14;
    unsigned int _field15;
    unsigned int _field16;
} CDStruct_3571af81;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    short _field4;
    unsigned short _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9[8];
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
} CDStruct_25b44cd7;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    unsigned int val[8];
} CDStruct_4c969caf;

typedef struct CDStruct_183601bc;

// Template types
typedef struct optional<LSBinding> {
    union {
        char _field1;
        struct LSBinding _field2;
    } _field1;
    BOOL _field2;
} optional_430a8fae;

typedef struct optional<LaunchServices::BindingEvaluator> {
    union {
        char _field1;
        struct BindingEvaluator _field2;
    } _field1;
    BOOL _field2;
} optional_4acbcc83;

typedef struct unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __hash_table<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<std::__1::basic_string<char>>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<std::__1::basic_string<char>>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_set_7cdfe647;

typedef struct vector<std::__1::pair<SEL *, void (*)(id, SEL *)>, std::__1::allocator<std::__1::pair<SEL *, void (*)(id, SEL *)>>> {
    struct pair<SEL *, void (*)(id, SEL *)> *_field1;
    struct pair<SEL *, void (*)(id, SEL *)> *_field2;
    struct __compressed_pair<std::__1::pair<SEL *, void (*)(id, SEL *)>*, std::__1::allocator<std::__1::pair<SEL *, void (*)(id, SEL *)>>> {
        struct pair<SEL *, void (*)(id, SEL *)> *_field1;
    } _field3;
} vector_a8c3fa3f;

typedef struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *__begin_;
    unsigned int *__end_;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *__value_;
    } __end_cap_;
} vector_12da65de;

#pragma mark Typedef'd Unions

typedef union {
    unsigned char _field1[32];
    struct {
        struct FileInfo _field1;
        unsigned char _field2[16];
    } _field2;
    struct {
        struct FolderInfo _field1;
        unsigned char _field2[16];
    } _field3;
} CDUnion_739f5cf2;

