//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <ReplayKit/RPPreviewViewControllerDelegate-Protocol.h>
#import <ReplayKit/UINavigationControllerDelegate-Protocol.h>
#import <ReplayKit/UIPopoverPresentationControllerDelegate-Protocol.h>

@class NSString;
@protocol RPScreenRecorderDelegate;

@interface RPScreenRecorder : NSObject <RPPreviewViewControllerDelegate, UINavigationControllerDelegate, UIPopoverPresentationControllerDelegate>
{
    BOOL _recording;
    BOOL _microphoneEnabled;
    BOOL _available;
    id<RPScreenRecorderDelegate> _delegate;
    unsigned long long _previousAudioSessionOptions;
    NSString *_previousAudioCategory;
}

@property (nonatomic, getter=isAvailable) BOOL available; // @synthesize available=_available;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) id<RPScreenRecorderDelegate> delegate; // @synthesize delegate=_delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, getter=isMicrophoneEnabled) BOOL microphoneEnabled; // @synthesize microphoneEnabled=_microphoneEnabled;
@property (strong, nonatomic) NSString *previousAudioCategory; // @synthesize previousAudioCategory=_previousAudioCategory;
@property (nonatomic) unsigned long long previousAudioSessionOptions; // @synthesize previousAudioSessionOptions=_previousAudioSessionOptions;
@property (nonatomic, getter=isRecording) BOOL recording; // @synthesize recording=_recording;
@property (readonly) Class superclass;

+ (id)sharedRecorder;
- (void).cxx_destruct;
- (id)applicationWindow;
- (void)clientDidBecomeActive;
- (void)clientWillResignActive;
- (void)configureAudioSession;
- (unsigned int)currentWindowLayerContextID;
- (struct CGSize)currentWindowSize;
- (void)dealloc;
- (void)discardRecordingWithHandler:(CDUnknownBlockType)arg1;
- (BOOL)isScreenRecordingSupportedOnDevice;
- (void)notifyDelegateOfRecorderAvailability;
- (void)restoreAudioSession;
- (void)setWindowRotationLocked:(BOOL)arg1;
- (void)startRecordingWithMicrophoneEnabled:(BOOL)arg1 handler:(CDUnknownBlockType)arg2;
- (void)stopRecordingWithError:(id)arg1 movieURL:(id)arg2;
- (void)stopRecordingWithHandler:(CDUnknownBlockType)arg1;
- (void)updateRecordingAvailability;

@end

