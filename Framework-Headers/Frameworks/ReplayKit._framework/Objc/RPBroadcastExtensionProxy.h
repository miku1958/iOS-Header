//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <ReplayKit/NSXPCListenerDelegate-Protocol.h>
#import <ReplayKit/RPBroadcastDaemonProtocol-Protocol.h>
#import <ReplayKit/RPBroadcastExtensionProtocol-Protocol.h>

@class NSExtension, NSString, NSXPCConnection, NSXPCListener, NSXPCListenerEndpoint;

@interface RPBroadcastExtensionProxy : NSObject <NSXPCListenerDelegate, RPBroadcastExtensionProtocol, RPBroadcastDaemonProtocol>
{
    CDUnknownBlockType _serviceInfoHandler;
    CDUnknownBlockType _broadcastURLHandler;
    CDUnknownBlockType _errorHandler;
    NSXPCListener *_listener;
    NSExtension *_broadcastUploadExtension;
    NSXPCConnection *_connection;
    CDUnknownBlockType _connectionReadyHandler;
    NSXPCListenerEndpoint *_listenerEndpoint;
}

@property (copy, nonatomic) CDUnknownBlockType broadcastURLHandler; // @synthesize broadcastURLHandler=_broadcastURLHandler;
@property (strong, nonatomic) NSExtension *broadcastUploadExtension; // @synthesize broadcastUploadExtension=_broadcastUploadExtension;
@property (strong, nonatomic) NSXPCConnection *connection; // @synthesize connection=_connection;
@property (copy, nonatomic) CDUnknownBlockType connectionReadyHandler; // @synthesize connectionReadyHandler=_connectionReadyHandler;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (copy, nonatomic) CDUnknownBlockType errorHandler; // @synthesize errorHandler=_errorHandler;
@property (readonly) unsigned long long hash;
@property (strong, nonatomic) NSXPCListener *listener; // @synthesize listener=_listener;
@property (strong, nonatomic) NSXPCListenerEndpoint *listenerEndpoint; // @synthesize listenerEndpoint=_listenerEndpoint;
@property (copy, nonatomic) CDUnknownBlockType serviceInfoHandler; // @synthesize serviceInfoHandler=_serviceInfoHandler;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)establishConnectionWithHandler:(CDUnknownBlockType)arg1;
- (void)finishBroadcastWithError:(id)arg1;
- (id)initWithBroadcastUploadExtension:(id)arg1;
- (id)initWithBroadcastUploadListenerEndpoint:(id)arg1;
- (void)invalidateConnection;
- (BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)ping;
- (void)processPayload:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setupNewConnection:(id)arg1;
- (void)updateBroadcastURL:(id)arg1;
- (void)updateServiceInfo:(id)arg1;

@end

