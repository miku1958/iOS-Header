//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGFont;

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct GlyphStack {
    long long _field1;
    long long _field2;
    struct GlyphStackEntry _field3[1];
};

struct GlyphStackEntry {
    unsigned short _field1;
    struct CGSize _field2;
    unsigned int _field3;
    long long _field4;
    long long _field5;
    struct CGPoint _field6;
};

struct StrikeMetrics {
    double _field1;
    double _field2;
    double _field3;
    unsigned int _field4;
    struct CGPoint _field5;
    struct CGRect _field6;
    BOOL _field7;
};

struct TBMPDataCache;

struct TBaseFont {
    CDUnknownFunctionPointerType *_field1;
    struct atomic<int> _field2;
    struct TCFRef<const __CFData *> _field3;
    struct TCFRef<const __CFData *> _field4;
    struct TCFRef<const __CFData *> _field5;
    struct TCFRef<const __CFData *> _field6;
    struct TCFRef<const __CFData *> _field7;
    struct TCFRef<const __CFData *> _field8;
    struct TCFRef<const __CFData *> _field9;
    struct TCFRef<const __CFData *> _field10;
    struct TCFRef<const __CFData *> _field11;
    struct TCFRef<const __CFURL *> _field12;
    struct TCFRef<CGFont *> _field13;
    struct TUnfairLock _field14;
    struct TCFRef<__CFDictionary *> _field15;
    struct TCFRef<const __CFArray *> _field16[2];
    struct TCFRef<const __CFCharacterSet *> _field17[2];
    struct atomic<unsigned int> _field18;
    struct atomic<unsigned int> _field19;
    struct atomic<unsigned int> _field20;
    unsigned int _field21;
    struct TCFRef<const __CFCharacterSet *> _field22;
    struct atomic<long> _field23;
    struct atomic<const TBMPDataCache *> _field24;
    struct atomic<const std::__1::unordered_map<unsigned short, unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, unsigned short>>>*> _field25;
    struct atomic<unsigned short> _field26;
    struct TUnfairLock _field27;
    struct pair<const unsigned short *, const unsigned short *> _field28;
    struct atomic<TTraitsValues *> _field29;
    struct StrikeMetrics _field30;
    struct atomic<unsigned int> _field31;
    struct atomic<unsigned int> _field32;
    struct atomic<CTFontFormat> _field33;
    struct TUnfairLock _field34;
    struct array<std::__1::unordered_map<unsigned int, OTL::Lookup, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, OTL::Lookup>>>, 2> _field35;
    struct atomic<unsigned short> _field36;
    struct TUnfairLock _field37;
    struct TInlineVector<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>, 1> _field38;
    struct TInlineVector<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>, 4> _field39;
    struct array<TCFRef<__CFDictionary *>, 7> _field40;
};

struct TCFRef<CGFont *> {
    struct atomic<CGFont *> _field1;
};

struct TCFRef<__CFDictionary *> {
    struct atomic<__CFDictionary *> _field1;
};

struct TCFRef<const __CFArray *> {
    struct atomic<const __CFArray *> fRef;
};

struct TCFRef<const __CFCharacterSet *> {
    struct atomic<const __CFCharacterSet *> _field1;
};

struct TCFRef<const __CFData *> {
    struct atomic<const __CFData *> _field1;
};

struct TCFRef<const __CFSet *> {
    struct atomic<const __CFSet *> fRef;
};

struct TCFRef<const __CFURL *> {
    struct atomic<const __CFURL *> _field1;
};

struct TInlineBufferAllocator<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>, 1> {
    struct type _field1;
    struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>> *_field2;
};

struct TInlineBufferAllocator<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>, 4> {
    struct type _field1;
    struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>> *_field2;
};

struct TInlineVector<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>, 1> {
    struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>> *_field1;
    struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>*, TInlineBufferAllocator<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>, 1>> {
        struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>> *_field1;
        struct TInlineBufferAllocator<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>, 1> _field2;
    } _field3;
};

struct TInlineVector<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>, 4> {
    struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>> *_field1;
    struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>*, TInlineBufferAllocator<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>, 4>> {
        struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>> *_field1;
        struct TInlineBufferAllocator<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>, 4> _field2;
    } _field3;
};

struct TTraitsValues {
    unsigned int _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct TUnfairLock {
    struct os_unfair_lock_s fLock;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*> *_field1;
};

struct array<TCFRef<__CFDictionary *>, 7> {
    struct TCFRef<__CFDictionary *> _field1[7];
};

struct array<std::__1::unordered_map<unsigned int, OTL::Lookup, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, OTL::Lookup>>>, 2> {
    struct unordered_map<unsigned int, OTL::Lookup, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, OTL::Lookup>>> _field1[2];
};

struct atomic<CGFont *> {
    struct __cxx_atomic_impl<CGFont *, std::__1::__cxx_atomic_base_impl<CGFont *>> {
        _Atomic struct CGFont *_field1;
    } _field1;
};

struct atomic<CTFontFormat> {
    struct __cxx_atomic_impl<CTFontFormat, std::__1::__cxx_atomic_base_impl<CTFontFormat>> {
        _Atomic unsigned int _field1;
    } _field1;
};

struct atomic<TTraitsValues *> {
    struct __cxx_atomic_impl<TTraitsValues *, std::__1::__cxx_atomic_base_impl<TTraitsValues *>> {
        _Atomic struct TTraitsValues *_field1;
    } _field1;
};

struct atomic<__CFDictionary *> {
    struct __cxx_atomic_impl<__CFDictionary *, std::__1::__cxx_atomic_base_impl<__CFDictionary *>> {
        _Atomic struct __CFDictionary *_field1;
    } _field1;
};

struct atomic<const TBMPDataCache *> {
    struct __cxx_atomic_impl<const TBMPDataCache *, std::__1::__cxx_atomic_base_impl<const TBMPDataCache *>> {
        _Atomic struct TBMPDataCache *_field1;
    } _field1;
};

struct atomic<const __CFArray *> {
    struct __cxx_atomic_impl<const __CFArray *, std::__1::__cxx_atomic_base_impl<const __CFArray *>> {
        _Atomic struct __CFArray *__a_value;
    } __a_;
};

struct atomic<const __CFCharacterSet *> {
    struct __cxx_atomic_impl<const __CFCharacterSet *, std::__1::__cxx_atomic_base_impl<const __CFCharacterSet *>> {
        _Atomic struct __CFCharacterSet *_field1;
    } _field1;
};

struct atomic<const __CFData *> {
    struct __cxx_atomic_impl<const __CFData *, std::__1::__cxx_atomic_base_impl<const __CFData *>> {
        _Atomic struct __CFData *_field1;
    } _field1;
};

struct atomic<const __CFSet *> {
    struct __cxx_atomic_impl<const __CFSet *, std::__1::__cxx_atomic_base_impl<const __CFSet *>> {
        _Atomic struct __CFSet *__a_value;
    } __a_;
};

struct atomic<const __CFURL *> {
    struct __cxx_atomic_impl<const __CFURL *, std::__1::__cxx_atomic_base_impl<const __CFURL *>> {
        _Atomic struct __CFURL *_field1;
    } _field1;
};

struct atomic<const std::__1::unordered_map<unsigned short, unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, unsigned short>>>*> {
    struct __cxx_atomic_impl<const std::__1::unordered_map<unsigned short, unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, unsigned short>>>*, std::__1::__cxx_atomic_base_impl<const std::__1::unordered_map<unsigned short, unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, unsigned short>>>*>> {
        _Atomic struct unordered_map<unsigned short, unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, unsigned short>>> *_field1;
    } _field1;
};

struct atomic<int> {
    struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int>> {
        _Atomic int _field1;
    } _field1;
};

struct atomic<long> {
    struct __cxx_atomic_impl<long, std::__1::__cxx_atomic_base_impl<long>> {
        _Atomic long long _field1;
    } _field1;
};

struct atomic<unsigned int> {
    struct __cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int>> {
        _Atomic unsigned int _field1;
    } _field1;
};

struct atomic<unsigned short> {
    struct __cxx_atomic_impl<unsigned short, std::__1::__cxx_atomic_base_impl<unsigned short>> {
        _Atomic unsigned short _field1;
    } _field1;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct pair<const unsigned short *, const unsigned short *> {
    unsigned short *_field1;
    unsigned short *_field2;
};

struct type {
    unsigned char __lx[16];
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]>>;

struct unordered_map<unsigned int, OTL::Lookup, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, OTL::Lookup>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, OTL::Lookup>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, OTL::Lookup>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, OTL::Lookup>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, OTL::Lookup>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, OTL::Lookup>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned short, unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, unsigned short>>>;

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

