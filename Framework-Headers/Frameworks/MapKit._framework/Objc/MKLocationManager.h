//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <MapKit/GEOResourceManifestTileGroupObserver-Protocol.h>
#import <MapKit/MKLocationProviderDelegate-Protocol.h>

@class CLHeading, CLLocation, GEOLocation, GEOLocationShifter, NSBundle, NSError, NSHashTable, NSLock, NSMutableArray, NSString, NSTimer;
@protocol MKLocationProvider, MNLocationRecorder;

@interface MKLocationManager : NSObject <GEOResourceManifestTileGroupObserver, MKLocationProviderDelegate>
{
    id<MKLocationProvider> _locationProvider;
    NSHashTable *_locationObservers;
    NSHashTable *_locationListeners;
    NSHashTable *_headingObservers;
    CLLocation *_lastLocation;
    CLLocation *_lastGoodLocation;
    double _lastLocationUpdateTime;
    BOOL _isLastLocationStale;
    BOOL _lastLocationPushed;
    BOOL _trackingLocation;
    BOOL _trackingHeading;
    id<MNLocationRecorder> _locationRecorder;
    double _applicationResumeTime;
    double _applicationSuspendTime;
    double _headingUpdateTime;
    double _locationAccuracyUpdateTime;
    double _locationUpdateStartTime;
    BOOL _isReceivingAccurateLocations;
    NSMutableArray *_waitForAccurateLocationsHandlers;
    NSTimer *_waitForAccurateLocationsTimer;
    double _lastLocationReportTime;
    GEOLocationShifter *_locationShifter;
    CLHeading *_throttledHeading;
    CLHeading *_heading;
    NSTimer *_headingThrottlingTimer;
    CDUnknownBlockType _networkActivity;
    BOOL _enabled;
    BOOL _useCourseForHeading;
    double _lastVehicleHeading;
    double _lastVehicleSpeed;
    double _lastVehicleHeadingUpdateTime;
    double _lastVehicleSpeedUpdateTime;
    int _consecutiveOutOfCourseCount;
    double _navCourse;
    CDUnknownBlockType _locationCorrector;
    double _minimumLocationUpdateInterval;
    BOOL _allowOldLocations;
    BOOL _continuedAfterBecomingInactive;
    BOOL _suspended;
    NSMutableArray *_recentLocationUpdateIntervals;
    NSLock *_lastLocationLock;
    NSLock *_observersLock;
    BOOL _hasCustomDesiredAccuracy;
    BOOL _continuesWhileInactive;
    BOOL _logStartStopLocationUpdates;
    NSError *_locationError;
}

@property (nonatomic) long long activityType;
@property (nonatomic) BOOL allowOldLocations; // @synthesize allowOldLocations=_allowOldLocations;
@property (copy, nonatomic) CDUnknownBlockType authorizationRequestBlock;
@property (nonatomic) BOOL continuesWhileInactive; // @synthesize continuesWhileInactive=_continuesWhileInactive;
@property (readonly, nonatomic) GEOLocation *courseCorrectedLocation;
@property (readonly, nonatomic) GEOLocation *currentLocation;
@property (readonly, nonatomic) double currentVehicleHeading;
@property (readonly, nonatomic) double currentVehicleSpeed;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) double desiredAccuracy;
@property (nonatomic) double distanceFilter;
@property (strong, nonatomic) NSBundle *effectiveBundle;
@property (copy, nonatomic) NSString *effectiveBundleIdentifier;
@property (nonatomic, getter=isEnabled) BOOL enabled; // @synthesize enabled=_enabled;
@property (readonly, nonatomic) double expectedGpsUpdateInterval;
@property (readonly, nonatomic) GEOLocation *gridSnappedCurrentLocation;
@property (readonly, nonatomic) BOOL hasLocation;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) CLHeading *heading; // @synthesize heading=_heading;
@property (nonatomic) long long headingOrientation;
@property (readonly, nonatomic) double headingUpdateTimeInterval;
@property (readonly, nonatomic) BOOL isHeadingServicesAvailable;
@property (readonly, nonatomic) BOOL isLastLocationStale; // @synthesize isLastLocationStale=_isLastLocationStale;
@property (readonly, nonatomic) BOOL isLocationServicesApproved;
@property (readonly, nonatomic) BOOL isLocationServicesAvailable;
@property (readonly, nonatomic) BOOL isLocationServicesDenied;
@property (readonly, nonatomic) BOOL isLocationServicesEnabled;
@property (readonly, nonatomic) BOOL isLocationServicesPossiblyAvailable;
@property (readonly, nonatomic) BOOL isLocationServicesRestricted;
@property (readonly, nonatomic) CLLocation *lastGoodLocation; // @synthesize lastGoodLocation=_lastGoodLocation;
@property (readonly, nonatomic) CLLocation *lastLocation;
@property (readonly, nonatomic, getter=wasLastLocationPushed) BOOL lastLocationPushed; // @synthesize lastLocationPushed=_lastLocationPushed;
@property (readonly, nonatomic) int lastLocationSource;
@property (readonly, nonatomic) CLLocation *lastProviderLocation;
@property (copy, nonatomic) CDUnknownBlockType locationCorrector; // @synthesize locationCorrector=_locationCorrector;
@property (readonly, nonatomic) NSError *locationError; // @synthesize locationError=_locationError;
@property (strong, nonatomic) id<MKLocationProvider> locationProvider;
@property (strong, nonatomic) id<MNLocationRecorder> locationRecorder; // @synthesize locationRecorder=_locationRecorder;
@property (readonly, nonatomic, getter=isLocationServicesAuthorizationNeeded) BOOL locationServicesAuthorizationNeeded;
@property (nonatomic, getter=isLocationServicesPreferencesDialogEnabled) BOOL locationServicesPreferencesDialogEnabled;
@property (readonly, nonatomic) BOOL locationShiftEnabled;
@property (nonatomic) BOOL logStartStopLocationUpdates; // @synthesize logStartStopLocationUpdates=_logStartStopLocationUpdates;
@property (nonatomic) BOOL matchInfoEnabled;
@property (nonatomic) double minimumLocationUpdateInterval; // @synthesize minimumLocationUpdateInterval=_minimumLocationUpdateInterval;
@property (readonly, nonatomic) double navigationCourse; // @synthesize navigationCourse=_navCourse;
@property (copy, nonatomic) CDUnknownBlockType networkActivity; // @synthesize networkActivity=_networkActivity;
@property (readonly) Class superclass;
@property (strong, nonatomic) CLHeading *throttledHeading; // @synthesize throttledHeading=_throttledHeading;
@property (readonly, nonatomic) double timeScale;
@property (nonatomic) BOOL useCourseForHeading; // @synthesize useCourseForHeading=_useCourseForHeading;
@property (readonly, nonatomic) double vehicleHeadingOrCourse;

+ (void)setCanMonitorWiFiStatus:(BOOL)arg1;
+ (id)sharedLocationManager;
+ (id)timeoutError;
- (void).cxx_destruct;
- (BOOL)_isTimeToResetOnResume;
- (void)_locationProvider:(id)arg1 didUpdateLocation:(id)arg2 lastKnownNavCourse:(double)arg3;
- (void)_reportHeadingFailureWithError:(id)arg1;
- (void)_reportHeadingSuccess;
- (void)_reportLocationFailureWithError:(id)arg1;
- (void)_reportLocationReset;
- (void)_reportLocationStatus:(SEL)arg1;
- (void)_reportLocationSuccess;
- (void)_setIsReceivingAccurateLocations:(BOOL)arg1;
- (void)_setTrackingHeading:(BOOL)arg1;
- (void)_setTrackingLocation:(BOOL)arg1;
- (BOOL)_shouldAllowLocationUpdateInterval:(double)arg1;
- (void)_startLocationUpdateWithObserver:(id)arg1 desiredAccuracy:(double)arg2;
- (void)_suspend;
- (void)_syncLocationProviderWithTracking;
- (void)_useCoreLocationProvider;
- (void)_waitForAccurateLocationsTimerFired:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (void)dampenGPSLocationAccuracy:(id *)arg1 oldLocationSource:(int)arg2;
- (void)dealloc;
- (void)dismissHeadingCalibrationDisplay;
- (id)init;
- (BOOL)isLocationServicesPossiblyAvailable:(id *)arg1;
- (void)listenForLocationUpdates:(id)arg1;
- (void)locationProvider:(id)arg1 didReceiveError:(id)arg2;
- (void)locationProvider:(id)arg1 didUpdateHeading:(id)arg2;
- (void)locationProvider:(id)arg1 didUpdateLocation:(id)arg2;
- (void)locationProvider:(id)arg1 didUpdateLocation:(id)arg2 lastKnownNavCourse:(double)arg3;
- (void)locationProvider:(id)arg1 didUpdateVehicleHeading:(double)arg2 timestamp:(id)arg3;
- (void)locationProvider:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3;
- (void)locationProviderDidChangeAuthorizationStatus:(id)arg1;
- (void)locationProviderDidPauseLocationUpdates:(id)arg1;
- (void)locationProviderDidResumeLocationUpdates:(id)arg1;
- (BOOL)locationProviderShouldPauseLocationUpdates:(id)arg1;
- (id)observersDescription;
- (void)pushLocation:(id)arg1;
- (void)requestWhenInUseAuthorization;
- (void)requestWhenInUseAuthorizationWithPrompt;
- (void)reset;
- (void)resetAfterResumeIfNecessary;
- (void)resourceManifestManager:(id)arg1 didChangeActiveTileGroup:(id)arg2 fromOldTileGroup:(id)arg3;
- (void)setHeading:(id)arg1;
- (void)setLastLocation:(id)arg1;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)arg1 handler:(CDUnknownBlockType)arg2;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)arg1 handler:(CDUnknownBlockType)arg2 timeout:(double)arg3;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)arg1 handler:(CDUnknownBlockType)arg2 timeout:(double)arg3 maxLocationAge:(double)arg4;
- (id)singleLocationUpdateWithHandler:(CDUnknownBlockType)arg1;
- (void)startHeadingUpdateWithObserver:(id)arg1;
- (void)startLocationUpdateWithObserver:(id)arg1;
- (void)startVehicleHeadingUpdate;
- (void)startVehicleSpeedUpdate;
- (void)stopHeadingUpdateWithObserver:(id)arg1;
- (void)stopListeningForLocationUpdates:(id)arg1;
- (void)stopLocationUpdateWithObserver:(id)arg1;
- (void)stopVehicleHeadingUpdate;
- (void)stopVehicleSpeedUpdate;
- (void)waitForAccurateLocationWithTimeout:(double)arg1 handler:(CDUnknownBlockType)arg2;

@end

