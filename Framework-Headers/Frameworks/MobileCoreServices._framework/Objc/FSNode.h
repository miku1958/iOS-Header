//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <Foundation/NSObject.h>

#import <MobileCoreServices/NSCopying-Protocol.h>
#import <MobileCoreServices/NSSecureCoding-Protocol.h>

@class NSURL;

__attribute__((visibility("hidden")))
@interface FSNode : NSObject <NSCopying, NSSecureCoding>
{
    NSURL *_url;
    unsigned long long _cacheExpiration;
    unsigned int _isDirectory:2;
    unsigned int _hasReferringAliasNode:1;
    unsigned int _canUseFileCache:1;
    unsigned int _isInitialized:1;
}

@property (readonly, nonatomic) NSURL *URL;
@property (readonly, nonatomic, getter=isAliasFile) BOOL aliasFile;
@property (readonly, nonatomic, getter=isBusyDirectory) BOOL busyDirectory;
@property (readonly, nonatomic, getter=isDirectory) BOOL directory;
@property (readonly, nonatomic, getter=isExecutable) BOOL executable;
@property (readonly, nonatomic) BOOL hasHiddenExtension;
@property (readonly, nonatomic) BOOL hasPackageBit;
@property (readonly, nonatomic, getter=isHidden) BOOL hidden;
@property (readonly, getter=isMountTrigger) BOOL mountTrigger;
@property (readonly, getter=isOnDiskImage) BOOL onDiskImage;
@property (readonly, getter=isOnLocalVolume) BOOL onLocalVolume;
@property (copy, nonatomic) FSNode *referringAliasNode;
@property (readonly, nonatomic, getter=isRegularFile) BOOL regularFile;
@property (readonly, nonatomic, getter=isResolvable) BOOL resolvable;
@property (readonly, nonatomic, getter=isSymbolicLink) BOOL symbolicLink;
@property (readonly, getter=isVolume) BOOL volume;

+ (id)_resolvedNodeFromAliasFile:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;
+ (id)_resolvedURLFromAliasFile:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;
+ (BOOL)canAccessURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2 operation:(const char *)arg3;
+ (BOOL)canReadMetadataOfURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2;
+ (BOOL)canReadURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2;
+ (BOOL)canWriteURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2;
+ (unsigned int)compareBookmarkData:(id)arg1 toBookmarkData:(id)arg2;
+ (BOOL)getFileSystemRepresentation:(char [1024])arg1 forBookmarkData:(id)arg2;
+ (BOOL)getVolumeIdentifier:(unsigned long long *)arg1 forBookmarkData:(id)arg2 error:(id *)arg3;
+ (id)nameForBookmarkData:(id)arg1 error:(id *)arg2;
+ (id)pathForBookmarkData:(id)arg1 error:(id *)arg2;
+ (id)rootVolumeNode;
+ (BOOL)supportsSecureCoding;
- (struct __CFBundle *)CFBundleWithError:(id *)arg1;
- (id)bookmarkDataWithOptions:(unsigned long long)arg1 relativeToNode:(id)arg2 error:(id *)arg3;
- (id)bundleInfoDictionaryWithError:(id *)arg1;
- (BOOL)canReadFromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg1;
- (BOOL)canReadMetadataFromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg1;
- (BOOL)canWriteFromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg1;
- (id)canonical:(BOOL)arg1 pathWithError:(id *)arg2;
- (id)canonicalPathWithError:(id *)arg1;
- (id)childNodeWithRelativePath:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;
- (void)clearURLPropertyCacheIfStale;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)description;
- (id)diskImageURLWithFlags:(unsigned int)arg1 error:(id *)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)extendedAttributeWithName:(id)arg1 options:(int)arg2 error:(id *)arg3;
- (id)extensionWithError:(id *)arg1;
- (BOOL)getContentModificationDate:(double *)arg1 error:(id *)arg2;
- (BOOL)getCreationDate:(double *)arg1 error:(id *)arg2;
- (BOOL)getDate:(double *)arg1 forKey:(id)arg2 error:(id *)arg3;
- (BOOL)getDeviceNumber:(int *)arg1 error:(id *)arg2;
- (BOOL)getFileIdentifier:(unsigned long long *)arg1 error:(id *)arg2;
- (BOOL)getFileSystemRepresentation:(char [1024])arg1 error:(id *)arg2;
- (BOOL)getFinderInfo:(CDUnion_739f5cf2 *)arg1 error:(id *)arg2;
- (BOOL)getHFSType:(unsigned int *)arg1 creator:(unsigned int *)arg2 error:(id *)arg3;
- (BOOL)getInodeNumber:(unsigned long long *)arg1 error:(id *)arg2;
- (BOOL)getIsDirectory_NoIO:(BOOL *)arg1;
- (BOOL)getLength:(unsigned long long *)arg1 error:(id *)arg2;
- (BOOL)getOwnerUID:(unsigned int *)arg1 GID:(unsigned int *)arg2 error:(id *)arg3;
- (BOOL)getResourceValue:(id *)arg1 forKey:(id)arg2 options:(unsigned int)arg3 error:(id *)arg4;
- (BOOL)getTemporaryResourceValue:(id *)arg1 forKey:(id)arg2;
- (BOOL)getValue:(id *)arg1 forResourcePropertyKeyAndDirectoryFlag:(id)arg2;
- (BOOL)getVolumeIdentifier:(unsigned long long *)arg1 error:(id *)arg2;
- (BOOL)getWriterBundleIdentifier:(id *)arg1 error:(id *)arg2;
- (unsigned long long)hash;
- (id)initByResolvingBookmarkData:(id)arg1 options:(unsigned long long)arg2 relativeToNode:(id)arg3 bookmarkDataIsStale:(BOOL *)arg4 error:(id *)arg5;
- (id)initTemporaryNodeOnVolume:(id)arg1 flags:(unsigned int)arg2 fileDescriptor:(int *)arg3 error:(id *)arg4;
- (id)initWithCoder:(id)arg1;
- (id)initWithConfigurationString:(int)arg1 flags:(unsigned int)arg2 error:(id *)arg3;
- (id)initWithDirectory:(unsigned long long)arg1 inDomain:(unsigned long long)arg2 lastPathComponent:(id)arg3 createIntermediateDirectories:(BOOL)arg4 flags:(unsigned int)arg5 error:(id *)arg6;
- (id)initWithFileSystemRepresentation:(const char *)arg1 flags:(unsigned int)arg2 error:(id *)arg3;
- (id)initWithURL:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;
- (BOOL)isEqual:(id)arg1;
- (id)nameWithError:(id *)arg1;
- (id)pathWithError:(id *)arg1;
- (void)prepareForReuse;
- (id)resolvedNodeWithFlags:(unsigned int)arg1 error:(id *)arg2;
- (void)setDirectoryFlagForResourcePropertyKey:(id)arg1 value:(id)arg2;
- (BOOL)setExtendedAttribute:(id)arg1 name:(id)arg2 options:(int)arg3 error:(id *)arg4;
- (BOOL)setResourceValue:(id)arg1 forKey:(id)arg2 options:(unsigned int)arg3 error:(id *)arg4;
- (void)setTemporaryResourceValue:(id)arg1 forKey:(id)arg2;
- (id)temporaryDirectoryNodeWithFlags:(unsigned int)arg1 error:(id *)arg2;
- (id)volumeNodeWithFlags:(unsigned int)arg1 error:(id *)arg2;

@end

