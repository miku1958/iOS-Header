//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <AudioToolbox/CHHapticClientInterface-Protocol.h>
#import <AudioToolbox/NSXPCListenerDelegate-Protocol.h>

@class NSArray, NSString, NSXPCConnection;
@protocol OS_dispatch_queue;

__attribute__((visibility("hidden")))
@interface HapticClient : NSObject <NSXPCListenerDelegate, CHHapticClientInterface>
{
    NSXPCConnection *_connection;
    struct HapticSharedMemory _sharedBuffer;
    unsigned long long _uniqueID;
    int _serverTimeout;
    CDUnknownBlockType _completionCallback;
    CDUnknownBlockType _connectionCallback;
    struct mutex _mapMutex;
    struct map<unsigned long, SequenceEntry *, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, SequenceEntry *>>> _sequenceEntryMap;
    NSObject<OS_dispatch_queue> *_completionQueue;
    BOOL _prewarmed;
    BOOL _running;
    BOOL _connected;
    int _serverProcessID;
    unsigned long long _clientID;
    NSArray *_channelKeys;
    CDUnknownBlockType _asyncStopCallback;
}

@property (copy) CDUnknownBlockType asyncStopCallback; // @synthesize asyncStopCallback=_asyncStopCallback;
@property (readonly) NSArray *channelKeys; // @synthesize channelKeys=_channelKeys;
@property (readonly) unsigned long long clientID; // @synthesize clientID=_clientID;
@property (copy) CDUnknownBlockType completionCallback; // @synthesize completionCallback=_completionCallback;
@property BOOL connected; // @synthesize connected=_connected;
@property (copy) CDUnknownBlockType connectionCallback; // @synthesize connectionCallback=_connectionCallback;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) double hapticLatency;
@property (readonly) unsigned long long hash;
@property (readonly) BOOL prewarmed; // @synthesize prewarmed=_prewarmed;
@property (readonly) BOOL running; // @synthesize running=_running;
@property int serverProcessID; // @synthesize serverProcessID=_serverProcessID;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)allocateResources:(CDUnknownBlockType)arg1;
- (unsigned int)calculateHapticCommandParamCurveMemorySize:(unsigned int)arg1;
- (void)clearAssignedChannels;
- (BOOL)clearEventsFromTime:(double)arg1 channel:(unsigned long long)arg2;
- (BOOL)clearSequenceEvents:(unsigned long long)arg1 atTime:(double)arg2;
- (void)clientCompletedWithError:(id)arg1;
- (void)clientStoppedForReason:(unsigned long long)arg1 error:(id)arg2;
- (BOOL)copyCustomAudioEvent:(unsigned long long)arg1 options:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (BOOL)createCustomAudioEvent:(id)arg1 format:(id)arg2 frames:(unsigned long long)arg3 options:(id)arg4 reply:(CDUnknownBlockType)arg5;
- (void)dealloc;
- (void)destroySharedMemory;
- (void)detachHapticSequence:(unsigned long long)arg1;
- (void)detachSequenceEntryforID:(unsigned long long)arg1;
- (void)disconnect;
- (void)doInit;
- (BOOL)doScheduleParamCurve:(unsigned long long)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 paramCurve:(id)arg4 error:(id *)arg5;
- (BOOL)doScheduleParamCurveWithMemoryReserve:(unsigned long long)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 memoryReserve:(struct AddressReserve *)arg4 paramCurve:(id)arg5 error:(id *)arg6;
- (BOOL)doSendEvents:(id)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 outToken:(unsigned long long *)arg4 error:(id *)arg5;
- (BOOL)enableSequenceLooping:(unsigned long long)arg1 enable:(BOOL)arg2 error:(id *)arg3;
- (void)expectNotifyAfter:(double)arg1;
- (BOOL)finish:(CDUnknownBlockType)arg1;
- (id)getAsyncDelegateForMethod:(SEL)arg1 errorHandler:(CDUnknownBlockType)arg2;
- (CDUnknownBlockType)getSequenceFinishedHandlerForID:(unsigned long long)arg1;
- (id)getSyncDelegateForMethod:(SEL)arg1 errorHandler:(CDUnknownBlockType)arg2;
- (void)handleServerConnectionInterruption;
- (void)handleServerConnectionInvalidation;
- (id)initWithSessionID:(unsigned int)arg1 isShared:(BOOL)arg2 error:(id *)arg3;
- (BOOL)loadAndPrepareHapticSequenceFromData:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (BOOL)loadAndPrepareHapticSequenceFromEvents:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (BOOL)loadAndPrepareHapticSequenceFromVibePattern:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (BOOL)loadHapticEvent:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (BOOL)pauseHapticSequence:(unsigned long long)arg1 atTime:(double)arg2;
- (BOOL)prepareHapticSequence:(unsigned long long)arg1 error:(id *)arg2;
- (void)prewarm:(CDUnknownBlockType)arg1;
- (void)releaseResources;
- (BOOL)removeAssignedChannelID:(unsigned long long)arg1 error:(id *)arg2;
- (BOOL)removeCustomAudioEvent:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;
- (BOOL)requestAssignedChannels:(unsigned long long)arg1 error:(id *)arg2;
- (BOOL)resetChannel:(unsigned long long)arg1 atTime:(double)arg2;
- (BOOL)resumeHapticSequence:(unsigned long long)arg1 atTime:(double)arg2;
- (BOOL)scheduleParameterCurve:(unsigned long long)arg1 curve:(id)arg2 atTime:(double)arg3 channel:(unsigned long long)arg4 error:(id *)arg5;
- (BOOL)seekHapticSequence:(unsigned long long)arg1 toTime:(double)arg2;
- (BOOL)sendEvents:(id)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 outToken:(unsigned long long *)arg4 error:(id *)arg5;
- (void)sequenceFinished:(unsigned long long)arg1 error:(id)arg2;
- (BOOL)setChannelEventBehavior:(unsigned long long)arg1 channel:(unsigned long long)arg2;
- (void)setChannelKeys:(id)arg1;
- (BOOL)setParameter:(unsigned long long)arg1 atTime:(double)arg2 value:(float)arg3 channel:(unsigned long long)arg4;
- (BOOL)setPlayerBehavior:(unsigned long long)arg1 error:(id *)arg2;
- (void)setRunStateForSequenceEntryWithID:(unsigned long long)arg1 running:(BOOL)arg2;
- (BOOL)setSequenceChannelParameter:(unsigned long long)arg1 atTime:(double)arg2 value:(float)arg3 sequenceID:(unsigned long long)arg4 channel:(unsigned long long)arg5;
- (BOOL)setSequenceEventBehavior:(unsigned long long)arg1 behavior:(unsigned long long)arg2 channel:(unsigned long long)arg3;
- (void)setSequenceFinishedHandlerForID:(unsigned long long)arg1 finishedHandler:(CDUnknownBlockType)arg2;
- (BOOL)setSequenceLoopLength:(unsigned long long)arg1 length:(float)arg2 error:(id *)arg3;
- (BOOL)setSequencePlaybackRate:(unsigned long long)arg1 rate:(float)arg2 error:(id *)arg3;
- (BOOL)setupConnectionWithSessionID:(unsigned int)arg1 isShared:(BOOL)arg2 error:(id *)arg3;
- (int)setupSharedMemory:(id)arg1 size:(unsigned int)arg2;
- (BOOL)startEventAndReturnToken:(unsigned long long)arg1 type:(unsigned long long)arg2 atTime:(double)arg3 channel:(unsigned long long)arg4 eventToken:(unsigned long long *)arg5;
- (BOOL)startHapticSequence:(unsigned long long)arg1 atTime:(double)arg2 withOffset:(double)arg3;
- (void)startRunning:(CDUnknownBlockType)arg1;
- (BOOL)stopEventWithToken:(unsigned long long)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3;
- (BOOL)stopHapticSequence:(unsigned long long)arg1 atTime:(double)arg2;
- (void)stopPrewarm;
- (void)stopRunning;
- (void)stopRunning:(CDUnknownBlockType)arg1;

@end

