//
//     Generated by class-dump 3.5-MH (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class AVSystemController, NSNumber, NSString;

@interface AVVolumeController : NSObject
{
    BOOL _changingVolume;
    BOOL _currentRouteHasVolumeControl;
    BOOL _prefersSystemVolumeHUDHidden;
    BOOL _prefersSystemVolumeHUDHiddenInternal;
    BOOL _EUVolumeLimitEnabled;
    BOOL _EUVolumeLimitOverridden;
    BOOL _volumeChangesThrottled;
    BOOL _canOverrideEUVolumeLimit;
    BOOL _fullyInitialized;
    float _volume;
    float _EUVolumeLimit;
    NSNumber *_targetVolumeInternal;
    NSNumber *_maximumTargetVolumeSinceChangingVolumeBegan;
    NSString *_volumeCategory;
    AVSystemController *_sharedSystemController;
}

@property (nonatomic) float EUVolumeLimit; // @synthesize EUVolumeLimit=_EUVolumeLimit;
@property (nonatomic, getter=isEUVolumeLimitEnabled) BOOL EUVolumeLimitEnabled; // @synthesize EUVolumeLimitEnabled=_EUVolumeLimitEnabled;
@property (nonatomic, getter=isEUVolumeLimitOverridden) BOOL EUVolumeLimitOverridden; // @synthesize EUVolumeLimitOverridden=_EUVolumeLimitOverridden;
@property (nonatomic) BOOL canOverrideEUVolumeLimit; // @synthesize canOverrideEUVolumeLimit=_canOverrideEUVolumeLimit;
@property (nonatomic, getter=isChangingVolume) BOOL changingVolume; // @synthesize changingVolume=_changingVolume;
@property (nonatomic) BOOL currentRouteHasVolumeControl; // @synthesize currentRouteHasVolumeControl=_currentRouteHasVolumeControl;
@property (readonly, nonatomic) float effectiveVolumeLimit;
@property (nonatomic, getter=isFullyInitialized) BOOL fullyInitialized; // @synthesize fullyInitialized=_fullyInitialized;
@property (strong, nonatomic) NSNumber *maximumTargetVolumeSinceChangingVolumeBegan; // @synthesize maximumTargetVolumeSinceChangingVolumeBegan=_maximumTargetVolumeSinceChangingVolumeBegan;
@property (nonatomic) BOOL prefersSystemVolumeHUDHidden; // @synthesize prefersSystemVolumeHUDHidden=_prefersSystemVolumeHUDHidden;
@property (nonatomic) BOOL prefersSystemVolumeHUDHiddenInternal; // @synthesize prefersSystemVolumeHUDHiddenInternal=_prefersSystemVolumeHUDHiddenInternal;
@property (strong, nonatomic) AVSystemController *sharedSystemController; // @synthesize sharedSystemController=_sharedSystemController;
@property (strong, nonatomic) NSNumber *targetVolumeInternal; // @synthesize targetVolumeInternal=_targetVolumeInternal;
@property (nonatomic) float volume; // @synthesize volume=_volume;
@property (readonly, nonatomic) NSString *volumeCategory; // @synthesize volumeCategory=_volumeCategory;
@property (nonatomic) BOOL volumeChangesThrottled; // @synthesize volumeChangesThrottled=_volumeChangesThrottled;

+ (id)clientsPreferringVolumeHUDHidden;
+ (id)sharedVolumeController;
- (void).cxx_destruct;
- (void)_applyProposedVolumeIfNeeded;
- (void)_applyProposedVolumeImmediately;
- (void)_handleCurrentRouteHasVolumeControlDidChangeNotification:(id)arg1;
- (void)_handleEUVolumeLimitDidChangeNotification:(id)arg1;
- (void)_handleSystemControllerServerDiedNotification;
- (void)_handleSystemVolumeDidChangeNotification:(id)arg1;
- (void)_observeSystemController;
- (void)_performOnMainThread:(CDUnknownBlockType)arg1;
- (void)_unobserveSystemController;
- (void)beginChangingVolume;
- (void)dealloc;
- (void)endChangingVolume;
- (id)init;
- (void)setClientWithIdentifier:(id)arg1 prefersSystemVolumeHUDHidden:(BOOL)arg2;
- (void)setSystemVolumeHUDEnabled:(BOOL)arg1;
- (void)setTargetVolume:(float)arg1;

@end

